// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/customers": {
    /**
     * Get All Customers
     * @description Returns a list of Customers. Optional filter parameters can be passed in.
     *
     * **Notes**
     *
     * Attribute names are not available on the customer object.
     */
    get: operations["CustomersGet"];
    /**
     * Update Customers
     * @description Updates Customers. Subresource updates are not supported. Up to 10 customers can be updated in one call.
     *
     * **Required Fields**
     * * id -- ID of the *Customer* This must be included in the request body
     *
     * **Read Only Fields**
     * * id
     * * registration_ip_address
     * * date_created
     * * date_modified
     *
     *
     * **Notes**
     *
     * * Attributes Values can not be updated using Update a Customer. Use the [Update customer attribute values](/docs/rest-management/customers/customer-attribute-values#upsert-customer-attribute-values) endpoint.
     * * channel_ids -- Updating the list of channels a customer can access may create some side effects in a multi-storefront situation. This list determines which customer account we will use to authenticate a shopper given a channel.
     */
    put: operations["CustomersPut"];
    /**
     * Create Customers
     * @description Creates Customers. Create up to 10 customers in one call.
     *
     * **Required Fields**
     * * last_name
     * * first_name
     * * email
     *
     * **Required Fields Customer Address**
     * * first_name
     * * city
     * * country_code
     * * last_name
     * * address1
     *
     * **Required Fields Attributes**
     * * Attributes must be [created](/docs/rest-management/customers/customer-attributes#create-a-customer-attribute) **BEFORE** creating a customer.
     * * attribute_id
     * * attribute_value -- This is input as a string, regardless of the [Type](/docs/rest-management/customers/customer-attributes#create-a-customer-attribute).
     *
     * **Notes**
     *
     * A customer can be created with global access or channel-specific access.
     * * **Global access:**
     *   * Make sure the channel has `allow_global_logins` enabled. This is on by default only for the default storefront. Find more info at [Customer Settings > Channel](/docs/rest-management/customers/customer-settings-channel).
     *   * Omit `channel_ids` field, or provide `channel_ids: null`.
     * * **Channel-specific access:**
     *   * Provide a `channel_ids` array containing the channels accessible by the customer. This array cannot be empty.
     */
    post: operations["CustomersPost"];
    /**
     * Delete Customers
     * @description Deletes Customers.
     *
     * **Required Query**
     * * id:in -- ID of the customer
     *
     * **Notes**
     *
     * A query is required to delete customers. If not provided, a 204 is returned, with no changes to the data.
     */
    delete: operations["CustomersDelete"];
  };
  "/customers/addresses": {
    /**
     * Get All Customer Addresses
     * @description Returns a list of Customer Addresses. Optional filter parameters can be passed in.
     */
    get: operations["CustomersAddressesGet"];
    /**
     * Update a Customer Address
     * @description Updates a Customer Address. Multiple customer addresses can be updated in one call.
     *
     * **Required Fields**
     * * **id** -- ID of the *Customer Address*
     *
     * **Limits**
     * * Limit of **3** concurrent requests.
     *
     * **Notes**
     * * A unique customer address is a combination of the following core address fields:
     *   * **first_name**
     *   * **last_name**
     *   * **company**
     *   * **phone**
     *   * **address_type**
     *   * **address1**
     *   * **address2**
     *   * **city**
     *   * **country_code**
     *   * **state_or_province**
     *   * **postal_code**
     * * An attempt to update an address such that it becomes identical to another address that already exists will result in no change to the target address or custom form field values. The response will have an HTTP 200 return code, and the address will be absent from the response body.
     */
    put: operations["CustomersAddressesPut"];
    /**
     * Create a Customer Address
     * @description Creates a Customer Address. Multiple customer addresses can be created in one call.
     *
     * **Required Fields**
     * * **customer_id**
     * * **first_name**
     * * **last_name**
     * * **city**
     * * **country_code**
     * * **address1**
     *
     * **Notes**
     * * A unique customer address is a combination of the following core address fields:
     *   * **customer_id**
     *   * **first_name**
     *   * **last_name**
     *   * **company**
     *   * **phone**
     *   * **address_type**
     *   * **address1**
     *   * **address2**
     *   * **city**
     *   * **country_code**
     *   * **state_or_province**
     *   * **postal_code**
     * * An attempt to create an address that already exists will result in no change to the address or custom form field values, an HTTP 200 return code, and the address will be absent from the response body.
     * * The default rate limit for this endpoint is 10 concurrent requests.
     */
    post: operations["CustomersAddressesPost"];
    /**
     * Delete a Customer Address
     * @description Deletes a Customer Address.
     *
     * **Required Query**
     * * id:in -- ID of the *Customer Address*
     */
    delete: operations["CustomersAddressesDelete"];
  };
  "/customers/validate-credentials": {
    /**
     * Validate a customer credentials
     * @description Validate a customer credentials - This endpoint has special rate limiting protections to protect against abuse.
     */
    post: operations["CustomerValidateCredentials"];
  };
  "/customers/settings": {
    /**
     * Get Customer Settings
     * @description Returns the global-level customer settings.
     */
    get: operations["CustomerSettingsGet"];
    /**
     * Update Customer Settings
     * @description Updates the customer settings on the global level.
     */
    put: operations["CustomerSettingsPut"];
  };
  "/customers/settings/channels/{channel_id}": {
    /**
     * Get Customer Settings per Channel
     * @description Returns the customer settings per channel.
     *
     * **Notes**
     *
     *  * `null` indicates that there is no override per given channel and values are inherited from the global level.
     */
    get: operations["CustomerSettingsChannelGet"];
    /**
     * Update Customer Settings per Channel
     * @description Update the customer settings per channel
     *
     * **Required Fields**
     *
     * * `channel_id`: Provide a `channel_id` array containing one or more channel IDs. Customers will have access to these channels and no others. This array cannot be empty.
     *
     * **Notes**
     *
     * * Setting `null` will delete override per given channel, and values will be inherited from the global level. Make sure the channel has `allow_global_logins` enabled.
     */
    put: operations["CustomerSettingsChannelPut"];
    parameters: {
      path: {
        channel_id: string;
      };
    };
  };
  "/customers/attributes": {
    /**
     * Get All Customer Attributes
     * @description Returns a list of Customer Attributes. You can pass in optional filter parameters.
     */
    get: operations["CustomersAttributesGet"];
    /**
     * Update a Customer Attribute
     * @description Updates a Customer Attribute. Multiple customer attributes can be updated in one call.
     *
     * **Required Fields**
     * * id -- ID of the *Customer Attribute*
     *
     * Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
     *
     * **Limits**
     * * Limit of 3 concurrent requests.
     */
    put: operations["CustomersAttributesPut"];
    /**
     * Create a Customer Attribute
     * @description Creates a Customer Attribute. Multiple customer attributes can be created in one call.
     *
     * **Required Fields**
     * * name
     * * type
     *
     * **Limits**
     * * Limit of 3 concurrent requests.
     *
     * **Notes**
     *
     * Once the data type is set, it cannot be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
     *
     * Customer attributes are created separately from the customer. After the name and type are created, then the attributes can be added to the customer.
     *
     * A store cannot have more than 50 customer attributes.
     */
    post: operations["CustomersAttributesPost"];
    /**
     * Delete Customer Attributes
     * @description Deletes Customer Attributes from the store.
     *
     * **Required Query**
     * * id:in -- ID of the *Customer Attribute*
     */
    delete: operations["CustomersAttributesDelete"];
  };
  "/customers/attribute-values": {
    /**
     * Get All Customer Attribute Values
     * @description Returns a list of Customer Attribute Values. Optional filter parameters can be passed in.
     */
    get: operations["CustomersAttributeValuesGet"];
    /**
     * Upsert Customer Attribute Values
     * @description Upserts Customer Attribute Values. Updates the attribute values on the Customer. Multiple customer attribute values can be updated in one call.
     *
     * Upsert checks for an existing record. If there is none, it creates the record, if there is a matching record, it updates that record.
     *
     * **Limits**
     * * 10 per call limit.
     */
    put: operations["CustomersAttributeValuesPut"];
    /**
     * Delete Customer Attribute Values
     * @description Deletes Customer Attribute Values. Deletes the attribute value from the customer.
     *
     * **Required Query**
     * * id:in - ID of the *Customer Attribute Value*
     */
    delete: operations["CustomersAttributeValuesDelete"];
  };
  "/customers/form-field-values": {
    /**
     * Get Customer Form Field Values
     * @description Returns a list of form field values for the Customer or Customer Address object.
     *
     * To learn about adding and managing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
     */
    get: operations["CustomerFormFieldsGet"];
    /**
     * Upsert Customer Form Field Values
     * @description Updates form field values on the Customer or Customer Address objects. Multiple form field values can be updated in one call.
     *
     * Upsert checks for an existing record, if there is none it creates the record, if there is a matching record it updates that record.
     *
     * To learn more about editing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
     *
     * **Limits**
     * * Limit of 10 concurrent requests.
     */
    put: operations["CustomerFormFieldValuePUT"];
  };
  "/customers/{customerId}/consent": {
    /**
     * Get Customer Consent
     * @description Gets the status of a customer's consent to allow data collection by cookies and scripts while shopping on a storefront.
     */
    get: operations["CustomersConsentByCustomerId_GET"];
    /**
     * Update Customer Consent
     * @description Updates the status of a customer's consent to allow data collection by cookies and scripts while shopping on a storefront.
     */
    put: operations["CustomersConsentByCustomerId_PUT"];
    parameters: {
      path: {
        customerId: components["parameters"]["customerId"];
      };
    };
  };
  "/customers/{customerId}/stored-instruments": {
    /**
     * Get Stored Instruments
     * @description Lists all available stored instruments for a customer. This list will include all types of stored instruments namely card, account and bank_account instruments
     */
    get: operations["liststoredinstruments"];
    parameters: {
      path: {
        customerId: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Pagination
     * @description Data about the response, including pagination and collection totals.
     */
    Pagination: {
      /**
       * Format: int32
       * @description Total number of items in the result set.
       */
      total?: number;
      /**
       * Format: int32
       * @description Total number of items in the collection response.
       */
      count?: number;
      /**
       * Format: int32
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       */
      per_page?: number;
      /**
       * Format: int32
       * @description The page you are currently on within the collection.
       */
      current_page?: number;
      /**
       * Format: int32
       * @description The total number of pages in the collection.
       */
      total_pages?: number;
      links?: components["schemas"]["Links"];
    };
    /**
     * _metaCollection
     * @description Data about the response, including pagination and collection totals.
     */
    _metaCollection: {
      pagination?: components["schemas"]["Pagination"];
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    MetaOpen: {
      [key: string]: unknown;
    };
    /** Error Response */
    ErrorResponse: {
      /**
       * Format: int32
       * @description The HTTP status code.
       */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      /** @description A link to a list of BigCommerce API status codes. */
      type?: string;
      instance?: string;
      errors?: {
        [key: string]: string;
      };
    };
    /** customer_Full */
    customer_Full: {
      /** @description The email of the customer. Must be unique. */
      email?: string;
      /** @description The first name of the customer. */
      first_name?: string;
      /** @description The last name of the customer. */
      last_name?: string;
      /** @description The company of the customer. */
      company?: string;
      /** @description The phone number of the customer. */
      phone?: string;
      /** @description The IP address from which this customer was registered. */
      registration_ip_address?: string;
      /** @description The customer notes. */
      notes?: string;
      /** @description The tax exempt category code for the customer. */
      tax_exempt_category?: string;
      /**
       * Format: int32
       * @description ID of the group which this customer belongs to.
       */
      customer_group_id?: number;
      /**
       * Format: int32
       * @description The unique numeric ID of the customer.
       */
      id?: number;
      /**
       * Format: date-time
       * @description The date on which the customer was modified.
       */
      date_modified?: string;
      /**
       * Format: date-time
       * @description The date of which the customer was created.
       */
      date_created?: string;
      /**
       * Format: int32
       * @description Total number of customer addresses.
       */
      address_count?: number;
      /**
       * Format: int32
       * @description Total number of customer attributes.
       */
      attribute_count?: number;
      /**
       * Customer Authentication Base
       * @example {
       *   "force_password_reset": true
       * }
       */
      authentication?: {
        /** @description If `true`, this customer will be forced to change password on next login. */
        force_password_reset?: boolean;
      };
      /** @description Array of customer addresses. Limited to 10. */
      addresses?: components["schemas"]["address_Full"][];
      /** @description Array of customer attributes. Limited to 10. */
      attributes?: components["schemas"]["attribute_Full"][];
      /** @description Array of form fields. Controlled by `formfields` parameter. */
      form_fields?: components["schemas"]["formFieldValue_Customer"][];
      store_credit_amounts?: components["schemas"]["CustomerStoredCreditAmounts"];
      /** @description Determines if the customer is signed up to receive either product review or abandoned cart emails or receive both emails. */
      accepts_product_review_abandoned_cart_emails?: boolean;
      /** @description Channel ID of the customer that has created the form. */
      origin_channel_id?: number;
      channel_ids?: components["schemas"]["customerChannelIds"];
    };
    /** customer_Post */
    customer_Post: {
      /** @description The email of the customer. Must be unique. */
      email: string;
      /** @description The first name of the customer. */
      first_name: string;
      /** @description The last name of the customer. */
      last_name: string;
      /** @description The company of the customer. */
      company?: string;
      /** @description The phone number of the customer. */
      phone?: string;
      /** @description The customer notes. */
      notes?: string;
      /** @description The tax exempt category code for the customer. */
      tax_exempt_category?: string;
      /**
       * Format: int32
       * @description ID of the group which this customer belongs to.
       */
      customer_group_id?: number;
      /** @description Array of customer addresses. Limited to 10. */
      addresses?: components["schemas"]["customerAddresses_CustomerPost"][];
      /** @description Array of customer attributes. Limited to 10. */
      attributes?: components["schemas"]["customerAttributes_Base"][];
      authentication?: components["schemas"]["customerAuthentication_PostPut"];
      /** @description It determines if the customer is signed up to receive either product review or abandoned cart emails or receive both emails. */
      accepts_product_review_abandoned_cart_emails?: boolean;
      store_credit_amounts?: components["schemas"]["CustomerStoredCreditAmounts"];
      /** @description Channel ID of the customer that has created the form. */
      origin_channel_id?: number;
      /**
       * @description Array of channels the customer can access.
       * @example [
       *   1,
       *   2
       * ]
       */
      channel_ids?: number[];
      /** @description Array of form fields. Controlled by formfields parameter. */
      form_fields?: components["schemas"]["formFieldValue"][];
    };
    /** customer_Put */
    customer_Put: {
      /** @description The email of the customer. Must be unique. */
      email?: string;
      /** @description The first name of the customer. */
      first_name?: string;
      /** @description The last name of the customer. */
      last_name?: string;
      /** @description The company of the customer. */
      company?: string;
      /** @description The phone number of the customer. */
      phone?: string;
      /** @description The IP address from which this customer was registered. */
      registration_ip_address?: string;
      /** @description The customer notes. */
      notes?: string;
      /** @description The tax exempt category code for the customer. */
      tax_exempt_category?: string;
      /**
       * Format: int32
       * @description ID of the group which this customer belongs to.
       */
      customer_group_id?: number;
      /**
       * Format: int32
       * @description The unique numeric ID of the customer.
       */
      id: number;
      authentication?: components["schemas"]["customerAuthentication_PostPut"];
      /** @description It determines if the customer is signed up to receive either product review or abandoned cart emails or receive both emails. */
      accepts_product_review_abandoned_cart_emails?: boolean;
      store_credit_amounts?: components["schemas"]["CustomerStoredCreditAmounts"];
      /** @description Channel ID of the customer that has created the form. */
      origin_channel_id?: number;
      /** @description Arrays of channels the customer can access. */
      channel_ids?: number[];
      /** @description Array of form fields. Controlled by formfields parameter. */
      form_fields?: components["schemas"]["formFieldValue"][];
    };
    /** attributeValue_Base */
    attributeValue_Base: {
      /**
       * Format: int32
       * @description Attribute value ID.
       */
      id?: number;
      /**
       * Format: int32
       * @description Attribute ID.
       */
      attribute_id: number;
      /**
       * @description Attribute value. This will always be a string, regardless of the attribute's type.
       *
       * Corresponds to `attribute_value` used in customer attribute values `GET` requests.
       * @example string
       */
      value: string;
      /**
       * Format: int32
       * @description Customer ID.
       * @example 8504
       */
      customer_id: number;
    };
    attribute_Full: {
      /**
       * Format: int32
       * @description Attribute ID.
       * @example 2
       */
      attribute_id?: number;
      /**
       * @description Attribute value.
       * @example Yes
       */
      attribute_value?: string;
      /**
       * Format: int32
       * @description Customer ID.
       * @example 1
       */
      customer_id?: number;
      /**
       * Format: date-time
       * @description The date the customer attribute was created.
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description The date the customer attribute was modified.
       */
      date_modified?: string;
      /**
       * Format: int32
       * @description Attribute value ID.
       * @example 2
       */
      id?: number;
    };
    /**
     * attribute_Put
     * @description Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
     */
    attribute_Put: {
      /** @description Attribute name. */
      name: string;
      /**
       * Format: int32
       * @description Attribute ID.
       */
      id: number;
    };
    /**
     * attribute_Post
     * @example {
     *   "name": "attribute_string 01",
     *   "type": "string"
     * }
     */
    attribute_Post: {
      /** @description Attribute name. */
      name: string;
      /**
       * Type
       * @description Attribute type should match one of: string, number, date.
       * @example string
       * @enum {string}
       */
      type: "string" | "number" | "date";
    };
    /** address_Full */
    address_Full: {
      /** @description The first name of the customer address. */
      first_name: string;
      /** @description The last name of the customer address. */
      last_name: string;
      /** @description The company of the customer address. */
      company?: string;
      /** @description The address 1 line. */
      address1: string;
      /** @description The address 2 line. */
      address2?: string;
      /** @description The city of the customer address. */
      city: string;
      /** @description The state or province name. */
      state_or_province: string;
      /** @description The postal code of the customer address. */
      postal_code: string;
      /** @description The country code of the customer address. */
      country_code: string;
      /** @description The phone number of the customer address. */
      phone?: string;
      /**
       * Address Type
       * @description The address type. Residential or Commercial.
       * @example residential
       * @enum {string}
       */
      address_type?: "residential" | "commercial";
      /**
       * Format: int32
       * @description The customer ID.
       */
      customer_id: number;
      /**
       * Format: int32
       * @description The unique numeric ID of the address.
       */
      id: number;
      /** @description The country name of the customer address. */
      country?: string;
      /** @description Array of form fields. Controlled by `formfields` parameter. */
      form_fields?: components["schemas"]["formFieldValue"][];
    };
    /** address_Put */
    address_Put: {
      /** @description The first name of the customer address. */
      first_name?: string;
      /** @description The last name of the customer address. */
      last_name?: string;
      /** @description The company of the customer address. */
      company?: string;
      /** @description The address 1 line. */
      address1?: string;
      /** @description The address 2 line. */
      address2?: string;
      /** @description The city of the customer address. */
      city?: string;
      /**
       * @description The state or province name.
       * @example California
       */
      state_or_province?: string;
      /** @description The postal code of the customer address. */
      postal_code?: string;
      /**
       * @description The country code of the customer address.
       * @example US
       */
      country_code?: string;
      /** @description The phone number of the customer address. */
      phone?: string;
      /**
       * Address Type
       * @description The address type. Residential or Commercial.
       * @example residential
       * @enum {string}
       */
      address_type?: "residential" | "commercial";
      /**
       * Format: int32
       * @description The unique numeric ID of the address.
       * @example 1
       */
      id: number;
      /** @description Array of form fields. Controlled by formfields parameter. */
      form_fields?: components["schemas"]["formFieldValue"][];
    };
    /** address_Post */
    address_Post: {
      /**
       * @description The first name of the customer address.
       * @example John
       */
      first_name: string;
      /**
       * @description The last name of the customer address.
       * @example Doe
       */
      last_name: string;
      /**
       * @description The company of the customer address.
       * @example BigCommerce
       */
      company?: string;
      /**
       * @description The address 1 line.
       * @example 123 Example Street
       */
      address1: string;
      /**
       * @description The address 2 line.
       * @example Building 4
       */
      address2?: string;
      /**
       * @description The city of the customer address.
       * @example Austin
       */
      city: string;
      /**
       * @description The state or province name spelled out in full. It is required for countries that need a state/province to complete an address. State or province codes not accepted.
       * @example Texas
       */
      state_or_province?: string;
      /**
       * @description The postal code of the customer address. It is required for countries that need postal codes to complete an address.
       * @example 78759
       */
      postal_code?: string;
      /**
       * @description The country code of the customer address.
       * @example US
       */
      country_code: string;
      /**
       * @description The phone number of the customer address.
       * @example 15551234567
       */
      phone?: string;
      /**
       * Address Type
       * @description The address type. Residential or Commercial.
       * @example residential
       * @enum {string}
       */
      address_type?: "residential" | "commercial";
      /**
       * Format: int32
       * @description The customer ID.
       * @example 1
       */
      customer_id: number;
      /** @description The address custom form field values */
      form_fields?: components["schemas"]["formFieldValue"][];
    };
    /**
     * customerAddresses_Base
     * @description The `address` object for the `customer` object's `addresses` array.
     * @example {
     *   "address1": "Addr 1",
     *   "address2": "",
     *   "address_type": "residential",
     *   "city": "San Francisco",
     *   "company": "History",
     *   "country_code": "US",
     *   "first_name": "Ronald",
     *   "last_name": "Swimmer",
     *   "phone": "707070707",
     *   "postal_code": "33333",
     *   "state_or_province": "California"
     * }
     */
    customerAddresses_Base: {
      /** @description The first name of the customer address. */
      first_name: string;
      /** @description The last name of the customer address. */
      last_name: string;
      /** @description The company of the customer address. */
      company?: string;
      /** @description The address 1 line. */
      address1: string;
      /** @description The address 2 line. */
      address2?: string;
      /** @description The city of the customer address. */
      city: string;
      /** @description The state or province name. It is required for countries that need a state/province to complete an address. */
      state_or_province?: string;
      /** @description The postal code of the customer address. It is required for countries that need postal codes to complete an address. */
      postal_code?: string;
      /** @description The country code of the customer address. */
      country_code: string;
      /** @description The phone number of the customer address. */
      phone?: string;
      /**
       * Address Type
       * @description The address type. Residential or Commercial.
       * @example residential
       * @enum {string}
       */
      address_type?: "residential" | "commercial";
    };
    /**
     * customerAddresses_CustomerPost
     * @description The `address` object for the `customer` object's `addresses` array.
     * @example {
     *   "address1": "Addr 1",
     *   "address2": "",
     *   "address_type": "residential",
     *   "city": "San Francisco",
     *   "company": "History",
     *   "country_code": "US",
     *   "first_name": "Ronald",
     *   "last_name": "Swimmer",
     *   "phone": "707070707",
     *   "postal_code": "33333",
     *   "state_or_province": "California",
     *   "form_fields": [
     *     {
     *       "name": "test",
     *       "value": "test"
     *     }
     *   ]
     * }
     */
    customerAddresses_CustomerPost: {
      /** @description The first name associated with the customer address. */
      first_name: string;
      /** @description The last name of the customer address. */
      last_name: string;
      /** @description The company of the customer address. */
      company?: string;
      /** @description The address 1 line. */
      address1: string;
      /** @description The address 2 line. */
      address2?: string;
      /** @description The city of the customer address. */
      city: string;
      /** @description The state or province name. Required for countries in which valid addresses must contain a state/province. */
      state_or_province?: string;
      /** @description The postal code of the customer address. Required for countries in which valid addresses must have postal codes. */
      postal_code?: string;
      /** @description The country code of the customer address. */
      country_code: string;
      /** @description The phone number of the customer address. */
      phone?: string;
      /**
       * Address Type
       * @description The address type. Residential or Commercial.
       * @example residential
       * @enum {string}
       */
      address_type?: "residential" | "commercial";
      /** @description Array of form fields. Controlled by `formfields` parameter. */
      form_fields?: components["schemas"]["formFieldValue"][];
    };
    /** customerAuthentication_PostPut */
    customerAuthentication_PostPut: {
      /** @description If `true`, this customer will be forced to change password on next login. */
      force_password_reset?: boolean;
    } & {
      /** @description New password for customer. Write only field. */
      new_password?: string;
    };
    /**
     * Links
     * @description Pagination links for the previous and next parts of the whole collection.
     */
    Links: {
      /** @description Link to the previous page returned in the response. */
      previous?: string;
      /** @description Link to the current page returned in the response. */
      current?: string;
      /** @description Link to the next page returned in the response. */
      next?: string;
    };
    /** Generic Form Field Value */
    formFieldValue: {
      /**
       * @description The form field name.
       * @example color
       */
      name: string;
      value: string | number | string[];
    };
    /** Customer Form Field Value */
    formFieldValue_Customer: {
      /**
       * @description The form field name.
       * @example color
       */
      name: string;
      value: string | number | string[];
      customer_id: number;
    };
    /** Customer Address Form Field Value */
    formFieldValue_Address: {
      /**
       * @description The form field name.
       * @example color
       */
      name: string;
      value: string | number | string[];
      /**
       * @description The Customer Address ID.
       * @example 1
       */
      address_id: number;
    };
    /** formFieldValue_Full */
    formFieldValue_Full: components["schemas"]["formFieldValue_Customer"] | components["schemas"]["formFieldValue_Address"];
    /**
     * consent_Full
     * @description Response payload for the BigCommerce API.
     */
    consent_Full: {
      allow?: components["schemas"]["consentAllow"];
      deny?: components["schemas"]["Deny"];
      /**
       * Format: date-time
       * @description The date of which the customer consent was last updated.
       */
      updated_at?: string;
    };
    /**
     * consentAllow
     * @example [
     *   "essential",
     *   "targeting",
     *   "functional"
     * ]
     */
    consentAllow: ("essential" | "functional" | "analytics" | "targeting")[];
    /**
     * Deny
     * @example [
     *   "analytics"
     * ]
     */
    Deny: ("essential" | "functional" | "analytics" | "targeting")[];
    /**
     * DeclareCustomerConsentRequest
     * @description Request payload for the BigCommerce API.
     */
    DeclareCustomerConsentRequest: {
      allow?: components["schemas"]["consentAllow"];
      deny?: components["schemas"]["Deny"];
    };
    /** customerAttributes_Base */
    customerAttributes_Base: {
      /**
       * Format: int32
       * @description Attribute ID.
       * @example 55
       */
      attribute_id?: number;
      /**
       * @description Attribute value. This will always be a string, regardless of the attribute’s type.
       * @example string
       */
      attribute_value?: string;
    };
    /**
     * customerChannelIds
     * @description Array of channel ids the Customer has access to.
     */
    customerChannelIds: unknown[];
    /**
     * Card Instrument
     * @description Details about a stored card instrument which includes details around billing, last 4 digits, issuer, etc.
     */
    CardInstrument: {
      /**
       * @description Type of instrument.
       * @enum {string}
       */
      type?: "stored_card";
      /**
       * @description An identifier representing this stored instrument.
       * @example 84596bea275fa254da820056bdc3e495bdf01fd11c51b0336347d447ee16200c
       */
      token?: string;
      /** @description Identifies whether this stored instrument is default for the customer. */
      is_default?: boolean;
      /**
       * @description Card brand.
       * @example VISA
       */
      brand?: string;
      /** @description Expiry month for this card. */
      expiry_month?: number;
      /** @description Expiry year for this card. */
      expiry_year?: number;
      /**
       * @description Issuer identification number for this card.
       * @example 411111
       */
      issuer_identification_number?: string;
      /**
       * @description Last four digits of this card.
       * @example 1111
       */
      last_4?: string;
      billing_address?: components["schemas"]["BillingAddress"];
    };
    /**
     * PayPal Account Instrument
     * @description A PayPal account stored instrument.
     */
    PayPalAccountInstrument: {
      /**
       * @description Instrument type.
       * @enum {string}
       */
      type?: "stored_paypal_account";
      /**
       * @description An identifier representing this stored instrument.
       * @example 84596bea275fa254da820056bdc3e495bdf01fd11c51b0336347d447ee16200c
       */
      token?: string;
      /** @description Identifies whether this stored instrument is default for the customer. */
      is_default?: boolean;
      /**
       * @description PayPal email address.
       * @example bc-buyer-paypal-express@example.com
       */
      email?: string;
    };
    /**
     * Bank Account Instrument
     * @description A stored bank account instrument.
     */
    BankAccountInstrument: {
      /**
       * @description Instrument type.
       * @enum {string}
       */
      type?: "stored_bank_account";
      /**
       * @description An identifier representing this stored instrument.
       * @example 84596bea275fa254da820056bdc3e495bdf01fd11c51b0336347d447ee16200c
       */
      token?: string;
      /** @description Identifies whether this stored instrument is default for the customer. */
      is_default?: boolean;
      /**
       * @description A masked bank account number.
       * @example 12XXX56
       */
      masked_account_number?: string;
      /**
       * @description Issuer identifier for the account.
       * @example DE001
       */
      issuer?: string;
    };
    BillingAddress: {
      /**
       * @description First name of the card holder.
       * @example Tester
       */
      first_name?: string;
      /**
       * @description Last name of the card holder.
       * @example Tester
       */
      last_name?: string;
      /** @example example@example.com */
      email?: string;
      /**
       * @description Company of the card holder.
       * @example Test Company
       */
      company?: string;
      /** @example 1 Sample Street */
      address1?: string;
      /** @example Apt 1 */
      address2?: string;
      /** @example Las Vegas */
      city?: string;
      /** @example 90854 */
      postal_code?: string;
      /**
       * @description Represents state or province.
       * @example Nevada
       */
      state_or_province?: string;
      /** @example NV */
      state_or_province_code?: string;
      /**
       * @description ISO-3166-1 2 letter country code.
       * @example US
       */
      country_code?: string;
      /** @example 101-192-0293 */
      phone?: string;
    };
    /**
     * Format: double
     * @description Store credit.
     */
    CustomerStoredCreditAmounts: {
        /**
         * Format: float
         * @example 43.15
         */
        amount?: number;
      }[];
    /**
     * CustomerSettingsObject
     * @description Customer Settings.
     */
    CustomerSettingsObject: {
      /** @description Controls the privacy settings. */
      privacy_settings?: {
        /** @description Determines if a customer requires consent for tracking privacy. */
        ask_shopper_for_tracking_consent?: boolean;
        /**
         * @description The URL for a website's privacy policy.
         * @example https://bigcommmerce.com/policy
         */
        policy_url?: string;
      };
      /** @description The settings for a collection of customers. */
      customer_group_settings?: {
        /**
         * @description The ID for a guest customer group.
         * @example 0
         */
        guest_customer_group_id?: number;
        /**
         * @description The ID for a default customer group.
         * @example 0
         */
        default_customer_group_id?: number;
      };
    };
    /** CustomerChannelSettingsObject */
    CustomerChannelSettingsObject: {
      /** @description Controls the privacy settings. */
      privacy_settings?: {
        /** @description Determines if a customer requires consent for tracking privacy. */
        ask_shopper_for_tracking_consent?: boolean;
        /**
         * @description The URL for a website's privacy policy.
         * @example https://bigcommmerce.com/policy
         */
        policy_url?: string;
      };
      /** @description The settings for a collection of customers. */
      customer_group_settings?: {
        /**
         * @description The ID for a guest customer group.
         * @example 0
         */
        guest_customer_group_id?: number;
        /**
         * @description The ID for a default customer group.
         * @example 0
         */
        default_customer_group_id?: number;
      };
      /**
       * @description * Determines if a channel allows global customer to login
       * * Determines if customers created on this channel will get global access/login
       */
      allow_global_logins?: boolean;
    };
    /** ValidateCustomerCredentialsObject */
    ValidateCustomerCredentialsObject: {
      /** @description Customer email address. */
      email: string;
      /** @description Customer password. */
      password: string;
      /** @description ChannelId to check the customer credentials against - If this field is empty we will use channel 1. */
      channel_id?: number;
    };
    /** ValidateCustomerCredentialsResponseObject */
    ValidateCustomerCredentialsResponseObject: {
      /** @description Returns the customer ID. */
      customer_id?: number | null;
      /** @description indicates if the provided credentials are valid. */
      is_valid?: boolean;
    };
  };
  responses: {
    /** @description Customer Collection Response */
    CustomerCollectionResponse: {
      content: {
        "application/json": {
          data?: components["schemas"]["customer_Full"][];
          meta?: components["schemas"]["_metaCollection"];
        };
      };
    };
    AddressCollectionResponse: {
      content: {
        "application/json": {
          data?: ({
              /** @description The address 1 line. */
              address1: string;
              /** @description The address 2 line. */
              address2?: string;
              /**
               * Address Type
               * @description The address type. Residential or Commercial.
               * @example residential
               * @enum {string}
               */
              address_type?: "residential" | "commercial";
              /** @description The city of the customer address. */
              city: string;
              /** @description The company of the customer address. */
              company?: string;
              /** @description The country name of the customer address. */
              country?: string;
              /** @description The country code of the customer address. */
              country_code: string;
              /**
               * Format: int32
               * @description The customer ID.
               */
              customer_id: number;
              /** @description The first name of the customer address. */
              first_name: string;
              /**
               * Format: int32
               * @description The unique numeric ID of the address.
               */
              id: number;
              /** @description The last name of the customer address. */
              last_name: string;
              /** @description The phone number of the customer address. */
              phone?: string;
              /** @description The postal code of the customer address. */
              postal_code: string;
              /** @description The state or province name */
              state_or_province: string;
              /** @description Array of form fields. Controlled by `formfields` parameter. */
              form_fields?: components["schemas"]["formFieldValue_Address"][];
            })[];
          meta?: components["schemas"]["_metaCollection"];
        };
      };
    };
    AddressCollectionResponsePostPut: {
      content: {
        "application/json": {
          data?: ({
              /** @description The address 1 line. */
              address1?: string;
              /** @description The address 2 line. */
              address2?: string;
              /**
               * Address Type
               * @description The address type. Residential or Commercial
               * @example residential
               * @enum {string}
               */
              address_type?: "residential" | "commercial";
              /** @description The city of the customer address. */
              city?: string;
              /** @description The company of the customer address. */
              company?: string;
              /** @description The country name of the customer address. */
              country?: string;
              /** @description The country code of the customer address. */
              country_code?: string;
              /**
               * Format: int32
               * @description The customer ID.
               */
              customer_id?: number;
              /** @description The first name of the customer address. */
              first_name?: string;
              /**
               * Format: int32
               * @description The unique numeric ID of the address.
               */
              id?: number;
              /** @description The last name of the customer address. */
              last_name?: string;
              /** @description The phone number of the customer address. */
              phone?: string;
              /** @description The postal code of the customer address. */
              postal_code?: string;
              /** @description The state or province name. */
              state_or_province?: string;
              /** @description Array of form fields. Controlled by `formfields` parameter. */
              form_fields?: components["schemas"]["formFieldValue_Address"][];
            })[];
          meta?: components["schemas"]["MetaOpen"];
        };
      };
    };
    CustomerAttributeValueCollectionResponse: {
      content: {
        "application/json": {
          data?: {
              /**
               * Format: int32
               * @description Attribute ID.
               */
              attribute_id: number;
              /**
               * @description Attribute value. This will always be a string, regardless of the attributes type.
               *
               * Corresponds to `value` used in customer attribute values `PUT` requests.
               */
              attribute_value: string;
              /**
               * Format: int32
               * @description Attribute value ID.
               */
              id?: number;
              /**
               * Format: int32
               * @description Customer ID.
               */
              customer_id: number;
              /**
               * Format: date-time
               * @description The date on which the customer attribute value was modified.
               */
              date_modified?: string;
              /**
               * Format: date-time
               * @description The date of which the customer attribute value was created.
               */
              date_created?: string;
            }[];
          /**
           * Collection Meta
           * @description Data about the response, including pagination and collection totals.
           */
          meta?: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            pagination?: {
              /**
               * Format: int32
               * @description Total number of items in the result set.
               */
              total?: number;
              /**
               * Format: int32
               * @description Total number of items in the collection response.
               */
              count?: number;
              /**
               * Format: int32
               * @description The amount of items returned in the collection per page, controlled by the limit parameter.
               */
              per_page?: number;
              /**
               * Format: int32
               * @description The page you are currently on within the collection.
               */
              current_page?: number;
              /**
               * Format: int32
               * @description The total number of pages in the collection.
               */
              total_pages?: number;
              /**
               * Links
               * @description Pagination links for the previous and next parts of the whole collection.
               */
              links?: {
                /** @description Link to the previous page returned in the response. */
                previous?: string;
                /** @description Link to the current page returned in the response. */
                current?: string;
                /** @description Link to the next page returned in the response. */
                next?: string;
              };
            };
          };
        };
      };
    };
    CustomerAttributesResponse: {
      content: {
        "application/json": {
          data?: ({
              /** @description Attribute name. */
              name: string;
              /**
               * Type
               * @description Attribute type should match one of: string, number, date.
               * @example string
               * @enum {string}
               */
              type: "string" | "number" | "date";
              /**
               * Format: int32
               * @description Attribute ID.
               */
              id: number;
              /**
               * Format: date-time
               * @description The date on which the customer attribute was modified.
               */
              date_modified?: string;
              /**
               * Format: date-time
               * @description The date of which the customer attribute was created.
               */
              date_created?: string;
            })[];
          meta?: components["schemas"]["MetaOpen"];
        };
      };
    };
    FormFieldValueCollectionResponse: {
      content: {
        "application/json": {
          data?: (OneOf<[({
              /**
               * @description The form field name.
               * @example color
               */
              name: string;
              value: string | number | string[];
            }) & {
              customer_id: number;
            }, ({
              /**
               * @description The form field name.
               * @example color
               */
              name: string;
              value: string | number | string[];
            }) & {
              /** @description The Customer Address ID. */
              address_id: number;
            }]>)[];
          /**
           * Collection Meta
           * @description Data about the response, including pagination and collection totals.
           */
          meta?: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            pagination?: {
              /**
               * Format: int32
               * @description Total number of items in the result set.
               */
              total?: number;
              /**
               * Format: int32
               * @description Total number of items in the collection response.
               */
              count?: number;
              /**
               * Format: int32
               * @description The amount of items returned in the collection per page, controlled by the limit parameter.
               */
              per_page?: number;
              /**
               * Format: int32
               * @description The page you are currently on within the collection.
               */
              current_page?: number;
              /**
               * Format: int32
               * @description The total number of pages in the collection.
               */
              total_pages?: number;
              /**
               * Links
               * @description Pagination links for the previous and next parts of the whole collection.
               */
              links?: {
                /** @description Link to the previous page returned in the response. */
                previous?: string;
                /** @description Link to the current page returned in the response. */
                current?: string;
                /** @description Link to the next page returned in the response. */
                next?: string;
              };
            };
          };
        };
      };
    };
    FormFieldValuesResponse: {
      content: {
        "application/json": {
          data?: (OneOf<[({
              /**
               * @description The form field name.
               * @example color
               */
              name: string;
              value: string | number | string[];
            }) & {
              customer_id: number;
            }, ({
              /**
               * @description The form field name.
               * @example color
               */
              name: string;
              value: string | number | string[];
            }) & {
              /** @description The Customer Address ID. */
              address_id: number;
            }]>)[];
          meta?: components["schemas"]["MetaOpen"];
        };
      };
    };
    consent_Resp: {
      content: {
        "application/json": components["schemas"]["consent_Full"];
      };
    };
  };
  parameters: {
    customerId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Customers
   * @description Returns a list of Customers. Optional filter parameters can be passed in.
   *
   * **Notes**
   *
   * Attribute names are not available on the customer object.
   */
  CustomersGet: {
    parameters: {
      query?: {
        /** @description Page number. `page=1` */
        page?: number;
        /** @description Items count per page. `limit=50` */
        limit?: number;
        /**
         * @description Filter items by ID.
         * `id:in=4,5,6`
         */
        "id:in"?: number[];
        /** @description Filter items by company. `company:in=bigcommerce,commongood` */
        "company:in"?: string[];
        /** @description Filter items by customer_group_id. `customer_group_id:in=5,6` */
        "customer_group_id:in"?: string[];
        /** @description Filter items by date_created. `date_created=2018-09-05T13:43:54` */
        date_created?: string;
        /** @description Filter items by maximum date_created. `date_created:max=2018-09-10` */
        "date_created:max"?: string;
        /** @description Filter items by date_created. `date_created:min=2018-09-05` */
        "date_created:min"?: string;
        /** @description Filter items by date_modified. `date_modified=2018-09-05T13:45:03` */
        date_modified?: string;
        /** @description Filter items by minimum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04` */
        "date_modified:min"?: string;
        /** @description Filter items by maximum date_modified. `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04` */
        "date_modified:max"?: string;
        /** @description Filter items by email. `email:in=janedoe@example.com` */
        "email:in"?: string;
        /** @description Filter items by first_name and last_name. `name=james moriarty` */
        "name:in"?: string[];
        /**
         * @description Filter items by substring in first_name and last_name.
         * `name:like=moriarty, sherlock`
         * Concatenates the first_name and last_name fields.
         */
        "name:like"?: string[];
        /**
         * @description Filter items by registration_ip_address. If the customer was created using the API, then registration address is blank.
         * `registration_ip_address:in=12.345.6.789`
         */
        "registration_ip_address:in"?: number[];
        /**
         * @description Indicates whether to include customer sub-resources:
         *  * `addresses` - customer addresses
         *  * `storecredit` - store credit
         *  * `attributes` - customer attributes and address attributes
         *  * `formfields` - customer and address form fields
         *  * `shopper_profile_id` - the ID of the shopper profile associated with the customer (Beta)
         *  * `segment_ids`- segments the customer belongs to (Beta)
         *
         *  `include=addresses,storecredit,attributes,formfields,shopper_profile_id,segment_ids`
         */
        include?: ("addresses" | "storecredit" | "attributes" | "formfields" | "shopper_profile_id" | "segment_ids")[];
        /** @description Sort items by date_created, date_modified, or last_name:* `date_created:asc` - date created, ascending* `date_created:desc` - date created, descending* `last_name:asc` - last name, ascending* `last_name:desc` - last name, descending * `date_modified:asc` - date modified, ascending* `date_modified:desc`- date modified, descending  Example: `sort=last_name:asc` */
        sort?: "date_created:asc" | "date_created:desc" | "last_name:asc" | "last_name:desc" | "date_modified:asc" | "date_modified:desc";
      };
    };
    responses: {
      200: components["responses"]["CustomerCollectionResponse"];
    };
  };
  /**
   * Update Customers
   * @description Updates Customers. Subresource updates are not supported. Up to 10 customers can be updated in one call.
   *
   * **Required Fields**
   * * id -- ID of the *Customer* This must be included in the request body
   *
   * **Read Only Fields**
   * * id
   * * registration_ip_address
   * * date_created
   * * date_modified
   *
   *
   * **Notes**
   *
   * * Attributes Values can not be updated using Update a Customer. Use the [Update customer attribute values](/docs/rest-management/customers/customer-attribute-values#upsert-customer-attribute-values) endpoint.
   * * channel_ids -- Updating the list of channels a customer can access may create some side effects in a multi-storefront situation. This list determines which customer account we will use to authenticate a shopper given a channel.
   */
  CustomersPut: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["customer_Put"][];
      };
    };
    responses: {
      200: components["responses"]["CustomerCollectionResponse"];
      /** @description The request payload is too large. The maximum number of items allowed in the array is 10. */
      413: {
        content: never;
      };
      /** @description The `Customer` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Customers
   * @description Creates Customers. Create up to 10 customers in one call.
   *
   * **Required Fields**
   * * last_name
   * * first_name
   * * email
   *
   * **Required Fields Customer Address**
   * * first_name
   * * city
   * * country_code
   * * last_name
   * * address1
   *
   * **Required Fields Attributes**
   * * Attributes must be [created](/docs/rest-management/customers/customer-attributes#create-a-customer-attribute) **BEFORE** creating a customer.
   * * attribute_id
   * * attribute_value -- This is input as a string, regardless of the [Type](/docs/rest-management/customers/customer-attributes#create-a-customer-attribute).
   *
   * **Notes**
   *
   * A customer can be created with global access or channel-specific access.
   * * **Global access:**
   *   * Make sure the channel has `allow_global_logins` enabled. This is on by default only for the default storefront. Find more info at [Customer Settings > Channel](/docs/rest-management/customers/customer-settings-channel).
   *   * Omit `channel_ids` field, or provide `channel_ids: null`.
   * * **Channel-specific access:**
   *   * Provide a `channel_ids` array containing the channels accessible by the customer. This array cannot be empty.
   */
  CustomersPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["customer_Post"][];
      };
    };
    responses: {
      200: components["responses"]["CustomerCollectionResponse"];
      /** @description The request payload is too large. The maximum number of items allowed in the array is 10. */
      413: {
        content: never;
      };
      /** @description The *Customer* was not valid. This is the result of missing required fields or trying to edit a read only field. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Customers
   * @description Deletes Customers.
   *
   * **Required Query**
   * * id:in -- ID of the customer
   *
   * **Notes**
   *
   * A query is required to delete customers. If not provided, a 204 is returned, with no changes to the data.
   */
  CustomersDelete: {
    parameters: {
      query: {
        /**
         * @description Filter items by ID.
         * `id:in=4,5,6`
         */
        "id:in": number[];
      };
    };
    responses: {
      204: {
        headers: {
        };
        content: never;
      };
    };
  };
  /**
   * Get All Customer Addresses
   * @description Returns a list of Customer Addresses. Optional filter parameters can be passed in.
   */
  CustomersAddressesGet: {
    parameters: {
      query?: {
        /** @description Page number. `page=1` */
        page?: number;
        /** @description Items count per page. `limit=50` */
        limit?: number;
        /** @description Filter items by company. `company:in=bigcommerce,commongood` */
        "company:in"?: string[];
        /** @description Filter items by first_name and last_name. `name:in=James+Moriarty` */
        "name:in"?: string[];
        /** @description Filter by the ID of the customer. Also accepts comma-separated IDs to filter for multiple customers. `customer_id:in=23,24,55` */
        "customer_id:in"?: number[];
        /**
         * @description Indicates whether to include customer address sub-resources:
         * * `formfields` - address form fields
         * `include=formfields`
         */
        include?: "formfields";
        /**
         * @description Filter items by ID.
         * `id:in=4,5,6`
         */
        "id:in"?: number[];
      };
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    responses: {
      200: components["responses"]["AddressCollectionResponse"];
    };
  };
  /**
   * Update a Customer Address
   * @description Updates a Customer Address. Multiple customer addresses can be updated in one call.
   *
   * **Required Fields**
   * * **id** -- ID of the *Customer Address*
   *
   * **Limits**
   * * Limit of **3** concurrent requests.
   *
   * **Notes**
   * * A unique customer address is a combination of the following core address fields:
   *   * **first_name**
   *   * **last_name**
   *   * **company**
   *   * **phone**
   *   * **address_type**
   *   * **address1**
   *   * **address2**
   *   * **city**
   *   * **country_code**
   *   * **state_or_province**
   *   * **postal_code**
   * * An attempt to update an address such that it becomes identical to another address that already exists will result in no change to the target address or custom form field values. The response will have an HTTP 200 return code, and the address will be absent from the response body.
   */
  CustomersAddressesPut: {
    parameters: {
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["address_Put"][];
      };
    };
    responses: {
      200: components["responses"]["AddressCollectionResponsePostPut"];
      /** @description The `Address` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a Customer Address
   * @description Creates a Customer Address. Multiple customer addresses can be created in one call.
   *
   * **Required Fields**
   * * **customer_id**
   * * **first_name**
   * * **last_name**
   * * **city**
   * * **country_code**
   * * **address1**
   *
   * **Notes**
   * * A unique customer address is a combination of the following core address fields:
   *   * **customer_id**
   *   * **first_name**
   *   * **last_name**
   *   * **company**
   *   * **phone**
   *   * **address_type**
   *   * **address1**
   *   * **address2**
   *   * **city**
   *   * **country_code**
   *   * **state_or_province**
   *   * **postal_code**
   * * An attempt to create an address that already exists will result in no change to the address or custom form field values, an HTTP 200 return code, and the address will be absent from the response body.
   * * The default rate limit for this endpoint is 10 concurrent requests.
   */
  CustomersAddressesPost: {
    parameters: {
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["address_Post"][];
      };
    };
    responses: {
      200: components["responses"]["AddressCollectionResponsePostPut"];
      /** @description The `Address` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a Customer Address
   * @description Deletes a Customer Address.
   *
   * **Required Query**
   * * id:in -- ID of the *Customer Address*
   */
  CustomersAddressesDelete: {
    parameters: {
      query: {
        /**
         * @description Filter items by ID.
         * `id:in=4,5,6`
         */
        "id:in": number[];
      };
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    responses: {
      204: {
        headers: {
        };
        content: never;
      };
    };
  };
  /**
   * Validate a customer credentials
   * @description Validate a customer credentials - This endpoint has special rate limiting protections to protect against abuse.
   */
  CustomerValidateCredentials: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ValidateCustomerCredentialsObject"];
      };
    };
    responses: {
      /** @description Returns if the customer credentials provided are valid or not. */
      200: {
        content: {
          "application/json": components["schemas"]["ValidateCustomerCredentialsResponseObject"];
        };
      };
      /** @description This is the result of missing required fields. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Allowed number of requests exceeded. */
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Customer Settings
   * @description Returns the global-level customer settings.
   */
  CustomerSettingsGet: {
    responses: {
      /** @description Returns customer settings values for global level. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerSettingsObject"];
        };
      };
    };
  };
  /**
   * Update Customer Settings
   * @description Updates the customer settings on the global level.
   */
  CustomerSettingsPut: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerSettingsObject"];
      };
    };
    responses: {
      /** @description Customer settings are returned on a global level. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerSettingsObject"];
        };
      };
    };
  };
  /**
   * Get Customer Settings per Channel
   * @description Returns the customer settings per channel.
   *
   * **Notes**
   *
   *  * `null` indicates that there is no override per given channel and values are inherited from the global level.
   */
  CustomerSettingsChannelGet: {
    parameters: {
      path: {
        channel_id: number;
      };
    };
    responses: {
      /** @description Customer settings for this channel are returned. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerChannelSettingsObject"];
        };
      };
    };
  };
  /**
   * Update Customer Settings per Channel
   * @description Update the customer settings per channel
   *
   * **Required Fields**
   *
   * * `channel_id`: Provide a `channel_id` array containing one or more channel IDs. Customers will have access to these channels and no others. This array cannot be empty.
   *
   * **Notes**
   *
   * * Setting `null` will delete override per given channel, and values will be inherited from the global level. Make sure the channel has `allow_global_logins` enabled.
   */
  CustomerSettingsChannelPut: {
    parameters: {
      path: {
        channel_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerChannelSettingsObject"];
      };
    };
    responses: {
      /** @description Customer settings are returned. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerSettingsObject"];
        };
      };
    };
  };
  /**
   * Get All Customer Attributes
   * @description Returns a list of Customer Attributes. You can pass in optional filter parameters.
   */
  CustomersAttributesGet: {
    parameters: {
      query?: {
        /** @description Page number. `page=1` */
        page?: number;
        /** @description Items count per page. `limit=50` */
        limit?: number;
        /** @description Filter items by customer attribute name. `name=Date+Joined` */
        name?: string;
        /** @description Filter items by substring in customer attribute name. `name:like=join` */
        "name:like"?: string;
        /** @description The type of the customer attribute. */
        type?: string;
        /** @description Filter items by `date_created`. `date_created=2021-01-07T20:28:16Z` */
        date_created?: string;
        /** @description Filter items by maximum `date_created`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
        "date_created:max"?: string;
        /** @description Filter items by minimum `date_created`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
        "date_created:min"?: string;
        /** @description Filter items by `date_modified`. */
        date_modified?: string;
        /** @description Filter items by maximum `date_modified`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
        "date_modified:max"?: string;
        /** @description Filter items by minimum `date_modified`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
        "date_modified:min"?: string;
      };
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    responses: {
      200: components["responses"]["CustomerAttributesResponse"];
    };
  };
  /**
   * Update a Customer Attribute
   * @description Updates a Customer Attribute. Multiple customer attributes can be updated in one call.
   *
   * **Required Fields**
   * * id -- ID of the *Customer Attribute*
   *
   * Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
   *
   * **Limits**
   * * Limit of 3 concurrent requests.
   */
  CustomersAttributesPut: {
    parameters: {
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["attribute_Put"][];
      };
    };
    responses: {
      200: components["responses"]["CustomerAttributesResponse"];
      /** @description The `Attribute` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a Customer Attribute
   * @description Creates a Customer Attribute. Multiple customer attributes can be created in one call.
   *
   * **Required Fields**
   * * name
   * * type
   *
   * **Limits**
   * * Limit of 3 concurrent requests.
   *
   * **Notes**
   *
   * Once the data type is set, it cannot be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
   *
   * Customer attributes are created separately from the customer. After the name and type are created, then the attributes can be added to the customer.
   *
   * A store cannot have more than 50 customer attributes.
   */
  CustomersAttributesPost: {
    parameters: {
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["attribute_Post"][];
      };
    };
    responses: {
      200: components["responses"]["CustomerAttributesResponse"];
      /** @description The `Attribute` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Customer Attributes
   * @description Deletes Customer Attributes from the store.
   *
   * **Required Query**
   * * id:in -- ID of the *Customer Attribute*
   */
  CustomersAttributesDelete: {
    parameters: {
      query: {
        /** @description Filter items by ID. */
        "id:in": number[];
      };
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    responses: {
      204: {
        headers: {
        };
        content: never;
      };
    };
  };
  /**
   * Get All Customer Attribute Values
   * @description Returns a list of Customer Attribute Values. Optional filter parameters can be passed in.
   */
  CustomersAttributeValuesGet: {
    parameters: {
      query?: {
        /** @description Page number. `page=1` */
        page?: number;
        /** @description Items count per page. `limit=50` */
        limit?: number;
        /** @description Filter items by the customer ID. `customer_id:in=23,24,55` */
        "customer_id:in"?: number[];
        /** @description Filter items by the attribute ID. `attribute_id:in=1,2` */
        "attribute_id:in"?: number[];
        /** @description Filter items by the attribute name. `name=age` */
        name?: string;
        /** @description Filter items by `date_created`. `date_created=2018-09-05T13:43:54` */
        date_created?: string;
        /** @description Filter items by maximum `date_created`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
        "date_created:max"?: string;
        /** @description Filter items by minimum `date_created`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
        "date_created:min"?: string;
        /** @description Filter items by `date_modified`. `date_modified=2018-09-05T13:45:03` */
        date_modified?: string;
        /** @description Filter items by maximum `date_modified`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
        "date_modified:max"?: string;
        /** @description Filter items by minimum `date_modified`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. `date_created=2021-01-07` or `date_created=1610051296000` */
        "date_modified:min"?: string;
      };
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    responses: {
      200: components["responses"]["CustomerAttributeValueCollectionResponse"];
    };
  };
  /**
   * Upsert Customer Attribute Values
   * @description Upserts Customer Attribute Values. Updates the attribute values on the Customer. Multiple customer attribute values can be updated in one call.
   *
   * Upsert checks for an existing record. If there is none, it creates the record, if there is a matching record, it updates that record.
   *
   * **Limits**
   * * 10 per call limit.
   */
  CustomersAttributeValuesPut: {
    parameters: {
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["attributeValue_Base"][];
      };
    };
    responses: {
      200: components["responses"]["CustomerAttributeValueCollectionResponse"];
      /** @description The `CustomerAttributeValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Customer Attribute Values
   * @description Deletes Customer Attribute Values. Deletes the attribute value from the customer.
   *
   * **Required Query**
   * * id:in - ID of the *Customer Attribute Value*
   */
  CustomersAttributeValuesDelete: {
    parameters: {
      query: {
        /**
         * @description Filter items by ID.
         * `id:in=4,5,6`
         */
        "id:in": number[];
      };
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    responses: {
      204: {
        headers: {
        };
        content: never;
      };
    };
  };
  /**
   * Get Customer Form Field Values
   * @description Returns a list of form field values for the Customer or Customer Address object.
   *
   * To learn about adding and managing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
   */
  CustomerFormFieldsGet: {
    parameters: {
      query?: {
        /** @description Page number. `page=1` */
        page?: number;
        /** @description Items count per page. `limit=50` */
        limit?: number;
        /** @description Filter by the customer ID. */
        customer_id?: number;
        /** @description Filter by the ID of the customer address. */
        address_id?: number;
        /** @description Filter by the field name. */
        field_name?: string;
        /**
         * @description Filter by the field type.
         *  * `checkboxes` - checkboxes field
         *  * `date` - date field
         *  * `multiline` - multiline text field
         *  * `numbers` - numbers only field
         *  * `password` - password field
         *  * `radiobuttons` - radio buttons field
         *  * `text` - text field
         *  * `picklist` - pick list field
         */
        field_type?: "checkboxes" | "date" | "multiline" | "numbers" | "password" | "radiobuttons" | "text" | "picklist";
      };
      header?: {
        Accept?: string;
        "Content-Type"?: string;
      };
    };
    responses: {
      200: components["responses"]["FormFieldValueCollectionResponse"];
      /** @description The form field value was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Upsert Customer Form Field Values
   * @description Updates form field values on the Customer or Customer Address objects. Multiple form field values can be updated in one call.
   *
   * Upsert checks for an existing record, if there is none it creates the record, if there is a matching record it updates that record.
   *
   * To learn more about editing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
   *
   * **Limits**
   * * Limit of 10 concurrent requests.
   */
  CustomerFormFieldValuePUT: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["formFieldValue_Full"][];
      };
    };
    responses: {
      200: components["responses"]["FormFieldValuesResponse"];
      /** @description The form field value was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Customer Consent
   * @description Gets the status of a customer's consent to allow data collection by cookies and scripts while shopping on a storefront.
   */
  CustomersConsentByCustomerId_GET: {
    parameters: {
      path: {
        customerId: components["parameters"]["customerId"];
      };
    };
    responses: {
      200: components["responses"]["consent_Resp"];
      /** @description Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Invalid JSON request body - missing or invalid data. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Customer Consent
   * @description Updates the status of a customer's consent to allow data collection by cookies and scripts while shopping on a storefront.
   */
  CustomersConsentByCustomerId_PUT: {
    parameters: {
      header?: {
        "Content-Type"?: string;
      };
      path: {
        customerId: components["parameters"]["customerId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeclareCustomerConsentRequest"];
      };
    };
    responses: {
      200: components["responses"]["consent_Resp"];
      /** @description Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Invalid JSON request body - missing or invalid data. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Stored Instruments
   * @description Lists all available stored instruments for a customer. This list will include all types of stored instruments namely card, account and bank_account instruments
   */
  liststoredinstruments: {
    parameters: {
      path: {
        customerId: string;
        customerId: components["parameters"]["customerId"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["CardInstrument"] | components["schemas"]["PayPalAccountInstrument"] | components["schemas"]["BankAccountInstrument"])[];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
