// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/login/token/{jwt_token}": {
    /**
     * Login Token
     * @description The customer login access point URL.
     *
     * [Learn more about the Customer Login API](/docs/start/authentication/customer-login).
     *
     * ## Example
     *
     * ```
     * https://yourstore.example.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ7Y2xpZW50X2lkfSIsImlhdCI6MTUzNTM5MzExMywianRpIjoie3V1aWR9Iiwib3BlcmF0aW9uIjoiY3VzdG9tZXJfbG9naW4iLCJzdG9yZV9oYXNoIjoie3N0b3JlX2hhc2h9IiwiY3VzdG9tZXJfaWQiOjJ9.J-fAtbjRFGdLsT744DhoprFEDqIfVq72HbDzrbFy6Is
     * ```
     */
    get: operations["getCustomerLogin"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Customer Login SSO */
    customerLoginSSO: {
      /**
       * @description Indicates the token’s issuer. This is your application’s client ID, which is obtained during application registration in Developer Portal.
       * @example "1234r5t6y7u8i9o0p"
       */
      iss?: string;
      /**
       * @description Time when the token was generated. This is a numeric value indicating the number of seconds since the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time).
       * @example 1535393113
       */
      iat?: number;
      /**
       * @description Request ID string that must be unique across all requests made by your app. A UUID or other random string would be an appropriate value. Most libraries contain a method for generating a uuid. For testing a [UUID generator](https://www.uuidgenerator.net/) can be used, but it recommended to use built in libraries.
       * @example "20b7c03e-00da-4d29-91bf-2aa06a57575b"
       */
      jti?: string;
      /**
       * @description Must contain the string “customer_login”.
       * @example "customer_login"
       */
      operation?: string;
      /**
       * @description Store hash identifying the store you are logging into.
       *
       * @example "abc123"
       */
      store_hash?: string;
      /**
       * @description ID of the customer you are logging in, as obtained through the Customer API.
       *
       * @example 2
       */
      customer_id?: number;
      /**
       * @description Optional field containing a relative path for the shopper’s destination after login. Will default to `/account.php`.
       *
       * @default /account.php
       */
      redirect_to?: string;
      /**
       * @description **(Optional)** Field containing the expected IP address for the request. If provided, BigCommerce will check that it matches the browser trying to log in. If there is not a match, it will be rejected.
       *
       * @example "111.222.333.444"
       */
      request_ip?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Login Token
   * @description The customer login access point URL.
   *
   * [Learn more about the Customer Login API](/docs/start/authentication/customer-login).
   *
   * ## Example
   *
   * ```
   * https://yourstore.example.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ7Y2xpZW50X2lkfSIsImlhdCI6MTUzNTM5MzExMywianRpIjoie3V1aWR9Iiwib3BlcmF0aW9uIjoiY3VzdG9tZXJfbG9naW4iLCJzdG9yZV9oYXNoIjoie3N0b3JlX2hhc2h9IiwiY3VzdG9tZXJfaWQiOjJ9.J-fAtbjRFGdLsT744DhoprFEDqIfVq72HbDzrbFy6Is
   * ```
   */
  getCustomerLogin: {
    parameters: {
      path: {
        jwt_token: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
}
