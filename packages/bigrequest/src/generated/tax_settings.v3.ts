// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/tax/settings": {
    /**
     * Get Tax Settings
     * @description Retrieves global-level tax settings.
     */
    get: operations["get-tax-settings"];
    /**
     * Update Tax Settings
     * @description Updates global-level tax settings.
     */
    put: operations["set-tax-settings"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Tax_Settings: {
      /** @description Whether prices entered on this store include a tax component or not. */
      tax_entered_with_prices?: boolean;
      /** @description Settings that describe how prices display at the global level. */
      price_display_settings?: {
        /** @description Whether to show prices as tax inclusive or tax exclusive in the BigCommerce control panel. */
        show_inclusive_in_control_panel?: boolean;
        /**
         * @description Whether to show prices as tax inclusive or tax exclusive across all invoices, or use the shopper始s tax zone for price display on invoices.
         * @default ZONE
         * @enum {string}
         */
        invoice_price_display_strategy?: "ZONE" | "INCLUSIVE" | "EXCLUSIVE";
      };
      /**
       * @description Describes the fallback behavior that applies when a tax provider produces an error. A merchant may decide to use a flat 10% fallback tax rate, their basic tax settings, or to block the transaction until they achieve a successful result.
       * @default FIXED
       * @enum {string}
       */
      fallback_strategy?: "FIXED" | "BASIC" | "DISABLE";
      /**
       * @description This setting applies only if a merchant enters tax-inclusive prices. When enabled, the store subtracts the item始s store tax rate before calculating tax using the shopper始s tax zone. The tax-exclusive amount will be the same across all tax zones. When disabled, the tax-inclusive price remains the same across all tax zones; only the tax amount will vary based on the shopper始s location. The tax-exclusive amount may vary among tax zones. These calculations are relevant for tax pricing and tax quotations that use basic tax.
       * @default true
       */
      should_subtract_store_tax?: boolean;
      /**
       * @description This setting determines which tax zone a store uses to estimate tax for guest shoppers. When enabled, the store identifies a country-level tax zone based on the geolocation of a guest shopper. The store then applies the corresponding tax zone to estimate taxes. When disabled, the store identifies the zone using the provided `guest_shopper_tax_zone_id` field instead. Only the tax zones you configure can be matched to the guest shopper's geolocation.
       * @default false
       */
      should_use_geolocation_to_determine_guest_shopper_tax_zone?: boolean;
      /**
       * @description ID for the tax zone a store uses when estimating tax for guest shoppers. The store uses this zone if you disable `should_use_geolocation_to_determine_guest_shopper_tax_zone`. The store also uses this zone if there is no matching country-level tax zone for the geolocation.
       * @default 1
       */
      guest_shopper_tax_zone_id?: number;
      /**
       * @description ID for the tax zone a store uses when subtracting store tax. This setting applies only if a merchant enters tax-inclusive prices and subtracts store tax before tax calculation.
       * @default 1
       */
      store_tax_zone_id?: number;
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    MetaOpen: {
      [key: string]: unknown;
    };
  };
  responses: never;
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Tax Settings
   * @description Retrieves global-level tax settings.
   */
  "get-tax-settings": {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Tax_Settings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Tax Settings
   * @description Updates global-level tax settings.
   */
  "set-tax-settings": {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tax_Settings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Tax_Settings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
      /** @description The request body does not meet the specification. */
      422: never;
    };
  };
}
