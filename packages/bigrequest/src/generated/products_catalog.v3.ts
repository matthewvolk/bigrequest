// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/catalog/products": {
    /**
     * Get All Products
     * @description Returns a list of **Products**. Optional filter parameters can be passed in.
     */
    get: operations["getProducts"];
    /**
     * Update Products (Batch)
     * @description Updates products in batches. Batches are limited to 10 products.
     *
     * **Required Fields**
     * * `id` - product `id` is required for batch updates to products.
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     */
    put: operations["updateProducts"];
    /**
     * Create a Product
     * @description Creates a *Product*. Only one product can be created at a time.
     *
     * **Required Fields:**
     * - `name`
     * - `type`
     * - `weight`
     * - `price`
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     *
     * **Limits**
     * - 250 characters product name length.
     * - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
     *
     * **Usage Notes**
     * * This endpoint accepts a `video` array. To create a product video that accepts a `video` object, see [Create a Product Video](/docs/rest-catalog/products/videos#create-a-product-video) for information.
     */
    post: operations["createProduct"];
    /**
     * Delete Products
     * @description To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
     *
     * > #### Note
     * > The maximum number of products you can delete at one time is 250.
     *
     * **Example**:
     * To delete products with the id's of 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
     */
    delete: operations["deleteProducts"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/catalog/products/{product_id}": {
    /**
     * Get a Product
     * @description Returns a single *Product*. Optional parameters can be passed in.
     */
    get: operations["getProductById"];
    /**
     * Update a Product
     * @description Updates a *Product*.
     *
     * **Limits**
     * - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
     *
     * **Read-Only Fields**
     * - id
     * - date_created
     * - date_modified
     * - calculated_price
     * - base_variant_id
     */
    put: operations["updateProduct"];
    /**
     * Delete a Product
     * @description Deletes a *Product*.
     */
    delete: operations["deleteProductById"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/images": {
    /**
     * Get All Product Images
     * @description Returns a list of *Product Images*. Optional parameters can be passed in.
     */
    get: operations["getProductImages"];
    /**
     * Create a Product Image
     * @description Creates a *Product Image*.
     *
     *  **Required Fields**
     * - `image_file`, or
     * - `image_url`
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - For file uploads, use the `multipart/form-data` media type.
     * - You can create only one image at a time. A product can have up to 1000 images.
     * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
     * - Each image file or image uploaded by URL can be up to 8 MB.
     */
    post: operations["createProductImage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/images/{image_id}": {
    /**
     * Get a Product Image
     * @description Returns a single *Product Image*. Optional parameters can be passed in.
     */
    get: operations["getProductImageById"];
    /**
     * Update a Product Image
     * @description Updates a *Product Image*.
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - Each image file or image uploaded by URL can be up to 8 MB.
     * - For file uploads, send a POST request using the `multipart/form-data` media type
     */
    put: operations["updateProductImage"];
    /**
     * Delete a Product Image
     * @description Deletes a *Product Image*.
     */
    delete: operations["deleteProductImage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        image_id: components["parameters"]["ImageIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/videos": {
    /**
     * Get All Product Videos
     * @description Returns a list of *Product Videos*. Optional parameters can be passed in.
     */
    get: operations["getProductVideos"];
    /**
     * Create a Product Video
     * @description Creates a *Product Video*.
     *
     * **Required Fields**
     * * video_id
     *
     * **Read-Only Fields**
     * * id
     *
     * Publicly accessible URLs are valid parameters.
     * Videos must be loaded through YouTube at this time.
     */
    post: operations["createProductVideo"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/videos/{id}": {
    /**
     * Get a Product Video
     * @description Returns a single *Product Video*. Optional parameters can be passed in.
     */
    get: operations["getProductVideoById"];
    /**
     * Update a Product Video
     * @description Updates a *Product Video.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations["updateProductVideo"];
    /**
     * Delete a Product Video
     * @description Deletes a *Product Video*.
     */
    delete: operations["deleteProductVideo"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        id: components["parameters"]["VideoIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/complex-rules": {
    /**
     * Get Complex Rules
     * @description Returns a list of all product *Complex Rules*. Optional parameters may be passed in.
     */
    get: operations["getComplexRules"];
    /**
     * Create a Complex Rule
     * @description Creates a product *Complex Rule*.
     *
     * **Required Fields**
     * - modifier_id
     * - modifier_value_id
     * - variant_id
     *
     * **Read-Only Fields**
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    post: operations["createComplexRule"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/complex-rules/{complex_rule_id}": {
    /**
     * Get a Complex Rule
     * @description Returns a single *Complex Rule*. Optional parameters can be passed in.
     */
    get: operations["getComplexRuleById"];
    /**
     * Update a Complex Rule
     * @description Updates a *Complex Rule*.
     *
     * **Required Fields**:
     * - none
     *
     * **Read-Only Fields**:
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    put: operations["updateComplexRule"];
    /**
     * Delete a Complex Rule
     * @description Deletes a product *Complex Rule*.
     */
    delete: operations["deleteComplexRuleById"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/custom-fields": {
    /**
     * Get Custom Fields
     * @description Returns a list of product *Custom Fields*. Optional parameters can be passed in.
     */
    get: operations["getCustomFields"];
    /**
     * Create a Custom Fields
     * @description Creates a *Custom Field*.
     *
     * **Required Fields:**
     * - name
     * - value
     *
     * **Read-Only:**
     * - id
     *
     * **Limits**
     * - 200 custom fields per product limit.
     * - 255 characters per custom field limit.
     */
    post: operations["createCustomField"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/custom-fields/{custom_field_id}": {
    /**
     * Get a Custom Field
     * @description Returns a single *Custom Field*. Optional parameters can be passed in.
     */
    get: operations["getCustomFieldById"];
    /**
     * Update a Custom Field
     * @description Updates a *Custom Field*.
     *
     * **Required Fields**
     * - none
     *
     * **Read-Only**
     * - id
     */
    put: operations["updateCustomField"];
    /**
     * Delete a Custom Field
     * @description Deletes a product *Custom Field*.
     */
    delete: operations["deleteCustomFieldById"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        custom_field_id: components["parameters"]["CustomFieldIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/bulk-pricing-rules": {
    /**
     * Get All Bulk Pricing Rules
     * @description Returns a list of *Bulk Pricing Rules*. Optional parameters can be passed in.
     */
    get: operations["getBulkPricingRules"];
    /**
     * Create a Bulk Pricing Rule
     * @description Creates a *Bulk Pricing Rule*.
     *
     * **Required Fields**
     * - quantity_min
     * - quantity_max
     * - type
     * - amount
     *
     * **Read-Only Fields**
     * - id
     *
     * **Limits**
     * - 50 bulk pricing rule per product limit.
     */
    post: operations["createBulkPricingRule"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}": {
    /**
     * Get a Bulk Pricing Rule
     * @description Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in.
     */
    get: operations["getBulkPricingRuleById"];
    /**
     * Update a Bulk Pricing Rule
     * @description Updates a *Bulk Pricing Rule*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * - id
     */
    put: operations["updateBulkPricingRule"];
    /**
     * Delete a Bulk Pricing Rule
     * @description Deletes a *Bulk Pricing Rule*.
     */
    delete: operations["deleteBulkPricingRuleById"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/metafields": {
    /**
     * Get All Product Metafields
     * @description Returns a list of *Product Metafields*. Optional parameters can be passed in.
     */
    get: operations["getProductMetafieldsByProductId"];
    /**
     * Create a Product Metafield
     * @description Creates a *Product Metafield*.
     *
     * **Required Fields:**
     * * permission_set
     * * namespace
     * * key
     * * value
     *
     * **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    post: operations["createProductMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/metafields/{metafield_id}": {
    /**
     * Get a Product Metafield
     * @description Returns a single *Product Metafield*. Optional parameters can be passed in.
     */
    get: operations["getProductMetafieldByProductId"];
    /**
     * Update a Product Metafield
     * @description Updates a *Product Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified using the API account that created the metafield:
     * 	* `namespace`
     * 	* `key`
     * 	* `permission_set`
     * 	* `value`
     *
     * **Usage Notes**
     * * Attempting to modify the `namespace`, `key`, `permission_set`, or `value` field using an API account different from the one used to create those metafields will result in a `403` error message.
     */
    put: operations["updateProductMetafield"];
    /**
     * Delete a Product Metafield
     * @description Deletes a *Product Metafield*.
     */
    delete: operations["deleteProductMetafieldById"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/reviews": {
    /**
     * Get Product Reviews
     * @description Returns a list of all *Product Reviews*. Optional parameters can be passed in.
     */
    get: operations["getProductReviews"];
    /**
     * Create a Product Review
     * @description Creates a *Product Review*.
     *
     * **Required Fields**
     * - title
     * - date_reviewed
     *
     * **Read-Only Fields**
     * * id
     */
    post: operations["createProductReview"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/reviews/{review_id}": {
    /**
     * Get a Product Review
     * @description Returns a single *Product Review*. Optional parameters maybe passed in.
     */
    get: operations["getProductReviewById"];
    /**
     * Update a Product Review
     * @description Updates a *Product Review*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations["updateProductReview"];
    /**
     * Delete a Product Review
     * @description Deletes a *Product Review*.
     */
    delete: operations["deleteProductReview"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        review_id: components["parameters"]["ReviewIdParam"];
      };
    };
  };
  "/catalog/products/channel-assignments": {
    /**
     * Get Products Channel Assignments
     * @description Returns a list of products channel assignments.
     */
    get: operations["GetProductsChannelAssignments"];
    /**
     * Create Products Channel Assignments
     * @description Creates products channel assignments.
     */
    put: operations["CreateProductsChannelAssignments"];
    /**
     * Delete Products Channel Assignments
     * @description Delete products channel assignments. A filter must be supplied.
     */
    delete: operations["DeleteProductsChannelAssignments"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/catalog/products/category-assignments": {
    /**
     * Get Products Category Assignments
     * @description Returns a list of products category assignments.
     */
    get: operations["GetProductsCategoryAssignments"];
    /**
     * Create Products Category Assignments.
     * @description Creates products category assignments.
     */
    put: operations["CreateProductsCategoryAssignments"];
    /**
     * Delete Products Category Assignments
     * @description Deletes products category assignments. A filter must be supplied.
     */
    delete: operations["DeleteProductsCategoryAssignments"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/catalog/summary": {
    /**
     * Get a Catalog Summary
     * @description Returns a lightweight inventory summary from the BigCommerce Catalog.
     *
     * The inventory summary includes:
     * * "inventory_count"
     * * "variant_count"
     * * "inventory_value"
     * * "highest_variant_price"
     * * "average_variant_price"
     * * "lowest_variant_price"
     * * "oldest_variant_date"
     * * "newest_variant_date"
     * * "primary_category_id"
     * * "primary_category_name"
     */
    get: operations["getCatalogSummary"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * productModifier_Base
     * @description Common Modifier properties.
     */
    productModifier_Base: {
      /**
       * @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
       *
       * @enum {string}
       */
      type: "date" | "checkbox" | "file" | "text" | "multi_line_text" | "numbers_only_text" | "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
      /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
      required: boolean;
      /** @description The order the modifiers display on the product detail page. */
      sort_order?: number;
      config?: components["schemas"]["config_Full"];
      /** @description The name of the option shown on the storefront. */
      display_name?: string;
    };
    /**
     * productModifier_Full
     * @description Product Modifier
     */
    productModifier_Full: components["schemas"]["productModifier_Base"] & {
      /**
       * @description The unique numeric ID of the modifier; increments sequentially.
       *
       * @example 12
       */
      id?: number;
      /**
       * @description The unique numeric ID of the product to which the option belongs.
       *
       * @example 77
       */
      product_id?: number;
      /**
       * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
       *
       * @example Add-a-$5-Donation1535039590-191
       */
      name?: string;
      option_values?: components["schemas"]["productModifierOptionValue_Full"][];
    };
    /**
     * productModifierOptionValue_Base
     * @description Common Product Modifer `option_value` properties.
     */
    productModifierOptionValue_Base: {
      /**
       * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
       *
       * @example false
       */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /**
       * @description The order in which the value will be displayed on the product page. Required in a /POST.
       *
       * @example 0
       */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
      value_data?: Record<string, unknown> | null;
      adjusters?: components["schemas"]["adjusters_Full"];
    };
    /**
     * productModifierOptionValue_Full
     * @description Product Modifer `option_value`.
     */
    productModifierOptionValue_Full: components["schemas"]["productModifierOptionValue_Base"] & {
      /** @description The unique numeric ID of the value; increments sequentially. */
      id?: number;
      option_id?: number;
    };
    /**
     * productOption_Base
     * @description Common Option properties.
     */
    productOption_Base: {
      /**
       * @description The unique numerical ID of the option, increments sequentially.
       *
       * @example 55
       */
      id?: number | null;
      /**
       * @description The unique numerical ID of the product to which the option belongs.
       *
       * @example 4
       */
      product_id?: number;
      /**
       * @description The name of the option shown on the storefront.
       *
       * @example Add-a-$5-Donation1535042499-187
       */
      display_name?: string;
      /**
       * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
       *
       * @enum {string}
       */
      type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
      config?: components["schemas"]["productOptionConfig_Full"];
      /**
       * @description Order in which the option is displayed on the storefront.
       * @example 1
       */
      sort_order?: number;
      option_values?: components["schemas"]["productOptionOptionValue_Full"][];
    };
    /**
     * productVariant_Base
     * @description Common Variant properties.
     */
    productVariant_Base: {
      /**
       * Format: double
       * @description The cost price of the variant. Not affected by Price List prices.
       */
      cost_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
       */
      price?: number | null;
      /**
       * Format: double
       * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
       */
      sale_price?: number | null;
      /**
       * Format: double
       * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
       */
      retail_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
       */
      weight?: number | null;
      /**
       * Format: double
       * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
       */
      width?: number | null;
      /**
       * Format: double
       * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
       */
      height?: number | null;
      /**
       * Format: double
       * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
       */
      depth?: number | null;
      /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
      is_free_shipping?: boolean;
      /**
       * Format: double
       * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number | null;
      /** @description If `true`, this variant will not be purchasable on the storefront. */
      purchasing_disabled?: boolean;
      /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
      purchasing_disabled_message?: string;
      /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string | null;
      /**
       * @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
       *
       * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
       *
       * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
       *
       * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
       */
      inventory_level?: number | null;
      /** @description When the variant hits this inventory level, it is considered low stock. */
      inventory_warning_level?: number | null;
      /** @description Identifies where in a warehouse the variant is located. */
      bin_picking_number?: string | null;
      /** @description The Manufacturer Part Number (MPN) for the variant. */
      mpn?: string;
      /** @example 012345678905 */
      gtin?: string;
    };
    /** productVariant_Full */
    productVariant_Full: WithRequired<components["schemas"]["productVariant_Base"] & {
      product_id?: number;
      sku?: string;
      /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant. */
      option_values?: components["schemas"]["productVariantOptionValue_Full"][];
      /**
       * Format: double
       * @description The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
       */
      calculated_price?: number;
      calculated_weight?: number;
    }, "sku">;
    /**
     * productVariant_Put_Product
     * @description The model for a PUT to update variants on a product.
     */
    productVariant_Put_Product: {
      /**
       * Format: double
       * @description The cost price of the variant. Not affected by Price List prices.
       */
      cost_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
       */
      price?: number | null;
      /**
       * Format: double
       * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
       */
      sale_price?: number | null;
      /**
       * Format: double
       * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
       */
      retail_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
       */
      weight?: number | null;
      /**
       * Format: double
       * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.
       */
      width?: number | null;
      /**
       * Format: double
       * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.
       */
      height?: number | null;
      /**
       * Format: double
       * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.
       */
      depth?: number | null;
      /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
      is_free_shipping?: boolean;
      /**
       * Format: double
       * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number | null;
      /** @description If `true`, this variant will not be purchasable on the storefront. */
      purchasing_disabled?: boolean;
      /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
      purchasing_disabled_message?: string;
      /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string | null;
      /**
       * @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
       *
       * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
       *
       * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
       *
       * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
       */
      inventory_level?: number | null;
      /** @description When the variant hits this inventory level, it is considered low stock. */
      inventory_warning_level?: number | null;
      /** @description Identifies where in a warehouse the variant is located. */
      bin_picking_number?: string | null;
      /** @description Product ID */
      product_id: number;
      /** @description Variant ID */
      id: number;
      sku?: string;
    };
    /** productVariantOptionValue_Full */
    productVariantOptionValue_Full: WithRequired<{
      /**
       * @description The name of the option.
       *
       * @example Color
       */
      option_display_name?: string;
      /**
       * @description The label of the option value.
       *
       * @example Beige
       */
      label?: string;
    }, "option_display_name" | "label">;
    /**
     * productVariantOptionValue_Base
     * @description Common Product Variant Option properties.
     */
    productVariantOptionValue_Base: {
      /**
       * @description `option_value` ID.
       * @example 146
       */
      id?: number;
      /**
       * @description `option` ID.
       * @example 151
       */
      option_id?: number;
    };
    /**
     * productOptionOptionValue_Base
     * @description Common Product Option `option_value` properties.
     */
    productOptionOptionValue_Base: {
      /**
       * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
       *
       * @example false
       */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /**
       * @description The order in which the value will be displayed on the product page. Required in a /POST.
       *
       * @example 0
       */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
      value_data?: Record<string, unknown> | null;
    };
    /**
     * productOptionOptionValue_Full
     * @description Product Option `option_value`.
     */
    productOptionOptionValue_Full: components["schemas"]["productOptionOptionValue_Base"] & {
      /** @description The unique numeric ID of the value; increments sequentially. */
      id?: number;
    };
    /**
     * productImage_Base
     * @description Common ProductImage properties.
     */
    productImage_Base: {
      /**
       * @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
       *
       * Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file.
       */
      image_file?: string;
      /** @description Flag for identifying whether the image is used as the product's thumbnail. */
      is_thumbnail?: boolean;
      /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
      sort_order?: number;
      /** @description The description for the image. */
      description?: string;
      /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
      image_url?: string;
    };
    /**
     * productImage_Put
     * @description The model for a PUT to update applicable Product Image fields.
     */
    productImage_Put: {
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
      url_zoom?: string;
      /** @description The standard URL for this image. By default, this is used for product-page images. */
      url_standard?: string;
      /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
      url_thumbnail?: string;
      /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
      url_tiny?: string;
    } & components["schemas"]["productImage_Base"];
    /**
     * productVideo_Base
     * @description The model for a POST to create a video on a product.
     */
    productVideo_Base: {
      /**
       * @description The title for the video. If left blank, this will be filled in according to data on a host site.
       *
       * @example Writing Great Documentation
       */
      title?: string;
      /**
       * @description The description for the video. If left blank, this will be filled in according to data on a host site.
       *
       * @example A video about documenation
       */
      description?: string;
      /**
       * @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered.
       *
       * @example 1
       */
      sort_order?: number;
      /**
       * @description The video type (a short name of a host site).
       *
       * @enum {string}
       */
      type?: "youtube";
      /**
       * @description The ID of the video on a host site.
       * @example z3fRu9pkuXE
       */
      video_id?: string;
    };
    /**
     * productVideo_Full
     * @description A product video model.
     */
    productVideo_Full: components["schemas"]["productVideo_Base"] & {
      /** @description The unique numeric ID of the product video; increments sequentially. */
      id?: number;
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description Length of the video. This will be filled in according to data on a host site. */
      length?: string;
    };
    /**
     * product_Put
     * @description The model for a PUT to update a product.
     */
    product_Put: components["schemas"]["product_Base"] & {
      variants?: components["schemas"]["productVariant_Put_Product"][];
    };
    /**
     * metafield_Base
     * @description Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    metafield_Base: {
      /**
       * @description The name of the field, for example: `location_id`, `color`. Required for POST.
       *
       * @example Location
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`. Required for POST.
       *
       * @example 4HG
       */
      value: string;
      /**
       * @description Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
       *
       * @example Warehouse Locations
       */
      namespace: string;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description
       * |-|-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Description for the metafields.
       *
       * @example Location in the warehouse
       */
      description?: string;
    };
    /**
     * complexRule_Base
     * @description Common ComplexRule properties.
     */
    complexRule_Base: {
      /**
       * @description The unique numeric ID of the rule; increments sequentially.
       * Read-Only
       * @example 5
       */
      id?: number;
      /**
       * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
       *
       * @example 67
       */
      product_id?: number | null;
      /**
       * @description The priority to give this rule when making adjustments to the product properties.
       *
       * @example 0
       */
      sort_order?: number;
      /**
       * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
       *
       * @example true
       */
      enabled?: boolean;
      /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
      stop?: boolean;
      /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
      purchasing_disabled?: boolean;
      /**
       * @description Message displayed on the storefront when a rule disables the purchasing of a product.
       *
       * @example This product is not available at this time.
       */
      purchasing_disabled_message?: string;
      /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
      purchasing_hidden?: boolean;
      /**
       * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
       *
       * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
       */
      image_url?: string;
      price_adjuster?: components["schemas"]["adjuster_Full"];
      weight_adjuster?: components["schemas"]["adjuster_Full"];
      conditions?: components["schemas"]["complexRuleConditionBase"][];
    };
    /**
     * productCustomField_Base
     * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
     */
    productCustomField_Base: {
      /**
       * @description The unique numeric ID of the custom field; increments sequentially.
       * Read-Only
       * @example 6
       */
      id?: number;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example ISBN
       */
      name: string;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example 1234567890123
       */
      value: string;
    };
    /**
     * productCustomField_Put
     * @description The model for a PUT to update a custom field on a product.
     */
    productCustomField_Put: {
      /**
       * @description The unique numeric ID of the custom field; increments sequentially. Required to update existing custom field in /PUT request.
       * Read-Only
       * @example 6
       */
      id?: number;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example ISBN
       */
      name: string;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example 1234567890123
       */
      value: string;
    };
    /**
     * complexRuleConditionBase
     * @description Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`’s, or else reference a `modifier_value_id` and a `variant_id`.
     */
    complexRuleConditionBase: {
      /**
       * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
       *
       * @example 3
       */
      id?: number | null;
      /**
       * @description The unique numeric ID of the rule with which the condition is associated.
       * Read-Only
       * @example 4
       */
      rule_id?: number | null;
      /**
       * @description The unique numeric ID of the modifier with which the rule condition is associated.
       * Required in /POST.
       * @example 55
       */
      modifier_id: number | null;
      /**
       * @description The unique numeric ID of the modifier value with which the rule condition is associated.
       * Required in /POST.
       * @example 256
       */
      modifier_value_id: number | null;
      /**
       * @description The unique numeric ID of the variant with which the rule condition is associated.
       * Required in /POST.
       * @example 1
       */
      variant_id: number | null;
      /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
      combination_id?: number;
    };
    /**
     * customUrl_Full
     * @description The custom URL for the product on the storefront.
     */
    customUrl_Full: {
      /** @description Product URL on the storefront. */
      url?: string;
      /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
      is_customized?: boolean;
    };
    /**
     * bulkPricingRule_Full
     * @description Common Bulk Pricing Rule properties
     */
    bulkPricingRule_Full: {
      /**
       * @description The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero. For `fixed` rules, the minimum quantity canʼt be less than two.
       * Required in /POST.
       *
       * @example 10
       */
      quantity_min: number;
      /**
       * @description The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
       * Required in /POST.
       * @example 50
       */
      quantity_max: number;
      /**
       * @description The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
       * Required in /POST.
       * @example price
       * @enum {string}
       */
      type: "price" | "percent" | "fixed";
      /**
       * @description You can express the adjustment type as either a fixed dollar amount or a percentage. Send a number; the response will return a number for `price` and `fixed` adjustments.
       * Divide the adjustment percentage by 100 and send the result in string format. For example, represent 10% as “.10”. The response will return a float value for both `price` and `percentage` adjustments.
       * Required in /POST.
       */
      amount: number | string;
    };
    /**
     * productOptionConfig_Full
     * @description The values for option config can vary based on the Modifier created.
     */
    productOptionConfig_Full: {
      /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      default_value?: string;
      /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
      checked_by_default?: boolean;
      /** @description (checkbox) Label displayed for the checkbox option. */
      checkbox_label?: string;
      /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
      date_limited?: boolean;
      /**
       * @description (date) The type of limit that is allowed to be entered on a date option.
       *
       * @example range
       * @enum {string}
       */
      date_limit_mode?: "earliest" | "range" | "latest";
      /**
       * Format: date
       * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_earliest_value?: string;
      /**
       * Format: date
       * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_latest_value?: string;
      /**
       * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
       *
       * @example specific
       * @enum {string}
       */
      file_types_mode?: "specific" | "all";
      /**
       * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      file_types_supported?: string[];
      /** @description (file) A list of other file types allowed with the file upload option. */
      file_types_other?: string[];
      /**
       * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
       *
       * @example 5
       */
      file_max_size?: number;
      /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      text_characters_limited?: boolean;
      /**
       * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
       *
       * @example 1
       */
      text_min_length?: number;
      /**
       * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
       *
       * @example 55
       */
      text_max_length?: number;
      /**
       * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
       *
       * @example true
       */
      text_lines_limited?: boolean;
      /**
       * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
       *
       * @example 4
       */
      text_max_lines?: number;
      /**
       * @description (numbers_only_text) Flag to limit the value of a number option.
       *
       * @example true
       */
      number_limited?: boolean;
      /**
       * @description (numbers_only_text) The type of limit on values entered for a number option.
       *
       * @example lowest
       * @enum {string}
       */
      number_limit_mode?: "lowest" | "highest" | "range";
      /**
       * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
       *
       * @example 100
       */
      number_lowest_value?: number;
      /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      number_highest_value?: number;
      /**
       * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
       *
       * @example false
       */
      number_integers_only?: boolean;
      /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      product_list_adjusts_inventory?: boolean;
      /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
      product_list_adjusts_pricing?: boolean;
      /**
       * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
       *
       * @example weight
       * @enum {string}
       */
      product_list_shipping_calc?: "none" | "weight" | "package";
    };
    /**
     * adjuster_Full
     * @description Adjuster for Complex Rules.
     */
    adjuster_Full: {
      /**
       * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
       *
       * @enum {string|null}
       */
      adjuster?: "relative" | "percentage" | null;
      /**
       * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
       *
       * @example 5
       */
      adjuster_value?: number;
    };
    /**
     * metaCollection_Full
     * @description Data about the response, including pagination and collection totals.
     */
    metaCollection_Full: {
      pagination?: components["schemas"]["pagination_Full"];
    };
    /**
     * pagination_Full
     * @description Data about the response, including pagination and collection totals.
     */
    pagination_Full: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    metaEmpty_Full: {
      [key: string]: unknown;
    };
    /**
     * error_Base
     * @description Error payload for the BigCommerce API.
     */
    error_Base: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /** errorMultiStatus */
    errorMultiStatus: {
      /** @description The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) of the failure or partial success. */
      status?: number;
      /** @description A summary of the failure or partial success. */
      title?: string;
      /** @description A BigCommerce-defined error signifier. */
      type?: string;
      errors?: components["schemas"]["DetailedErrors"];
    };
    /**
     * DetailedErrors
     * @description Each key-value pair describes a failure or partial success case.
     */
    DetailedErrors: {
      [key: string]: unknown;
    };
    /** product_Full */
    product_Full: {
      /** @description ID of the product. Read-Only. */
      id?: number;
    } & components["schemas"]["product_Base"] & {
      /**
       * Format: date-time
       * @description The date on which the product was created.
       *
       * @example 2018-08-15T14:49:05+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description The date on which the product was modified.
       *
       * @example 2018-08-24T14:41:00+00:00
       */
      date_modified?: string;
      /** @description The unique identifier of the base variant associated with a simple product. This value is `null` for complex products. */
      base_variant_id?: number;
      /**
       * Format: float
       * @description The calculated_price is derived from the default price and sale price of the product. It is equal to the sale price if set or the default price if there is not a sale price present. Depending on your store settings and customer group, or channel-specific pricing, this value may or may not be equal to the price seen on the storefront.
       */
      calculated_price?: number;
      options?: components["schemas"]["productOption_Base"][];
      modifiers?: components["schemas"]["productModifier_Full"][];
      /** @description Minimum Advertised Price. */
      map_price?: number;
      /** @description Indicates that the product is in an Option Set (legacy V2 concept). */
      option_set_id?: number;
      /** @description Legacy template setting which controls if the option set shows up to the side of or below the product image and description. */
      option_set_display?: string;
      variants?: components["schemas"]["productVariant_Full"][];
    };
    /**
     * productImage_Full
     * @description Common ProductImage properties.
     */
    productImage_Full: components["schemas"]["productImage_Base"] & {
      /** @description The unique numeric ID of the image; increments sequentially. */
      id?: number;
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
      url_zoom?: string;
      /** @description The standard URL for this image. By default, this is used for product-page images. */
      url_standard?: string;
      /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
      url_thumbnail?: string;
      /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
      url_tiny?: string;
      /**
       * Format: date-time
       * @description The date on which the product image was modified.
       */
      date_modified?: string;
    };
    /**
     * product_Put_Collection
     * @description The model for batch updating products.
     */
    product_Put_Collection: ({
        /** @description Unique ID of the *Product*. Read-Only. */
        id: number;
      } & components["schemas"]["product_Base"])[];
    /**
     * config_Full
     * @description The values for option config can vary based on the Modifier created.
     */
    config_Full: {
      /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      default_value?: string;
      /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
      checked_by_default?: boolean;
      /** @description (checkbox) Label displayed for the checkbox option. */
      checkbox_label?: string;
      /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
      date_limited?: boolean;
      /**
       * @description (date) The type of limit that is allowed to be entered on a date option.
       *
       * @example range
       * @enum {string}
       */
      date_limit_mode?: "earliest" | "range" | "latest";
      /**
       * Format: date
       * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_earliest_value?: string;
      /**
       * Format: date
       * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_latest_value?: string;
      /**
       * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
       *
       * @example specific
       * @enum {string}
       */
      file_types_mode?: "specific" | "all";
      /**
       * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      file_types_supported?: string[];
      /** @description (file) A list of other file types allowed with the file upload option. */
      file_types_other?: string[];
      /**
       * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
       *
       * @example 5
       */
      file_max_size?: number;
      /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      text_characters_limited?: boolean;
      /**
       * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
       *
       * @example 1
       */
      text_min_length?: number;
      /**
       * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
       *
       * @example 55
       */
      text_max_length?: number;
      /**
       * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
       *
       * @example true
       */
      text_lines_limited?: boolean;
      /**
       * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
       *
       * @example 4
       */
      text_max_lines?: number;
      /**
       * @description (numbers_only_text) Flag to limit the value of a number option.
       *
       * @example true
       */
      number_limited?: boolean;
      /**
       * @description (numbers_only_text) The type of limit on values entered for a number option.
       *
       * @example lowest
       * @enum {string}
       */
      number_limit_mode?: "lowest" | "highest" | "range";
      /**
       * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
       *
       * @example 100
       */
      number_lowest_value?: number;
      /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      number_highest_value?: number;
      /**
       * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
       *
       * @example false
       */
      number_integers_only?: boolean;
      /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      product_list_adjusts_inventory?: boolean;
      /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
      product_list_adjusts_pricing?: boolean;
      /**
       * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
       *
       * @example weight
       * @enum {string}
       */
      product_list_shipping_calc?: "none" | "weight" | "package";
    };
    /** adjusters_Full */
    adjusters_Full: {
      price?: components["schemas"]["adjuster_Full"];
      weight?: components["schemas"]["adjuster_Full"];
      /**
       * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
       *
       * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
       */
      image_url?: string;
      purchasing_disabled?: {
        /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
        status?: boolean;
        /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
        message?: string;
      };
    };
    /**
     * product_Base
     * @description Shared `Product` properties used in:
     * * `POST`
     * * `PUT`
     * * `GET`
     */
    product_Base: {
      /**
       * @description A unique product name.
       *
       * @example Smith Journal 13
       */
      name: string;
      /**
       * @description The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
       *
       * @example physical
       * @enum {string}
       */
      type: "physical" | "digital";
      /**
       * @description A unique user-defined alphanumeric product code/stock keeping unit (SKU).
       *
       * @example SM-13
       */
      sku?: string;
      /**
       * @description The product description, which can include HTML formatting.
       *
       * @example <p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>
       */
      description?: string;
      /**
       * Format: float
       * @description Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store
       */
      weight: number;
      /**
       * Format: float
       * @description Width of the product, which can be used when calculating shipping costs.
       */
      width?: number;
      /**
       * Format: float
       * @description Depth of the product, which can be used when calculating shipping costs.
       */
      depth?: number;
      /**
       * Format: float
       * @description Height of the product, which can be used when calculating shipping costs.
       */
      height?: number;
      /**
       * Format: float
       * @description The price of the product. The price should include or exclude tax, based on the store settings.
       */
      price: number;
      /**
       * Format: float
       * @description The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
       */
      cost_price?: number;
      /**
       * Format: float
       * @description The retail cost of the product. If entered, the retail cost price will be shown on the product page.
       */
      retail_price?: number;
      /**
       * Format: float
       * @description If entered, the sale price will be used instead of value in the price field when calculating the product's cost.
       */
      sale_price?: number;
      /** @description Minimum Advertised Price */
      map_price?: number;
      /** @description The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.) */
      tax_class_id?: number;
      /** @description Tax Codes, such as AvaTax System Tax Codes, identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to a tax provider integration, such as BigCommerce's Avalara Premium, can calculate sales taxes more accurately. Stores without a tax provider will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see the tax provider's documentation. */
      product_tax_code?: string;
      /** @description An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values. */
      categories?: number[];
      /** @description You can add a product to an existing brand during a product /PUT or /POST. Use either the `brand_id` or the `brand_name` field. The response body can include `brand_id`. */
      brand_id?: number;
      /**
       * @description You can create the brand during a product PUT or POST request. If the brand already exists, the product /PUT or /POST request adds the product to the brand. If not, the product /PUT or /POST request creates the brand and then adds the product to the brand. Brand name is not case-sensitive; "Common Good" and "Common good" are the same. Use either the `brand_id` or the `brand_name` field. The response body does not include `brand_name`.
       * @example Common Good
       */
      brand_name?: string;
      /**
       * @description Current inventory level of the product. You must track inventory by _product_ for this to take effect (see the `inventory_tracking` field). The Catalog API returns the inventory for only the default location.
       *
       * The inventory for a product cannot exceed 2,147,483,647 in the catalog. If you exceed the limit, the store sets the inventory level to the limit.
       *
       * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
       */
      inventory_level?: number;
      /** @description Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect. */
      inventory_warning_level?: number;
      /**
       * @description The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
       *
       * @enum {string}
       */
      inventory_tracking?: "none" | "product" | "variant";
      /**
       * Format: float
       * @description A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number;
      /** @description Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero. */
      is_free_shipping?: boolean;
      /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view. */
      is_visible?: boolean;
      /** @description Flag to determine whether the product should be included in the `featured products` panel when viewing the store. */
      is_featured?: boolean;
      /** @description An array of IDs for the related products. */
      related_products?: number[];
      /** @description Warranty information displayed on the product page. Can include HTML formatting. */
      warranty?: string;
      /** @description The BIN picking number for the product. */
      bin_picking_number?: string;
      /** @description The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations). */
      layout_file?: string;
      /** @description The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string;
      /** @description A comma-separated list of keywords that can be used to locate the product when searching the store. */
      search_keywords?: string;
      /** @description Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.' */
      availability_description?: string;
      /**
       * @description Availability of the product. (Corresponds to the product's [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
       *
       * @enum {string}
       */
      availability?: "available" | "disabled" | "preorder";
      /**
       * @description Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
       *
       * @enum {string}
       */
      gift_wrapping_options_type?: "any" | "none" | "list";
      /** @description A list of gift-wrapping option IDs. */
      gift_wrapping_options_list?: number[];
      /** @description Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results. */
      sort_order?: number;
      /**
       * @description The product condition. Will be shown on the product page if the `is_condition_shown` field's value is `true`. Possible values: `New`, `Used`, `Refurbished`.
       *
       * @enum {string}
       */
      condition?: "New" | "Used" | "Refurbished";
      /** @description Flag used to determine whether the product condition is shown to the customer on the product page. */
      is_condition_shown?: boolean;
      /** @description The minimum quantity an order must contain, to be eligible to purchase this product. */
      order_quantity_minimum?: number;
      /** @description The maximum quantity an order can contain when purchasing the product. */
      order_quantity_maximum?: number;
      /** @description Custom title for the product page. If not defined, the product name will be used as the meta title. */
      page_title?: string;
      /** @description Custom meta keywords for the product page. If not defined, the store's default keywords will be used. */
      meta_keywords?: string[];
      /** @description Custom meta description for the product page. If not defined, the store's default meta description will be used. */
      meta_description?: string;
      /** @description The number of times the product has been viewed. */
      view_count?: number;
      /**
       * Format: date-time
       * @description Pre-order release date. See the `availability` field for details on setting a product's availability to accept pre-orders.
       */
      preorder_release_date?: string | null;
      /** @description Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date. */
      preorder_message?: string;
      /**
       * @description If set to true then on the preorder release date the preorder status will automatically be removed.
       * If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
       * control panel or using the API. Using the API set `availability` to `available`.
       */
      is_preorder_only?: boolean;
      /** @description False by default, indicating that this product's price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.) */
      is_price_hidden?: boolean;
      /** @description By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.) */
      price_hidden_label?: string;
      custom_url?: components["schemas"]["customUrl_Full"];
      /**
       * @description Type of product, defaults to `product`.
       *
       * @enum {string}
       */
      open_graph_type?: "product" | "album" | "book" | "drink" | "food" | "game" | "movie" | "song" | "tv_show";
      /** @description Title of the product, if not specified the product name will be used instead. */
      open_graph_title?: string;
      /** @description Description to use for the product, if not specified then the meta_description will be used instead. */
      open_graph_description?: string;
      /** @description Flag to determine if product description or open graph description is used. */
      open_graph_use_meta_description?: boolean;
      /** @description Flag to determine if product name or open graph name is used. */
      open_graph_use_product_name?: boolean;
      /** @description Flag to determine if product image or open graph image is used. */
      open_graph_use_image?: boolean;
      /** @description Global Trade Item Number */
      gtin?: string;
      /** @description Manufacturer Part Number */
      mpn?: string;
      /**
       * @description The total (cumulative) rating for the product.
       *
       * @example 3
       */
      reviews_rating_sum?: number;
      /**
       * @description The number of times the product has been rated.
       *
       * @example 4
       */
      reviews_count?: number;
      /**
       * @description The total quantity of this product sold.
       *
       * @example 80
       */
      total_sold?: number;
      /** @description 200 maximum custom fields per product. 255 maximum characters per custom field. */
      custom_fields?: components["schemas"]["productCustomField_Put"][];
      bulk_pricing_rules?: ({
          /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
          id: number;
        } & components["schemas"]["bulkPricingRule_Full"])[];
      images?: components["schemas"]["productImage_Full"][];
      videos?: components["schemas"]["productVideo_Full"][];
      variants?: components["schemas"]["productVariant_Full"][];
    };
    /** metafield_Full */
    metafield_Full: {
      /**
       * @description Unique ID of the *Metafield*. Read-Only.
       * @example 6
       */
      id?: number;
    } & components["schemas"]["metafield_Base"] & ({
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example product
       * @enum {string}
       */
      resource_type?: "category" | "brand" | "product" | "variant";
      /**
       * @description The ID of the resource with which the metafield is associated.
       *
       * @example 111
       */
      resource_id?: number;
      /**
       * Format: date-time
       * @description Date and time of the metafield's creation. Read-Only.
       *
       * @example 2018-05-07T20:14:17+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated. Read-Only.
       *
       * @example 2018-05-07T20:14:17+00:00
       */
      date_modified?: string;
    });
    /** errorResponse_409 */
    errorResponse_409: {
      code?: number;
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    } & {
      errors?: components["schemas"]["DetailedErrors"];
    };
    /** errorResponse_422 */
    errorResponse_422: {
      code?: number;
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    } & {
      errors?: components["schemas"]["DetailedErrors"];
    };
    MetaPaginationObject: {
      pagination?: {
        /** @example 246 */
        total?: number;
        /** @example 5 */
        count?: number;
        /** @example 5 */
        per_page?: number;
        /** @example 1 */
        current_page?: number;
        /** @example 50 */
        total_pages?: number;
        links?: {
          /** @example ?limit=5&page=2 */
          next?: string;
          /** @example ?limit=5&page=1 */
          current?: string;
        };
      };
    };
    /** @description Error payload for the BigCommerce API. */
    BaseError: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    ProductChannelAssignment: {
      product_id?: number;
      channel_id?: number;
    };
    ProductCategoryAssignment: {
      product_id?: number;
      category_id?: number;
    };
    beta5DetailedErrors: {
      [key: string]: unknown;
    };
    beta5ErrorResponse: components["schemas"]["BaseError"] & {
      errors?: components["schemas"]["beta5DetailedErrors"];
    };
  };
  responses: never;
  parameters: {
    /** @description The ID of the `Product` to which the resource belongs. */
    ProductIdParam: number;
    /** @description The ID of the `review` that is being operated on. */
    ReviewIdParam: number;
    /** @description The ID of the `Image` that is being operated on. */
    ImageIdParam: number;
    /** @description The ID of the `Metafield`. */
    MetafieldIdParam: number;
    /** @description The BigCommerce ID of the `Video` */
    VideoIdParam: number;
    /** @description The ID of the `ComplexRule`. */
    ComplexRuleIdParam: number;
    /** @description The ID of the `CustomField`. */
    CustomFieldIdParam: number;
    /** @description The ID of the `BulkPricingRule`. */
    BulkPricingRuleIdParam: number;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Products
   * @description Returns a list of **Products**. Optional filter parameters can be passed in.
   */
  getProducts: {
    parameters: {
      query?: {
        /** @description Filter items by ID. */
        id?: number;
        "id:in"?: number[];
        "id:not_in"?: number[];
        "id:min"?: number[];
        "id:max"?: number[];
        "id:greater"?: number[];
        "id:less"?: number[];
        /** @description Filter items by name. */
        name?: string;
        /** @description Filter items by UPC. */
        upc?: string;
        /** @description Filter items by price. */
        price?: number;
        /** @description Filter items by weight. */
        weight?: number;
        /** @description Filter items by condition. */
        condition?: "new" | "used" | "refurbished";
        /** @description Filter items by brand_id. */
        brand_id?: number;
        /** @description Filter items by `date_modified`. */
        date_modified?: string;
        /** @description Filter items by `date_modified`. For example, `date_modified:max=2020-06-15`. */
        "date_modified:max"?: string;
        /** @description Filter items by `date_modified`. For example, `date_modified:min=2018-06-15`. */
        "date_modified:min"?: string;
        /** @description Filter items by date_last_imported. */
        date_last_imported?: string;
        /** @description Filter items by date_last_imported. For example, `date_last_imported:max=2020-06-15`. */
        "date_last_imported:max"?: string;
        /** @description Filter items by date_last_imported. For example, `date_last_imported:min=2018-06-15`. */
        "date_last_imported:min"?: string;
        /** @description Filter items based on whether the product is currently visible on the storefront. */
        is_visible?: boolean;
        /** @description Filter items by is_featured. `1` for true, `0` for false. */
        is_featured?: 1 | 0;
        /** @description Filter items by is_free_shipping. `1` for true, `0` for false. */
        is_free_shipping?: number;
        /** @description Filter items by inventory_level. */
        inventory_level?: number;
        "inventory_level:in"?: number;
        "inventory_level:not_in"?: number;
        "inventory_level:min"?: number;
        "inventory_level:max"?: number;
        "inventory_level:greater"?: number;
        "inventory_level:less"?: number;
        /** @description Filter items by inventory_low. Values: 1, 0. */
        inventory_low?: number;
        /** @description Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. */
        out_of_stock?: number;
        /** @description Filter items by total_sold. */
        total_sold?: number;
        /** @description Filter items by type. */
        type?: "digital" | "physical";
        /**
         * @description Filter items by categories.
         *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
         */
        categories?: number;
        /** @description Filter items by keywords found in the `name` or `sku` fields */
        keyword?: string;
        /** @description Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results. */
        keyword_context?: "shopper" | "merchant";
        /** @description Filter items by status. */
        status?: number;
        /**
         * @description Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page.
         *
         * **Note:** The following sub-resources include:
         *   * variants
         *   * images
         *   * custom_fields
         *   * bulk_pricing_rules
         *   * primary_images
         *   * modifiers
         *   * options
         *   * videos
         */
        include?: "variants" | "images" | "custom_fields" | "bulk_pricing_rules" | "primary_image" | "modifiers" | "options" | "videos";
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** @description Filter items by availability. Values are: available, disabled, preorder. */
        availability?: "available" | "disabled" | "preorder";
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. The default product limit is 50 with a maximum limit of 250. */
        limit?: number;
        /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
        direction?: "asc" | "desc";
        /** @description Field name to sort by. Note: Since `id` increments when new products are added, you can use that field to sort by product create date. */
        sort?: "id" | "name" | "sku" | "price" | "date_modified" | "date_last_imported" | "inventory_level" | "is_visible" | "total_sold";
        /** @description Filter items by categories. Use for products in multiple categories. For example, `categories:in=12`. */
        "categories:in"?: number;
        /** @description Filter items by main SKU. To filter by variant SKU, see [Get All Variants](/docs/rest-catalog/product-variants#get-all-product-variants). */
        sku?: string;
        /** @description Filter items by SKU. */
        "sku:in"?: string[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Update Products (Batch)
   * @description Updates products in batches. Batches are limited to 10 products.
   *
   * **Required Fields**
   * * `id` - product `id` is required for batch updates to products.
   *
   * **Read-Only Fields**
   * - `id`
   * - `date_created`
   * - `date_modified`
   * - `calculated_price`
   * - `base_variant_id`
   */
  updateProducts: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["product_Put_Collection"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /**
       * @description Multi-status. The product information was updated successfully, but the inventory data failed to update.
       *
       * Verify that the inventory-related updates are well-formed and correct; for example, that they donʼt result in negative stock levels. Then consider updating the inventory data again.
       */
      207: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"][];
            errors?: components["schemas"]["errorMultiStatus"];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description `Product` was in conflict with another product. This is the result of duplicate unique values such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
      409: {
        content: {
          "application/json": components["schemas"]["errorResponse_409"];
        };
      };
      /** @description 413 Request Entity Too Large */
      413: {
        content: {
          "application/json": components["schemas"]["error_Base"];
        };
      };
      /** @description `Product` was not valid. This is the result of missing required fields or invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["errorResponse_422"];
        };
      };
    };
  };
  /**
   * Create a Product
   * @description Creates a *Product*. Only one product can be created at a time.
   *
   * **Required Fields:**
   * - `name`
   * - `type`
   * - `weight`
   * - `price`
   *
   * **Read-Only Fields**
   * - `id`
   * - `date_created`
   * - `date_modified`
   * - `calculated_price`
   * - `base_variant_id`
   *
   * **Limits**
   * - 250 characters product name length.
   * - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
   *
   * **Usage Notes**
   * * This endpoint accepts a `video` array. To create a product video that accepts a `video` object, see [Create a Product Video](/docs/rest-catalog/products/videos#create-a-product-video) for information.
   */
  createProduct: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["product_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
          "example-1": unknown;
        };
      };
      /**
       * @description Multi-status. The product information was updated successfully, but the inventory data failed to update.
       *
       * Verify that the inventory-related updates are well-formed and correct; for example, that they donʼt result in negative stock levels. Then consider updating the inventory data again.
       */
      207: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"][];
            errors?: components["schemas"]["errorMultiStatus"];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description `Product` was in conflict with another product. This is the result of duplicate unique values, such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete Products
   * @description To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
   *
   * > #### Note
   * > The maximum number of products you can delete at one time is 250.
   *
   * **Example**:
   * To delete products with the id's of 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
   */
  deleteProducts: {
    parameters: {
      query?: {
        /** @description Filter items by name. */
        name?: string;
        /** @description Filter items by SKU. */
        sku?: string;
        /** @description Filter items by price. */
        price?: number;
        /** @description Filter items by weight. */
        weight?: number;
        /** @description Filter items by condition. */
        condition?: "new" | "used" | "refurbished";
        /** @description Filter items by brand_id. */
        brand_id?: number;
        /** @description Filter items by date_modified. For example `v3/catalog/products?date_modified:min=2018-06-15` */
        date_modified?: string;
        /** @description Filter items by date_last_imported. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        date_last_imported?: string;
        /** @description Filter items by if visible on the storefront. */
        is_visible?: boolean;
        /** @description Filter items by is_featured. */
        is_featured?: number;
        /** @description Filter by product ID(s). */
        "id:in"?: number[];
        /** @description Filter items by inventory_level. */
        inventory_level?: number;
        /** @description Filter items by total_sold. */
        total_sold?: number;
        /** @description Filter items by type: `physical` or `digital`. */
        type?: "digital" | "physical";
        /**
         * @description Filter items by categories.
         *  If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
         */
        categories?: number;
        /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
        keyword?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get a Product
   * @description Returns a single *Product*. Optional parameters can be passed in.
   */
  getProductById: {
    parameters: {
      query?: {
        /** @description Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. */
        include?: "variants" | "images" | "custom_fields" | "bulk_pricing_rules" | "primary_image" | "modifiers" | "options" | "videos";
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product
   * @description Updates a *Product*.
   *
   * **Limits**
   * - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
   *
   * **Read-Only Fields**
   * - id
   * - date_created
   * - date_modified
   * - calculated_price
   * - base_variant_id
   */
  updateProduct: {
    parameters: {
      query?: {
        /** @description Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. The ID and the specified fields will be returned. */
        include_fields?: "variants" | "images" | "custom_fields" | "bulk_pricing_rules" | "primary_image" | "modifiers" | "options" | "videos";
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["product_Put"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
          "example-1": unknown;
        };
      };
      /** @description Created */
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /**
       * @description Multi-status. The product information was updated successfully, but the inventory data failed to update.
       *
       * Verify that the inventory-related updates are well-formed and correct; for example, that they donʼt result in negative stock levels. Then consider updating the inventory data again.
       */
      207: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"];
            errors?: components["schemas"]["errorMultiStatus"];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description `Product` was in conflict with another product. This is caused by: duplicate unique values, such as name or SKU; a missing category, brand, or tax_class with which the product is being associated; or a conflicting bulk pricing rule. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product
   * @description Deletes a *Product*.
   */
  deleteProductById: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get All Product Images
   * @description Returns a list of *Product Images*. Optional parameters can be passed in.
   */
  getProductImages: {
    parameters: {
      query?: {
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productImage_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description There are not any images on this product. */
      204: {
        content: {
        };
      };
      /** @description The product ID does not exist. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Product Image
   * @description Creates a *Product Image*.
   *
   *  **Required Fields**
   * - `image_file`, or
   * - `image_url`
   *
   * **Usage Notes**
   * - `image_url` - `255` character limit
   * - For file uploads, use the `multipart/form-data` media type.
   * - You can create only one image at a time. A product can have up to 1000 images.
   * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
   * - Each image file or image uploaded by URL can be up to 8 MB.
   */
  createProductImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The unique numeric identifier for the product with which the image is associated. */
          product_id?: number;
          /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
          url_zoom?: string;
          /** @description The standard URL for this image. By default, this is used for product-page images. */
          url_standard?: string;
          /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
          url_thumbnail?: string;
          /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
          url_tiny?: string;
          /**
           * Format: date-time
           * @description The date on which the product image was modified.
           */
          date_modified?: string;
          /** @description Flag for identifying whether the image is used as the product's thumbnail. */
          is_thumbnail?: boolean;
          /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /** @description The description for the image. */
          description?: string;
        } & {
          /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
          image_url?: string;
          /**
           * @description The local path to the original image file uploaded to BigCommerce. A `multipart/form-data` media type.
           *
           * Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file.
           */
          image_file?: string;
        };
        "multipart/form-data": {
          /** @description The unique numeric ID of the image; increments sequentially. */
          id?: number;
          /** @description The unique numeric identifier for the product with which the image is associated. */
          product_id?: number;
          /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
          url_zoom?: string;
          /** @description The standard URL for this image. By default, this is used for product-page images. */
          url_standard?: string;
          /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
          url_thumbnail?: string;
          /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
          url_tiny?: string;
          /**
           * Format: date-time
           * @description The date on which the product image was modified.
           */
          date_modified?: string;
          /** @description Flag for identifying whether the image is used as the product's thumbnail. */
          is_thumbnail?: boolean;
          /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /** @description The description for the image. */
          description?: string;
        } & {
          /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
          image_url?: string;
          /**
           * @description The local path to the original image file uploaded to BigCommerce. A `multipart/form-data` media type.
           *
           * Must be sent as a multipart/form-data field in the request body. Limit of 8 MB per file.
           */
          image_file?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /** Product Image */
            data?: {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /** @description Flag for identifying whether the image is used as the product's thumbnail. */
              is_thumbnail?: boolean;
              /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /** @description The description for the image. */
              description?: string;
            } & {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /**
               * @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
               * A `multipart/form-data` media type.
               *
               * Must be sent as a multipart/form-data field in the request body. Limit of 8 MB per file.
               */
              image_file?: string;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /**
               * @description Publically available URL.
               * Use the image_url when creating a product.
               * @example https://upload.wikimedia.org/wikipedia/commons/7/7f/Anglel_Bless_Legendary_Hills_1_m%C4%9Bs%C3%ADc_st%C3%A1%C5%99%C3%AD.jpg
               */
              image_url?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The product ID does not exist. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /**
       * @description Unprocessable Entity.
       *
       * May occur if the `Content-Type` header is set to `multipart/form-data` rather than `application/json` when creating a product image using `image_url`.
       */
      422: {
        content: {
          "application/json": {
            status: number;
            title: string;
            type: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Image
   * @description Returns a single *Product Image*. Optional parameters can be passed in.
   */
  getProductImageById: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        image_id: components["parameters"]["ImageIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productImage_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Image
   * @description Updates a *Product Image*.
   *
   * **Usage Notes**
   * - `image_url` - `255` character limit
   * - Each image file or image uploaded by URL can be up to 8 MB.
   * - For file uploads, send a POST request using the `multipart/form-data` media type
   */
  updateProductImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        image_id: components["parameters"]["ImageIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["productImage_Put"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Product Image */
            data?: {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /** @description Flag for identifying whether the image is used as the product's thumbnail. */
              is_thumbnail?: boolean;
              /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /** @description The description for the image. */
              description?: string;
            } & {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /**
               * @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
               *
               * Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file.
               */
              image_file?: string;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /**
               * @description Publically available URL.
               * Use the image_url when creating a product.
               * @example https://upload.wikimedia.org/wikipedia/commons/7/7f/Anglel_Bless_Legendary_Hills_1_m%C4%9Bs%C3%ADc_st%C3%A1%C5%99%C3%AD.jpg
               */
              image_url?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Created */
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Image
   * @description Deletes a *Product Image*.
   */
  deleteProductImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        image_id: components["parameters"]["ImageIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get All Product Videos
   * @description Returns a list of *Product Videos*. Optional parameters can be passed in.
   */
  getProductVideos: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productVideo_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Create a Product Video
   * @description Creates a *Product Video*.
   *
   * **Required Fields**
   * * video_id
   *
   * **Read-Only Fields**
   * * id
   *
   * Publicly accessible URLs are valid parameters.
   * Videos must be loaded through YouTube at this time.
   */
  createProductVideo: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The title for the video. If left blank, this will be filled in according to data on a host site.
           *
           * @example Writing Great Documentation
           */
          title?: string;
          /**
           * @description The description for the video. If left blank, this will be filled in according to data on a host site.
           *
           * @example A video about documenation
           */
          description?: string;
          /**
           * @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered.
           *
           * @example 1
           */
          sort_order?: number;
          /**
           * @description The video type (a short name of a host site).
           *
           * @enum {string}
           */
          type?: "youtube";
        } & {
          /**
           * @description The ID of the video on a host site.
           *
           * @example z3fRu9pkuXE
           */
          video_id?: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Video
             * @description A product video model.
             */
            data?: {
              /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
              title?: string;
              /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
              description?: string;
              /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /**
               * @description The video type (a short name of a host site).
               *
               * @enum {string}
               */
              type?: "youtube";
            } & {
              /** @description The unique numeric ID of the product video; increments sequentially. */
              id?: number;
              /** @description The ID of the video on a host site. */
              video_id?: string;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description Length of the video. This will be filled in according to data on a host site. */
              length?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Video
   * @description Returns a single *Product Video*. Optional parameters can be passed in.
   */
  getProductVideoById: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        id: components["parameters"]["VideoIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productVideo_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Video
   * @description Updates a *Product Video.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   */
  updateProductVideo: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        id: components["parameters"]["VideoIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
          title?: string;
          /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
          description?: string;
          /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /**
           * @description The video type (a short name of a host site).
           *
           * @enum {string}
           */
          type?: "youtube";
        } & {
          /** @description The unique numeric ID of the product video; increments sequentially. */
          id?: number;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Video
             * @description A product video model.
             */
            data?: {
              /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
              title?: string;
              /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
              description?: string;
              /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /**
               * @description The video type (a short name of a host site).
               *
               * @enum {string}
               */
              type?: "youtube";
            } & {
              /** @description The unique numeric ID of the product video; increments sequentially. */
              id?: number;
              /** @description The ID of the video on a host site. */
              video_id?: string;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description Length of the video. This will be filled in according to data on a host site. */
              length?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Video
   * @description Deletes a *Product Video*.
   */
  deleteProductVideo: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        id: components["parameters"]["VideoIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Complex Rules
   * @description Returns a list of all product *Complex Rules*. Optional parameters may be passed in.
   */
  getComplexRules: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["complexRule_Base"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Create a Complex Rule
   * @description Creates a product *Complex Rule*.
   *
   * **Required Fields**
   * - modifier_id
   * - modifier_value_id
   * - variant_id
   *
   * **Read-Only Fields**
   * - complex_rule_id
   * - conditions_id
   * - rule_id
   * - combination_id
   * - id
   */
  createComplexRule: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
           *
           * @example 67
           */
          product_id?: number | null;
          /**
           * @description The priority to give this rule when making adjustments to the product properties.
           *
           * @example 0
           */
          sort_order?: number;
          /**
           * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
           *
           * @example true
           */
          enabled?: boolean;
          /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
          stop?: boolean;
          /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
          purchasing_disabled?: boolean;
          /**
           * @description Message displayed on the storefront when a rule disables the purchasing of a product.
           *
           * @example This product is not available at this time.
           */
          purchasing_disabled_message?: string;
          /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
          purchasing_hidden?: boolean;
          /**
           * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          price_adjuster?: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          weight_adjuster?: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          conditions?: ({
              /**
               * @description The unique numeric ID of the modifier with which the rule condition is associated.
               * Required in /POST.
               * @example 55
               */
              modifier_id: number | null;
              /**
               * @description The unique numeric ID of the modifier value with which the rule condition is associated.
               * Required in /POST.
               * @example 256
               */
              modifier_value_id: number | null;
              /**
               * @description The unique numeric ID of the variant with which the rule condition is associated.
               * Required in /POST.
               * @example 1
               */
              variant_id: number | null;
            })[];
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Complex Rule
             * @description Common ComplexRule properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the rule; increments sequentially.
               * Read-Only
               * @example 5
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
               *
               * @example 67
               */
              product_id?: number | null;
              /**
               * @description The priority to give this rule when making adjustments to the product properties.
               *
               * @example 0
               */
              sort_order?: number;
              /**
               * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
               *
               * @example true
               */
              enabled?: boolean;
              /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
              stop?: boolean;
              /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
              purchasing_disabled?: boolean;
              /**
               * @description Message displayed on the storefront when a rule disables the purchasing of a product.
               *
               * @example This product is not available at this time.
               */
              purchasing_disabled_message?: string;
              /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
              purchasing_hidden?: boolean;
              /**
               * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string|null}
                 */
                adjuster?: "relative" | "percentage" | null;
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string|null}
                 */
                adjuster?: "relative" | "percentage" | null;
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              conditions?: ({
                  /**
                   * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                   *
                   * @example 3
                   */
                  id?: number | null;
                  /**
                   * @description The unique numeric ID of the rule with which the condition is associated.
                   * Read-Only
                   * @example 4
                   */
                  rule_id?: number | null;
                  /**
                   * @description The unique numeric ID of the modifier with which the rule condition is associated.
                   * Required in /POST.
                   * @example 55
                   */
                  modifier_id: number | null;
                  /**
                   * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                   * Required in /POST.
                   * @example 256
                   */
                  modifier_value_id: number | null;
                  /**
                   * @description The unique numeric ID of the variant with which the rule condition is associated.
                   * Required in /POST.
                   * @example 1
                   */
                  variant_id: number | null;
                  /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                  combination_id?: number;
                })[];
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Complex Rule
   * @description Returns a single *Complex Rule*. Optional parameters can be passed in.
   */
  getComplexRuleById: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Complex Rule
             * @description Common ComplexRule properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the rule; increments sequentially.
               * Read-Only
               * @example 5
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
               *
               * @example 67
               */
              product_id?: number;
              /**
               * @description The priority to give this rule when making adjustments to the product properties.
               *
               * @example 0
               */
              sort_order?: number;
              /**
               * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
               *
               * @example true
               */
              enabled?: boolean;
              /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
              stop?: boolean;
              /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
              purchasing_disabled?: boolean;
              /**
               * @description Message displayed on the storefront when a rule disables the purchasing of a product.
               *
               * @example This product is not available at this time.
               */
              purchasing_disabled_message?: string;
              /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
              purchasing_hidden?: boolean;
              /**
               * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string}
                 */
                adjuster?: "relative" | "percentage";
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string}
                 */
                adjuster?: "relative" | "percentage";
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              conditions?: {
                  /**
                   * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                   *
                   * @example 3
                   */
                  id?: number;
                  /**
                   * @description The unique numeric ID of the rule with which the condition is associated.
                   * Read-Only
                   * @example 4
                   */
                  rule_id?: number;
                  /**
                   * @description The unique numeric ID of the modifier with which the rule condition is associated.
                   * Required in /POST.
                   * @example 55
                   */
                  modifier_id: number;
                  /**
                   * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                   * Required in /POST.
                   * @example 256
                   */
                  modifier_value_id: number;
                  /**
                   * @description The unique numeric ID of the variant with which the rule condition is associated.
                   * Required in /POST.
                   * @example 1
                   */
                  variant_id: number;
                  /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                  combination_id?: number;
                }[];
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Complex Rule
   * @description Updates a *Complex Rule*.
   *
   * **Required Fields**:
   * - none
   *
   * **Read-Only Fields**:
   * - complex_rule_id
   * - conditions_id
   * - rule_id
   * - combination_id
   * - id
   */
  updateComplexRule: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
           *
           * @example 67
           */
          product_id?: number | null;
          /**
           * @description The priority to give this rule when making adjustments to the product properties.
           *
           * @example 0
           */
          sort_order?: number;
          /**
           * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
           *
           * @example true
           */
          enabled?: boolean;
          /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
          stop?: boolean;
          /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
          purchasing_disabled?: boolean;
          /**
           * @description Message displayed on the storefront when a rule disables the purchasing of a product.
           *
           * @example This product is not available at this time.
           */
          purchasing_disabled_message?: string;
          /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
          purchasing_hidden?: boolean;
          /**
           * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          price_adjuster?: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          weight_adjuster?: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          conditions?: ({
              /**
               * @description The unique numeric ID of the modifier with which the rule condition is associated.
               * Required in /POST.
               * @example 55
               */
              modifier_id: number | null;
              /**
               * @description The unique numeric ID of the modifier value with which the rule condition is associated.
               * Required in /POST.
               * @example 256
               */
              modifier_value_id: number | null;
              /**
               * @description The unique numeric ID of the variant with which the rule condition is associated.
               * Required in /POST.
               * @example 1
               */
              variant_id: number | null;
            })[];
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Complex Rule
             * @description Common ComplexRule properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the rule; increments sequentially.
               * Read-Only
               * @example 5
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
               *
               * @example 67
               */
              product_id?: number;
              /**
               * @description The priority to give this rule when making adjustments to the product properties.
               *
               * @example 0
               */
              sort_order?: number;
              /**
               * @description Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.
               *
               * @example true
               */
              enabled?: boolean;
              /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
              stop?: boolean;
              /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
              purchasing_disabled?: boolean;
              /**
               * @description Message displayed on the storefront when a rule disables the purchasing of a product.
               *
               * @example This product is not available at this time.
               */
              purchasing_disabled_message?: string;
              /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
              purchasing_hidden?: boolean;
              /**
               * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string}
                 */
                adjuster?: "relative" | "percentage";
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string}
                 */
                adjuster?: "relative" | "percentage";
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              conditions?: {
                  /**
                   * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                   *
                   * @example 3
                   */
                  id?: number;
                  /**
                   * @description The unique numeric ID of the rule with which the condition is associated.
                   * Read-Only
                   * @example 4
                   */
                  rule_id?: number;
                  /**
                   * @description The unique numeric ID of the modifier with which the rule condition is associated.
                   * Required in /POST.
                   * @example 55
                   */
                  modifier_id: number;
                  /**
                   * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                   * Required in /POST.
                   * @example 256
                   */
                  modifier_value_id: number;
                  /**
                   * @description The unique numeric ID of the variant with which the rule condition is associated.
                   * Required in /POST.
                   * @example 1
                   */
                  variant_id: number;
                  /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                  combination_id?: number;
                }[];
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Complex Rule
   * @description Deletes a product *Complex Rule*.
   */
  deleteComplexRuleById: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Custom Fields
   * @description Returns a list of product *Custom Fields*. Optional parameters can be passed in.
   */
  getCustomFields: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: {
                /**
                 * @description The unique numeric ID of the custom field; increments sequentially.
                 * Read-Only
                 * @example 6
                 */
                id?: number;
                /**
                 * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
                 *
                 * @example ISBN
                 */
                name: string;
                /**
                 * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
                 *
                 * @example 1234567890123
                 */
                value: string;
              }[];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Create a Custom Fields
   * @description Creates a *Custom Field*.
   *
   * **Required Fields:**
   * - name
   * - value
   *
   * **Read-Only:**
   * - id
   *
   * **Limits**
   * - 200 custom fields per product limit.
   * - 255 characters per custom field limit.
   */
  createCustomField: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
           *
           * @example ISBN
           */
          name: string;
          /**
           * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
           *
           * @example 1234567890123
           */
          value: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Custom Field
             * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
             */
            data?: {
              /**
               * @description The unique numeric ID of the custom field; increments sequentially.
               * Read-Only
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example ISBN
               */
              name: string;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example 1234567890123
               */
              value: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The parent resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description The `CustomField` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Custom Field
   * @description Returns a single *Custom Field*. Optional parameters can be passed in.
   */
  getCustomFieldById: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        custom_field_id: components["parameters"]["CustomFieldIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productCustomField_Base"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Custom Field
   * @description Updates a *Custom Field*.
   *
   * **Required Fields**
   * - none
   *
   * **Read-Only**
   * - id
   */
  updateCustomField: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        custom_field_id: components["parameters"]["CustomFieldIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique numeric ID of the custom field; increments sequentially.
           * Read-Only
           * @example 6
           */
          id?: number;
          /**
           * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
           *
           * @example ISBN
           */
          name: string;
          /**
           * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
           *
           * @example 1234567890123
           */
          value: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Custom Field
             * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
             */
            data?: {
              /**
               * @description The unique numeric ID of the custom field; increments sequentially.
               * Read-Only
               * @example 6
               */
              id?: number;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example ISBN
               */
              name: string;
              /**
               * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
               *
               * @example 1234567890123
               */
              value: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description The `CustomField` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Custom Field
   * @description Deletes a product *Custom Field*.
   */
  deleteCustomFieldById: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        custom_field_id: components["parameters"]["CustomFieldIdParam"];
      };
    };
    responses: {
      /** @description `204 No Content`. Action has been enacted and no further information is to be supplied. `null` is returned. */
      204: {
        content: {
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Get All Bulk Pricing Rules
   * @description Returns a list of *Bulk Pricing Rules*. Optional parameters can be passed in.
   */
  getBulkPricingRules: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: ({
                /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                id: number;
              } & components["schemas"]["bulkPricingRule_Full"])[];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description The parent resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Bulk Pricing Rule
   * @description Creates a *Bulk Pricing Rule*.
   *
   * **Required Fields**
   * - quantity_min
   * - quantity_max
   * - type
   * - amount
   *
   * **Read-Only Fields**
   * - id
   *
   * **Limits**
   * - 50 bulk pricing rule per product limit.
   */
  createBulkPricingRule: {
    parameters: {
      query?: {
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["bulkPricingRule_Full"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: {
              /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
              id: number;
            } & components["schemas"]["bulkPricingRule_Full"];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: Record<string, never>;
          };
        };
      };
      /** @description The parent resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Bulk Pricing Rule
   * @description Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in.
   */
  getBulkPricingRuleById: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: {
              /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
              id: number;
            } & components["schemas"]["bulkPricingRule_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource or parent resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Bulk Pricing Rule
   * @description Updates a *Bulk Pricing Rule*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * - id
   */
  updateBulkPricingRule: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
          id: number;
        } & components["schemas"]["bulkPricingRule_Full"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Bulk Pricing Rule
             * @description Common BulkPricingRule properties
             */
            data?: {
              /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
              id?: number;
              /**
               * @description The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.
               * Required in /POST.
               *
               * @example 10
               */
              quantity_min: number;
              /**
               * @description The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
               * Required in /POST.
               * @example 50
               */
              quantity_max: number;
              /**
               * @description The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
               * Required in /POST.
               * @example price
               * @enum {string}
               */
              type: "price" | "percent" | "fixed";
              /**
               * @description The discount can be a fixed dollar amount or a percentage. For a fixed dollar amount enter it as an integer and the response will return as an integer. For percentage enter the amount as the percentage divided by 100 using string format. For example 10% percent would be “.10”. The response will return as an integer.
               * Required in /POST.
               */
              amount: number;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource or parent resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Bulk Pricing Rule
   * @description Deletes a *Bulk Pricing Rule*.
   */
  deleteBulkPricingRuleById: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
      /** @description The resource or parent resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Get All Product Metafields
   * @description Returns a list of *Product Metafields*. Optional parameters can be passed in.
   */
  getProductMetafieldsByProductId: {
    parameters: {
      query?: {
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description Filter based on a metafield's key. */
        key?: string;
        /** @description Filter based on a metafield's namespace. */
        namespace?: string;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Product Metafield
   * @description Creates a *Product Metafield*.
   *
   * **Required Fields:**
   * * permission_set
   * * namespace
   * * key
   * * value
   *
   * **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  createProductMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["metafield_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the app's client ID, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Metafield
   * @description Returns a single *Product Metafield*. Optional parameters can be passed in.
   */
  getProductMetafieldByProductId: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Metafield
   * @description Updates a *Product Metafield*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified using the API account that created the metafield:
   * 	* `namespace`
   * 	* `key`
   * 	* `permission_set`
   * 	* `value`
   *
   * **Usage Notes**
   * * Attempting to modify the `namespace`, `key`, `permission_set`, or `value` field using an API account different from the one used to create those metafields will result in a `403` error message.
   */
  updateProductMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["metafield_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Metafield
   * @description Deletes a *Product Metafield*.
   */
  deleteProductMetafieldById: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Product Reviews
   * @description Returns a list of all *Product Reviews*. Optional parameters can be passed in.
   */
  getProductReviews: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description Filter items by status. `1` for approved, `0` for pending. */
        status?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: ({
                /**
                 * @description The title for the product review.
                 * Required in /POST.
                 */
                title: string;
                /** @description The text for the product review. */
                text?: string;
                /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                status?: string;
                /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                rating?: number;
                /** @description The email of the reviewer. Must be a valid email, or an empty string. */
                email?: string;
                /** @description The name of the reviewer. */
                name?: string;
                /**
                 * Format: date-time
                 * @description Date the product was reviewed. Required in /POST.
                 */
                date_reviewed: string;
              } & {
                /** @description The unique numeric ID of the product review; increments sequentially. */
                id?: number;
                /** @description The unique numeric identifier for the product with which the review is associated. */
                product_id?: number;
                /**
                 * Format: date-time
                 * @description Date the product review was created.
                 */
                date_created?: string;
                /**
                 * Format: date-time
                 * @description Date the product review was modified.
                 */
                date_modified?: string;
              })[];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description There are no reviews on this product. */
      204: {
        content: {
        };
      };
      /** @description The product ID does not exist. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Product Review
   * @description Creates a *Product Review*.
   *
   * **Required Fields**
   * - title
   * - date_reviewed
   *
   * **Read-Only Fields**
   * * id
   */
  createProductReview: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The title for the product review.
           * Required in /POST.
           */
          title: string;
          /** @description The text for the product review. */
          text?: string;
          /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
          status?: string;
          /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
          rating?: number;
          /** @description The email of the reviewer. Must be a valid email, or an empty string. */
          email?: string;
          /** @description The name of the reviewer. */
          name?: string;
          /**
           * Format: date-time
           * @description Date the product was reviewed. Required in /POST.
           */
          date_reviewed: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Review
             * @description A product review model.
             */
            data?: {
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the review is associated. */
              product_id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The product ID does not exist. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Review
   * @description Returns a single *Product Review*. Optional parameters maybe passed in.
   */
  getProductReviewById: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        review_id: components["parameters"]["ReviewIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Review
             * @description A product review model.
             */
            data?: {
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Review
   * @description Updates a *Product Review*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   */
  updateProductReview: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        review_id: components["parameters"]["ReviewIdParam"];
      };
    };
    /** @description A BigCommerce `ProductReview` object. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The title for the product review.
           * Required in /POST.
           */
          title: string;
          /** @description The text for the product review. */
          text?: string;
          /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
          status?: string;
          /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
          rating?: number;
          /** @description The email of the reviewer. Must be a valid email, or an empty string. */
          email?: string;
          /** @description The name of the reviewer. */
          name?: string;
          /**
           * Format: date-time
           * @description Date the product was reviewed. Required in /POST.
           */
          date_reviewed: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Review
             * @description A product review model.
             */
            data?: {
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the review is associated. */
              product_id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Review
   * @description Deletes a *Product Review*.
   */
  deleteProductReview: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        review_id: components["parameters"]["ReviewIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Products Channel Assignments
   * @description Returns a list of products channel assignments.
   */
  GetProductsChannelAssignments: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
        "product_id:in"?: string;
        "channel_id:in"?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description Collection of channel assignments. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ProductChannelAssignment"][];
            meta?: components["schemas"]["MetaPaginationObject"];
          };
        };
      };
    };
  };
  /**
   * Create Products Channel Assignments
   * @description Creates products channel assignments.
   */
  CreateProductsChannelAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductChannelAssignment"][];
      };
    };
    responses: {
      /** @description Updated */
      204: never;
      /** @description Error response for batch PUT of Channel Assignments. Includes the errors for each reference id. */
      422: {
        content: {
          "application/json": components["schemas"]["beta5ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Products Channel Assignments
   * @description Delete products channel assignments. A filter must be supplied.
   */
  DeleteProductsChannelAssignments: {
    parameters: {
      query?: {
        "product_id:in"?: string;
        "channel_id:in"?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description Deleted */
      204: never;
      /** @description At least one filter must be provided in order to delete channel assignments */
      422: {
        content: {
          "application/json": components["schemas"]["beta5ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Products Category Assignments
   * @description Returns a list of products category assignments.
   */
  GetProductsCategoryAssignments: {
    parameters: {
      query?: {
        page?: number;
        limit?: number;
        "product_id:in"?: string;
        "category_id:in"?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description Collection of category assignments. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ProductCategoryAssignment"][];
            meta?: components["schemas"]["MetaPaginationObject"];
          };
        };
      };
    };
  };
  /**
   * Create Products Category Assignments.
   * @description Creates products category assignments.
   */
  CreateProductsCategoryAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductCategoryAssignment"][];
      };
    };
    responses: {
      /** @description Updated */
      204: never;
      /** @description Error response for batch PUT of Category Assignments. Includes the errors for each reference id. */
      422: {
        content: {
          "application/json": components["schemas"]["beta5ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Products Category Assignments
   * @description Deletes products category assignments. A filter must be supplied.
   */
  DeleteProductsCategoryAssignments: {
    parameters: {
      query?: {
        "product_id:in"?: string;
        "category_id:in"?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description Deleted */
      204: never;
      /** @description At least one filter must be provided in order to delete category assignments */
      422: {
        content: {
          "application/json": components["schemas"]["beta5ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a Catalog Summary
   * @description Returns a lightweight inventory summary from the BigCommerce Catalog.
   *
   * The inventory summary includes:
   * * "inventory_count"
   * * "variant_count"
   * * "inventory_value"
   * * "highest_variant_price"
   * * "average_variant_price"
   * * "lowest_variant_price"
   * * "oldest_variant_date"
   * * "newest_variant_date"
   * * "primary_category_id"
   * * "primary_category_name"
   */
  getCatalogSummary: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Catalog Summary
             * @description Catalog Summary object describes a lightweight summary of the catalog.
             */
            data?: {
              /**
               * @description A count of all inventory items in the catalog.
               *
               * @example 2000
               */
              inventory_count?: number;
              /**
               * Format: double
               * @description Total value of store's inventory.
               *
               * @example 267000
               */
              inventory_value?: number;
              /**
               * @description ID of the category containing the most products.
               *
               * @example 23
               */
              primary_category_id?: number;
              /**
               * @description Name of the category containing the most products.
               *
               * @example Shop All
               */
              primary_category_name?: string;
              /**
               * @description Total number of variants
               * @example 46
               */
              variant_count?: number;
              /**
               * Format: double
               * @description Highest priced variant
               * @example 249
               */
              highest_variant_price?: number;
              /**
               * Format: double
               * @description Average price of all variants
               * @example 83.07978261
               */
              average_variant_price?: number;
              /**
               * @description Lowest priced variant in the store
               * @example 7
               */
              lowest_variant_price?: string;
              /** @example 2018-08-15T00:00:00+00:00 */
              oldest_variant_date?: string;
              /** @example 2018-08-16T00:00:00+00:00 */
              newest_variant_date?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
    };
  };
}
