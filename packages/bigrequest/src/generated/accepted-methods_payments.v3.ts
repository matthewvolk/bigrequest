// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/payments/methods": {
    /**
     * Get Accepted Payment Methods
     * @description Returns a list of accepted payment methods based on the `order_id` or `checkout_id`.
     *
     * **Notes**
     * * Use the [Create an Order](/docs/rest-management/orders#create-an-order) endpoint to generate the `order_id`.
     * * Orders created will be set to incomplete order status.
     * * The cart ID and checkout ID are the same.
     *
     * **Required Fields**
     * * `order_id` or `checkout_id`
     */
    get: operations["PaymentsMethodsGet"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** paymentMethodStoredInstrument */
    paymentMethodStoredInstrument: {
      /** @description Brand of this card such as VISA or Mastercard */
      brand: string;
      /**
       * Format: int32
       * @description Expiry month of this card
       */
      expiry_month: number;
      /**
       * Format: int32
       * @description Expiry year of this card
       */
      expiry_year: number;
      /** @description Issuer identification number of this card. This is extracted from the card when the order is paid for. */
      issuer_identification_number: string;
      /** @description Last four numbers of this card */
      last_4: string;
      /** @description A BigCommerce-generated identifier that represents the stored card. */
      token: string;
      /**
       * @description Whether this instrument is a default instrument
       * @default false
       * @example false
       */
      is_default: boolean;
      /**
       * @description Type to classify this stored card
       * @default stored_card
       * @example stored_card
       */
      type: string;
    };
    /** paymentMethod_Full */
    paymentMethod_Full: {
      /** @description Identifier for this payment method */
      id: string;
      /** @description Name of this payment method */
      name: string;
      stored_instruments?: components["schemas"]["paymentMethodStoredInstrument"][];
      supported_instruments: ({
          /**
           * InstrumentType
           * @description Type of this instrument
           * @example VISA
           * @enum {string}
           */
          instrument_type: "VISA" | "MASTERCARD" | "DISCOVER" | "AMEX" | "DINERS_CLUB" | "JCB" | "DANKORT" | "MAESTRO" | "STORED_CARD";
          /** @description Whether verification value is required for payment */
          verification_value_required?: boolean;
        })[];
      /**
       * @description Whether this payment method is on test mode
       * @default false
       * @example false
       */
      test_mode: boolean;
      /**
       * @description Type to classify this payment method
       * @default card
       * @example card
       */
      type: string;
    };
  };
  responses: {
    paymentsMethods_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["paymentMethod_Full"][];
          /** @description Response metadata. */
          meta?: {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Accepted Payment Methods
   * @description Returns a list of accepted payment methods based on the `order_id` or `checkout_id`.
   *
   * **Notes**
   * * Use the [Create an Order](/docs/rest-management/orders#create-an-order) endpoint to generate the `order_id`.
   * * Orders created will be set to incomplete order status.
   * * The cart ID and checkout ID are the same.
   *
   * **Required Fields**
   * * `order_id` or `checkout_id`
   */
  PaymentsMethodsGet: {
    parameters: {
      query?: {
        /** @description Identifier for the order */
        order_id?: number;
        /** @description Identifier for the checkout (same as the cart ID) */
        checkout_id?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["paymentsMethods_Resp"];
      /** @description Request has been rejected */
      400: {
        content: {
          "application/json": {
            /**
             * Format: int32
             * @description HTTP status code
             */
            status: number;
            /** @description Short summary describing the particular error */
            title: string;
            /** @description Detailed summary describing the particular error */
            detail?: string;
            /** @description Reference that identifies the particular error */
            type: string;
            /**
             * Format: int32
             * @description Code representing the particular error
             */
            code?: number;
            errors?: {
              [key: string]: string;
            };
          };
        };
      };
      /** @description Valid authentication required */
      401: {
        content: {
          "application/json": {
            /**
             * Format: int32
             * @description HTTP status code
             */
            status: number;
            /** @description Short summary describing the particular error */
            title: string;
            /** @description Detailed summary describing the particular error */
            detail?: string;
            /** @description Reference that identifies the particular error */
            type: string;
            /**
             * Format: int32
             * @description Code representing the particular error
             */
            code?: number;
            errors?: {
              [key: string]: string;
            };
          };
        };
      };
      /** @description Request has been rejected due to resource not being found */
      404: {
        content: {
          "application/json": {
            /**
             * Format: int32
             * @description HTTP status code
             */
            status: number;
            /** @description Short summary describing the particular error */
            title: string;
            /** @description Detailed summary describing the particular error */
            detail?: string;
            /** @description Reference that identifies the particular error */
            type: string;
            /**
             * Format: int32
             * @description Code representing the particular error
             */
            code?: number;
            errors?: {
              [key: string]: string;
            };
          };
        };
      };
      /** @description Request has been rejected due to missing or invalid data */
      422: {
        content: {
          "application/json": {
            /**
             * Format: int32
             * @description HTTP status code
             */
            status: number;
            /** @description Short summary describing the particular error */
            title: string;
            /** @description Detailed summary describing the particular error */
            detail?: string;
            /** @description Reference that identifies the particular error */
            type: string;
            /**
             * Format: int32
             * @description Code representing the particular error
             */
            code?: number;
            errors?: {
              [key: string]: string;
            };
          };
        };
      };
      /** @description Internal server error */
      default: {
        content: {
          "application/json": {
            /**
             * Format: int32
             * @description HTTP status code
             */
            status: number;
            /** @description Short summary describing the particular error */
            title: string;
            /** @description Detailed summary describing the particular error */
            detail?: string;
            /** @description Reference that identifies the particular error */
            type: string;
            /**
             * Format: int32
             * @description Code representing the particular error
             */
            code?: number;
            errors?: {
              [key: string]: string;
            };
          };
        };
      };
    };
  };
}
