// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/checkouts/{checkoutId}": {
    /**
     * Get a Checkout
     * @description Returns a *Checkout*.
     *
     * **Notes**
     *
     * The cart ID and checkout ID are the same.
     */
    get: operations["CheckoutsByCheckoutIdGet"];
    /**
     * Update Customer Messages
     * @description Change customer message pertaining to an existing *Checkout*.
     *
     * **Limits:**
     * * 2000 characters for customer message
     */
    put: operations["CheckoutsByCheckoutIdPut"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
  };
  "/checkouts/{checkoutId}/discounts": {
    /**
     * Add Discount to Checkout
     * @description Adds a discount to an existing *checkout*.
     *
     * This discount only applies to `line_items`. When you call this API, you clear out all existing discounts applied to line items, including product and order-based discounts.
     *
     * This endpoint splits the discount between line items based on the item value.
     *
     * Required Fields
     * * discounted_amount
     */
    post: operations["post-store_hash-v3-checkouts-checkoutId-discounts"];
  };
  "/checkouts/{checkoutId}/billing-address": {
    /**
     * Add Checkout Billing Address
     * @description Adds a billing address to an existing checkout.
     *
     * **Required Fields**
     * * email
     * * country_code
     */
    post: operations["CheckoutsBillingAddressByCheckoutIdPost"];
  };
  "/checkouts/{checkoutId}/billing-address/{addressId}": {
    /**
     * Update Checkout Billing Address
     * @description Updates an existing billing address on a checkout.
     */
    put: operations["CheckoutsBillingAddressByCheckoutIdAndAddressIdPut"];
  };
  "/checkouts/{checkoutId}/consignments": {
    /**
     * Add Consignment to Checkout
     * @description Adds a new consignment to a checkout.
     *
     * For more information about working with consignments, see [Checkout consignment](/docs/storefront/cart-checkout/guide/consignments).
     *
     * Though the only required `address` properties to create a consignment are `email` and `country_code`, to successfully [create an order](/docs/rest-management/checkouts/checkout-orders#create-an-order) the `address` requires the following properties:
     * * `first_name`
     * * `last_name`
     * * `address1`
     * * `city`
     * * `country`
     * * `email`
     * * `country_code`
     *
     * Depending on the country, the following `address` properties may also be required:
     *
     * * `postal_code`
     * * `state_or_province`
     */
    post: operations["CheckoutsConsignmentsByCheckoutIdPost"];
  };
  "/checkouts/{checkoutId}/consignments/{consignmentId}": {
    /**
     * Update Checkout Consignment
     * @description Updates an existing consignment. The address, line item IDs, and shipping option ID can be updated using this endpoint.
     *
     * Use a separate `PUT` request to update the shipping option IDs if you also want to update the address and line item IDs.
     *
     * To add new shipping options, complete the following steps:
     * * Use the [Add Consignment to Checkout](/docs/rest-management/checkouts/checkout-consignments#add-consignment-to-checkout) endpoint to add a new [consignment] to a checkout.
     * * Assign a shipping option to the new consignment by sending a `PUT` request to update the consignment's `shipping_option_id` with a returned value from `data.consignments[N].available_shipping_option[N].id` obtained in the [Add Consignment to Checkout](/docs/rest-management/checkouts/checkout-consignments#add-consignment-to-checkout) endpoint.
     *
     * To update an existing address and line item IDs, assign a new address and line item IDs by sending a `PUT` request.
     */
    put: operations["CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut"];
    /**
     * Delete Checkout Consignment
     * @description Removes an existing consignment from a checkout.
     *
     * Removing the last consignment will remove the cart from the customer it is assigned to. Create a new redirect URL for the customer so they can access the cart again.
     */
    delete: operations["CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
        consignmentId: string;
      };
    };
  };
  "/checkouts/{checkoutId}/coupons": {
    /**
     * Add Coupon to Checkout
     * @description Adds a coupon code to a checkout.
     *
     * **Required Fields**
     * * coupon_code
     *
     * **Limits**
     * * Coupon codes have a 50-character limit.
     */
    post: operations["CheckoutsCouponsByCheckoutIdPost"];
  };
  "/checkouts/{checkoutId}/coupons/{couponCode}": {
    /**
     * Delete Checkout Coupon
     * @description Deletes a coupon code from a checkout.
     */
    delete: operations["CheckoutsCouponsByCheckoutIdAndCouponCodeDelete"];
  };
  "/checkouts/{checkoutId}/orders": {
    /**
     * Create an Order
     * @description Creates an order.
     *
     * ## Usage notes
     * * Orders created will be set to incomplete order status.
     * * You can create as many orders from the same order (cart) as you want.
     * * Order duplication copies the existing order, assigns a new order number, and sets the new order status to `incomplete`.
     * * Once the order is paid, the cart is deleted.
     * * Cart deletion occurs if you are using BigCommerce to accept payments on orders.
     */
    post: operations["createAnOrder"];
  };
  "/checkouts/settings": {
    /**
     * Get Checkout Settings
     * @description Get checkout settings
     */
    get: operations["GetCheckoutSettings"];
    /**
     * Update Checkout Settings
     * @description Update checkout settings
     */
    put: operations["UpdateCheckoutSettings"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/checkouts/{checkoutId}/token": {
    /**
     * Create Checkout Token
     * @description Use the checkout token to display a confirmation page for a guest shopper.
     * **Usage Notes** * The response from performing this POST request is a checkout token. * The checkout token is a single-use token that is not order-dependent. You cannot create this token after finalizing an order. * After completing the order, you can redirect the shopper to /order-confirmation/{orderId}?t={checkoutToken}. * After token validation, the /order-confirmation/{orderId} page displays. * The `ORDER_TOKEN` should match the order or the logged-in customer can access the order.
     */
    post: operations["checkout-token"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Checkout */
    Checkout: {
      /**
       * Format: uuid
       * @example 497f6eca-6276-4993-bfeb-53cbbbba6f08
       */
      id?: string;
      /** Cart */
      cart?: {
        /**
         * Format: uuid
         * @description Cart ID, provided after creating a cart with a POST request.
         * @example 497f6eca-6276-4993-bfeb-53cbbbba6f08
         */
        id?: string;
        /**
         * @description ID of the customer to which the cart belongs.
         * @example 1
         */
        customer_id?: number;
        /**
         * @description The email address of the cart. This is the same email address that is used in the billing address.
         * @example user@example.com
         */
        email?: string;
        /** Currency */
        currency?: {
          /**
           * @description ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.)
           * @example USD
           */
          code?: string;
        };
        /**
         * Format: double
         * @description Sum of cart line-item amounts before cart-level discounts, coupons, or taxes are applied.
         * @example 5
         */
        base_amount?: number;
        /** @description ID of channel */
        channel_id?: number;
        /**
         * Format: double
         * @description Order-based discounted amount only - Excludes coupon discounts and product-based discounts.
         * @example 0.5
         */
        discount_amount?: number;
        /**
         * Format: double
         * @description Sum of cart line-item amounts minus cart-level discounts and coupons including tax.
         * @example 4.14
         */
        cart_amount_inc_tax?: number;
        /**
         * Format: double
         * @description Sum of cart line-item amounts minus cart-level discounts and coupons excluding tax.
         * @example 3.6
         */
        cart_amount_ex_tax?: number;
        coupons?: {
            /**
             * @description The coupon code.
             * @example SHOPNOW
             */
            code: string;
            /**
             * @description The coupon ID.
             * @example 1
             */
            id?: number;
            /**
             * @description Key name to identify the type of coupon.
             * @example percentage_discount
             */
            coupon_type?: string;
            /**
             * Format: float
             * @description The discounted amount applied within a given context.
             * @example 0.9
             */
            discounted_amount?: number;
          }[];
        discounts?: {
            /**
             * @description ID of the applied discount.
             * @example 5eba1f1e-0ec5-40f7-8058-f7b452c7237d
             */
            id?: string;
            /**
             * Format: double
             * @description The discounted amount applied within a given context.
             * @example 1.4
             */
            discounted_amount?: number;
          }[];
        /** Line Item */
        line_items?: {
          physical_items: ({
              /** Format: double */
              quantity: number;
              /** @description The line-item ID. */
              id?: string;
              /** Format: double */
              variant_id?: number;
              /** Format: double */
              product_id?: number;
              sku?: string;
              /** @description The product name of the item. */
              name?: string;
              /** @description The product URL. */
              url?: string;
              is_taxable?: boolean;
              image_url?: string;
              discounts?: {
                  /** @description ID of the applied discount. */
                  id?: number;
                  /**
                   * Format: double
                   * @description The discounted amount applied within a given context.
                   */
                  discounted_amount?: number;
                }[];
              /**
               * Format: double
               * @description The total value of all discounts applied to this item.
               */
              discount_amount?: number;
              /**
               * Format: double
               * @description The total value of all coupons applied to this item.
               */
              coupon_amount?: number;
              /** @description An item’s original price is the same as the default price of the product configured in the admin panel. */
              original_price?: number;
              /**
               * Format: double
               * @description The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
               */
              list_price?: number;
              /**
               * Format: double
               * @description Price of the item after all discounts are applied. (The final price before tax calculation.)
               */
              sale_price?: number;
              /**
               * Format: double
               * @description List price of the item multiplied by the quantity.
               */
              extended_list_price?: number;
              /**
               * Format: double
               * @description Sale price of the item multiplied by the quantity.
               */
              extended_sale_price?: number;
              is_require_shipping?: boolean;
              is_mutable?: boolean;
              parent_id?: number | null;
              /** Gift Wrapping */
              gift_wrapping?: {
                name?: string;
                message?: string;
                /** Format: double */
                amount?: number;
                /** Format: double */
                amount_as_integer?: number;
              } | null;
            })[];
          digital_items: ({
              /** Format: double */
              quantity: number;
              /** @description The line-item ID. */
              id?: string;
              /** Format: double */
              variant_id?: number;
              parent_id?: number | null;
              /** Format: double */
              product_id?: number;
              sku?: string;
              /** @description The product name of the item. */
              name?: string;
              /** @description The product URL. */
              url?: string;
              is_mutable?: boolean;
              is_require_shipping?: boolean;
              is_taxable?: boolean;
              image_url?: string;
              discounts?: {
                  /**
                   * Format: double
                   * @description ID of the applied discount.
                   */
                  id?: string;
                  /**
                   * Format: double
                   * @description The discounted amount applied within a given context.
                   */
                  discounted_amount?: number;
                }[];
              /**
               * Format: double
               * @description The total value of all discounts applied to this item.
               */
              discount_amount?: number;
              /**
               * Format: double
               * @description The total value of all coupons applied to this item.
               */
              coupon_amount?: number;
              /** @description An item’s original price is the same as the product default price in the admin panel. */
              original_price?: number;
              /**
               * Format: double
               * @description The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
               */
              list_price?: number;
              /**
               * Format: double
               * @description Price of the item after all discounts are applied. (The final price before tax calculation.)
               */
              sale_price?: number;
              /**
               * Format: double
               * @description List price of the item multiplied by the quantity.
               */
              extended_list_price?: number;
              /**
               * Format: double
               * @description Sale price of the item multiplied by the quantity.
               */
              extended_sale_price?: number;
            })[];
          gift_certificates: {
              /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
              theme: string;
              /**
               * Format: double
               * @description Value must be between 1.00 and 1,000.00 in the store’s default currency.
               */
              amount: number;
              /** Contact Entity */
              sender: {
                name?: string;
                email?: string;
              };
              /** Contact Entity */
              recipient: {
                name?: string;
                email?: string;
              };
              id?: string;
              /** @description GiftCertificate-provided name that will appear in the control panel. */
              name?: string;
              taxable?: boolean;
              /** @description Limited to 200 characters. */
              message?: string;
            }[];
          custom_items?: {
              quantity: number;
              id?: string;
              extended_list_price?: number;
              list_price?: number;
              sku?: string;
              name?: string;
              image_url?: string;
            }[];
        };
        /** @description Time when the cart was created. */
        created_time?: string;
        /** @description Time when the cart was last updated. */
        updated_time?: string;
      };
      /** Address Response */
      billing_address?: {
        first_name?: string;
        last_name?: string;
        email?: string;
        company?: string;
        address1?: string;
        address2?: string;
        city?: string;
        /** @description Represents state or province. */
        state_or_province?: string;
        state_or_province_code?: string;
        country_code?: string;
        postal_code?: string;
        phone?: string;
        custom_fields?: {
            field_id?: string;
            /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
            field_value?: string;
          }[];
      } & {
        id?: string;
      };
      consignments?: ({
          id?: string;
          shippingAddress?: Record<string, never>;
          /** Address Response */
          address?: {
            first_name?: string;
            last_name?: string;
            email: string;
            company?: string;
            address1?: string;
            address2?: string;
            city?: string;
            /** @description Represents state or province. */
            state_or_province?: string;
            state_or_province_code?: string;
            country_code: string;
            postal_code?: string;
            phone?: string;
            custom_fields?: {
                field_id?: string;
                /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
                field_value?: string;
              }[];
          } & {
            id?: string;
          };
          /** @description This is available only when "include=consignments.available_shipping_options" is presented in the URL. */
          available_shipping_options?: {
              description?: string;
              id?: string;
              /** @description Specifies the type of shipping option, such as flat rate, UPS, etc. */
              type?: string;
              image_url?: string;
              /** Format: double */
              cost?: number;
              /** @description An estimate of the arrival time. */
              transit_time?: string;
              /** @description Read-only field that is used for the Shipping Provider API. */
              additional_description?: string;
            }[];
          /** Selected Shipping Option */
          selected_shipping_option?: {
            description?: string;
            id?: string;
            /** @description Specifies the type of shipping option, such as flat rate, UPS, etc. */
            type?: string;
            image_url?: string;
            cost?: number;
            /** @description An estimate of the arrival time. */
            transit_time?: string;
            /** @description Read-only field that is used for the Shipping Provider API. */
            additional_description?: string;
          };
          /** @description List of consignment discounts applied through coupons. */
          coupon_discounts?: {
              /** @description Coupon code through which this discount was applied. */
              code?: string;
              /** Format: double */
              amount?: number;
            }[];
          /** @description List of consignment discounts applied through cart-level discounts. */
          discounts?: {
              /** @description Discount rule ID that applied this discount. */
              id?: number;
            }[];
          /**
           * Format: double
           * @description The shipping cost for this consignment including tax.
           */
          shipping_cost_inc_tax?: number;
          /**
           * Format: double
           * @description The shipping cost for this consignment excluding tax.
           */
          shipping_cost_ex_tax?: number;
          /**
           * Format: double
           * @description The handling cost of shipping for this consignment including tax.
           */
          handling_cost_inc_tax?: number;
          /**
           * Format: double
           * @description The handling cost of shipping for this consignment excluding tax.
           */
          handling_cost_ex_tax?: number;
          /** @description Array lists only one line item. To display multiple `line_item_ids`, perform a `POST` request to add consignments to the checkout using the same address. */
          line_item_ids?: string[];
          selected_pickup_option?: components["schemas"]["PickupOption"];
        })[];
      taxes?: {
          /** @description Name of the tax. */
          name?: string;
          /** Format: double */
          amount?: number;
        }[];
      /** @description Coupons applied at checkout level. */
      coupons?: components["schemas"]["AppliedCoupon"][];
      order_id?: string | null;
      /**
       * Format: double
       * @description Shipping cost before any discounts are applied including tax.
       */
      shipping_cost_total_inc_tax?: number;
      /**
       * Format: double
       * @description Shipping cost before any discounts are applied excluding tax.
       */
      shipping_cost_total_ex_tax?: number;
      /**
       * Format: double
       * @description Handling cost for all consignments including tax.
       */
      handling_cost_total_inc_tax?: number;
      /**
       * Format: double
       * @description Handling cost for all consignments excluding tax.
       */
      handling_cost_total_ex_tax?: number;
      /** Format: double */
      tax_total?: number;
      /**
       * Format: double
       * @description Subtotal of the checkout before applying item-level discounts including tax.
       */
      subtotal_inc_tax?: number;
      /**
       * Format: double
       * @description Subtotal of the checkout before applying item-level discounts excluding tax.
       */
      subtotal_ex_tax?: number;
      /**
       * Format: double
       * @description The total payable amount, before applying any store credit or a gift certificate.
       */
      grand_total?: number;
      /** @description Time when the cart was created. */
      created_time?: string;
      /** @description Time when the cart was last updated. */
      updated_time?: string;
      /** @description Shopper's message provided as details for the order to be created from this checkout. */
      customer_message?: string;
      promotions?: {
          /** Banner */
          banners?: {
              /** @description ID of the promotion. */
              id?: string;
              /** @description Type of the banner. */
              type?: string;
              /** @description An array of the locations where the banner will display. */
              page?: string[];
              /** @description Text of the banner. */
              text?: string;
            }[];
        }[];
    };
    /** Checkout_Put */
    Checkout_Put: {
      customer_message: string;
    };
    /** Applied Coupon */
    AppliedCoupon: {
      /**
       * @description The coupon code.
       * @example SHOPNOW
       */
      code: string;
      /**
       * @description The coupon ID.
       * @example 1
       */
      id?: number;
      /**
       * @description Key name to identify the type of coupon.
       * @example percentage_discount
       */
      coupon_type?: string;
      /**
       * Format: float
       * @description The discounted amount applied within a given context.
       * @example 0.9
       */
      discounted_amount?: number;
    };
    /** Address Properties */
    AddressProperties: {
      first_name?: string;
      last_name?: string;
      email: string;
      company?: string;
      address1?: string;
      address2?: string;
      city?: string;
      /** @description Represents state or province. */
      state_or_province?: string;
      state_or_province_code?: string;
      country_code: string;
      postal_code?: string;
      phone?: string;
      /** @description You can retrieve custom fields from the [Get Form Fields](/docs/rest-storefront/forms#get-form-fields) endpoint. */
      custom_fields?: {
          field_id?: string;
          /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
          field_value?: string;
        }[];
    };
    /** Create Consignment Request */
    CreateConsignmentRequest: {
        /** Address Properties */
        address?: {
          first_name?: string;
          last_name?: string;
          email: string;
          company?: string;
          address1?: string;
          address2?: string;
          city?: string;
          /** @description Represents state or province. */
          state_or_province?: string;
          state_or_province_code?: string;
          country_code: string;
          postal_code?: string;
          phone?: string;
          /** @description You can retrieve custom fields from the [Get Form Fields](/docs/rest-storefront/forms#get-form-fields) endpoint. */
          custom_fields?: {
              /** @description You must provide the form field ID value as the `field_id`. */
              field_id: string;
              /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
              field_value?: string;
            }[];
        };
        line_items?: {
            /** @description Corresponds to `line_items.physical_items[N].id` value from `GET`checkout response. */
            item_id: string;
            /** Format: int32 */
            quantity: number;
          }[];
        pickup_option?: {
          /** @example 1 */
          pickup_method_id?: number;
        };
      }[];
    /**
     * Update Consignment Request
     * @description One or more of these three fields are mandatory. `address` and `line_items` can be updated in one request. `shipping_option_id` has to be updated in a separate request because changing the address or line items can invalidate the previously available shipping options.
     */
    UpdateConsignmentRequest: {
      /** Address Properties */
      address?: {
        first_name?: string;
        last_name?: string;
        email: string;
        company?: string;
        address1?: string;
        address2?: string;
        city?: string;
        /** @description Represents state or province. */
        state_or_province?: string;
        state_or_province_code?: string;
        country_code: string;
        postal_code?: string;
        phone?: string;
        custom_fields?: {
            field_id?: string;
            /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
            field_value?: string;
          }[];
      };
      line_items?: {
          /** @description Corresponds to `line_items.physical_items[N].id` value from `GET`checkout response. */
          item_id: string;
          /** Format: int32 */
          quantity: number;
        }[];
      shipping_option_id?: string;
      pickup_option?: {
        /** @example 1 */
        pickup_method_id?: number;
      };
    };
    /** Coupon Code Request */
    CouponCodeRequest: {
      /** @description Coupon codes have a 50-character limit. */
      coupon_code?: string;
    };
    /** Order */
    Order: {
      /**
       * @description The order ID.
       * @example 75
       */
      id?: number;
    };
    /** Checkouts Settings */
    CheckoutsSettings: {
      custom_checkout_script_url?: string;
      order_confirmation_use_custom_checkout_script?: boolean;
      custom_order_confirmation_script_url?: string;
      custom_checkout_supports_uco_settings?: boolean;
    };
    /** Checkouts settings request */
    CheckoutsSettingsRequest: {
      /** @description Custom checkout script URL to replace our default checkout. To reset a store to optimized one-page checkout, pass an empty string for `custom_checkout_script_url` and `custom_order_confirmation_script_url`. */
      custom_checkout_script_url?: string;
      /** @description When order_confirmation_use_custom_checkout_script=true, the default custom_order_confirmation_script_url defaults to an empty string. */
      order_confirmation_use_custom_checkout_script?: boolean;
      /** @description Custom order confirmation script URL to replace the default order confirmation. To reset a store to optimized one-page checkout, pass an empty string for `custom_checkout_script_url` and `custom_order_confirmation_script_url`. */
      custom_order_confirmation_script_url?: string;
      /** @description Boolean value that specifies whether this checkout supports Optimized One-Page Checkout settings. */
      custom_checkout_supports_uco_settings?: boolean;
    };
    /** Pickup Option */
    PickupOption: {
      pickup_method_id?: number;
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    MetaOpen: {
      [key: string]: unknown;
    };
  };
  responses: {
    CheckoutResponse: {
      content: {
        "application/json": {
          data?: components["schemas"]["Checkout"];
        };
        "Available Shipping Options": unknown;
        "Selected Shipping Options": unknown;
        "Coupon Applied": unknown;
        "No Coupon Applied": unknown;
        "Include promotions": unknown;
        "example-1": unknown;
      };
    };
    checkout_settings_resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["CheckoutsSettings"];
          meta?: Record<string, never>;
        };
        "WebDAV protocol": unknown;
      };
    };
    order_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["Order"];
          meta?: Record<string, never>;
        };
      };
    };
  };
  parameters: {
    /** @description ID of the checkout; the same as the cart ID. */
    checkoutId: string;
    addressId: number;
    consignmentId: string;
    /** @description The coupon code value, not the coupon ID. */
    couponCode: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    "Content-Type": string;
    includeShippingOption?: "consignments.available_shipping_options";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get a Checkout
   * @description Returns a *Checkout*.
   *
   * **Notes**
   *
   * The cart ID and checkout ID are the same.
   */
  CheckoutsByCheckoutIdGet: {
    parameters: {
      query?: {
        /**
         * @description * `cart.line_items.physical_items.options` - physical options
         * * `cart.line_items.digital_items.options` - digital options
         * * `consignments.available_shipping_options` - shipping options
         * * `promotions.banners` - promotion options
         */
        include?: "cart.line_items.physical_items.options" | "cart.line_items.digital_items.options" | "consignments.available_shipping_options" | "promotions.banners";
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
          "example-1": unknown;
        };
      };
      /** @description Error code that is displayed when a given checkout ID is not found. */
      404: {
        content: {
          "application/json": {
            errors?: {
                /** Format: int32 */
                status?: number;
                title?: string;
                type?: string;
                detail?: string;
              }[];
          };
        };
      };
    };
  };
  /**
   * Update Customer Messages
   * @description Change customer message pertaining to an existing *Checkout*.
   *
   * **Limits:**
   * * 2000 characters for customer message
   */
  CheckoutsByCheckoutIdPut: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
    /** @description `customer_message` is required (maximum length is 2000). */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Checkout_Put"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
          "example-1": unknown;
        };
      };
    };
  };
  /**
   * Add Discount to Checkout
   * @description Adds a discount to an existing *checkout*.
   *
   * This discount only applies to `line_items`. When you call this API, you clear out all existing discounts applied to line items, including product and order-based discounts.
   *
   * This endpoint splits the discount between line items based on the item value.
   *
   * Required Fields
   * * discounted_amount
   */
  "post-store_hash-v3-checkouts-checkoutId-discounts": {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          cart?: {
            discounts?: {
                /** @example 10 */
                discounted_amount: number;
                /** @example manual */
                name?: string;
              }[];
          };
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
          "example-1": unknown;
        };
      };
    };
  };
  /**
   * Add Checkout Billing Address
   * @description Adds a billing address to an existing checkout.
   *
   * **Required Fields**
   * * email
   * * country_code
   */
  CheckoutsBillingAddressByCheckoutIdPost: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddressProperties"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
          "example-1": unknown;
        };
      };
    };
  };
  /**
   * Update Checkout Billing Address
   * @description Updates an existing billing address on a checkout.
   */
  CheckoutsBillingAddressByCheckoutIdAndAddressIdPut: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
        addressId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddressProperties"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
          "example-1": unknown;
        };
      };
    };
  };
  /**
   * Add Consignment to Checkout
   * @description Adds a new consignment to a checkout.
   *
   * For more information about working with consignments, see [Checkout consignment](/docs/storefront/cart-checkout/guide/consignments).
   *
   * Though the only required `address` properties to create a consignment are `email` and `country_code`, to successfully [create an order](/docs/rest-management/checkouts/checkout-orders#create-an-order) the `address` requires the following properties:
   * * `first_name`
   * * `last_name`
   * * `address1`
   * * `city`
   * * `country`
   * * `email`
   * * `country_code`
   *
   * Depending on the country, the following `address` properties may also be required:
   *
   * * `postal_code`
   * * `state_or_province`
   */
  CheckoutsConsignmentsByCheckoutIdPost: {
    parameters: {
      query?: {
        include?: "consignments.available_shipping_options";
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateConsignmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
          "example-1": unknown;
        };
      };
    };
  };
  /**
   * Update Checkout Consignment
   * @description Updates an existing consignment. The address, line item IDs, and shipping option ID can be updated using this endpoint.
   *
   * Use a separate `PUT` request to update the shipping option IDs if you also want to update the address and line item IDs.
   *
   * To add new shipping options, complete the following steps:
   * * Use the [Add Consignment to Checkout](/docs/rest-management/checkouts/checkout-consignments#add-consignment-to-checkout) endpoint to add a new [consignment] to a checkout.
   * * Assign a shipping option to the new consignment by sending a `PUT` request to update the consignment's `shipping_option_id` with a returned value from `data.consignments[N].available_shipping_option[N].id` obtained in the [Add Consignment to Checkout](/docs/rest-management/checkouts/checkout-consignments#add-consignment-to-checkout) endpoint.
   *
   * To update an existing address and line item IDs, assign a new address and line item IDs by sending a `PUT` request.
   */
  CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut: {
    parameters: {
      query?: {
        /** @description Include to get available shipping options. */
        include?: "consignments.available_shipping_options";
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
        consignmentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateConsignmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
          "example-1": unknown;
        };
      };
    };
  };
  /**
   * Delete Checkout Consignment
   * @description Removes an existing consignment from a checkout.
   *
   * Removing the last consignment will remove the cart from the customer it is assigned to. Create a new redirect URL for the customer so they can access the cart again.
   */
  CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
        consignmentId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
          "example-1": unknown;
        };
      };
    };
  };
  /**
   * Add Coupon to Checkout
   * @description Adds a coupon code to a checkout.
   *
   * **Required Fields**
   * * coupon_code
   *
   * **Limits**
   * * Coupon codes have a 50-character limit.
   */
  CheckoutsCouponsByCheckoutIdPost: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponCodeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
          "example-1": unknown;
        };
      };
    };
  };
  /**
   * Delete Checkout Coupon
   * @description Deletes a coupon code from a checkout.
   */
  CheckoutsCouponsByCheckoutIdAndCouponCodeDelete: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
        /** @description The actual coupon code value, not the coupon ID. */
        couponCode: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Checkout"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "Available Shipping Options": unknown;
          "Selected Shipping Options": unknown;
          "Coupon Applied": unknown;
          "No Coupon Applied": unknown;
          "Include promotions": unknown;
        };
      };
    };
  };
  /**
   * Create an Order
   * @description Creates an order.
   *
   * ## Usage notes
   * * Orders created will be set to incomplete order status.
   * * You can create as many orders from the same order (cart) as you want.
   * * Order duplication copies the existing order, assigns a new order number, and sets the new order status to `incomplete`.
   * * Once the order is paid, the cart is deleted.
   * * Cart deletion occurs if you are using BigCommerce to accept payments on orders.
   */
  createAnOrder: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Order"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Checkout Settings
   * @description Get checkout settings
   */
  GetCheckoutSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["CheckoutsSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "WebDAV protocol": unknown;
        };
      };
    };
  };
  /**
   * Update Checkout Settings
   * @description Update checkout settings
   */
  UpdateCheckoutSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CheckoutsSettingsRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["CheckoutsSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
          "WebDAV protocol": unknown;
        };
      };
    };
  };
  /**
   * Create Checkout Token
   * @description Use the checkout token to display a confirmation page for a guest shopper.
   * **Usage Notes** * The response from performing this POST request is a checkout token. * The checkout token is a single-use token that is not order-dependent. You cannot create this token after finalizing an order. * After completing the order, you can redirect the shopper to /order-confirmation/{orderId}?t={checkoutToken}. * After token validation, the /order-confirmation/{orderId} page displays. * The `ORDER_TOKEN` should match the order or the logged-in customer can access the order.
   */
  "checkout-token": {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["Content-Type"];
      };
      path: {
        checkoutId: components["parameters"]["checkoutId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @example 1 */
          maxUses?: number;
          /**
           * @description Time-to-live (TTL) is the number of seconds the token is set to exist before being discarded.
           * @example 86400
           */
          ttl?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            /** @example beb3590088be88f59ba980d54a68df655cd8a1052a3e9caf535f3f820146c226 */
            checkoutToken?: string;
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
      /** @description Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
      401: {
        content: {
          "application/json": {
            /**
             * Format: int32
             * @description The HTTP status code.
             * @example 401
             */
            status?: number;
            /**
             * @description The error title describing the particular error.
             * @example Unauthorized
             */
            title?: string;
            /**
             * @description A link to a list of BigCommerce API status codes.
             *
             * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
             */
            type?: string;
            errors?: Record<string, never>;
          };
        };
      };
      /** @description Invalid JSON request body - missing or invalid data. */
      422: {
        content: {
          "application/json": {
            /**
             * Format: int32
             * @description The HTTP status code.
             * @example 422
             */
            status?: string;
            /**
             * @description The error title describing the particular error.
             * @example Invalid input
             */
            title?: string;
            /**
             * @description A link to a list of BigCommerce API status codes.
             * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
             */
            type?: string;
          };
        };
      };
    };
  };
}
