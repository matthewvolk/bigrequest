// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/content/widget-templates": {
    /**
     * Get All Widget Templates
     * @description Returns a list of **Widget Templates**.
     */
    get: operations["getWidgetTemplates"];
    /**
     * Create a Widget Template
     * @description Creates a **Widget Template**.
     *
     * ***Note:*** *There is a limit of 1000 custom widget templates per store.*
     *
     * **Required Fields**
     * * name
     * * template
     */
    post: operations["createWidgetTemplate"];
  };
  "/content/widget-templates/{uuid}/preview": {
    /**
     * Render a Widget Template
     * @description Render a widget template and return the widget html.
     */
    post: operations["previewWidget"];
    parameters: {
      path: {
        /** @description The identifier for a specific widget. */
        uuid: string;
      };
    };
  };
  "/content/widget-templates/{uuid}": {
    /**
     * Get a Widget Template
     * @description Returns a single **Widget Template**.
     */
    get: operations["getWidgetTemplate"];
    /**
     * Update a Widget Template
     * @description Updates a **Widget Template**.
     */
    put: operations["updateWidgetTemplate"];
    /**
     * Delete A Widget Template
     * @description Deletes a **Widget Template**.
     */
    delete: operations["deleteWidgetTemplate"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["TemplateUUID"];
      };
    };
  };
  "/content/widgets": {
    /**
     * Get All Widgets
     * @description Returns a list of **Widgets**. Optional parameters can be passed in.
     */
    get: operations["getWidgets"];
    /**
     * Create a Widget
     * @description Creates a **Widget**.
     *
     * **Note:** There is a limit of 100,000 widgets per store and 150 widgets per page. For more information, see [Store Limits](https://support.bigcommerce.com/s/article/Platform-Limits#storelimits).
     */
    post: operations["createWidget"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/content/widgets/{uuid}": {
    /**
     * Get a Widget
     * @description Returns a single **Widget**.
     */
    get: operations["getWidget"];
    /**
     * Update a Widget
     * @description Updates a **Widget**.
     */
    put: operations["updateWidget"];
    /**
     * Delete a Widget
     * @description Deletes a **Widget**.
     */
    delete: operations["deleteWidget"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["WidgetUUID"];
      };
    };
  };
  "/content/placements": {
    /**
     * Get All Placements
     * @description Returns a list of **Placements**.
     */
    get: operations["getPlacements"];
    /**
     * Create a Placement
     * @description Creates a **Placement**.
     *
     * **Template Files**
     *
     * To view the list of values accepted by the `template_file` property, including **custom** templates, see [Placements](/api-docs/store-management/widgets/overview#placements).
     */
    post: operations["createPlacement"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/content/placements/{uuid}": {
    /**
     * Get a Placement
     * @description Returns a single **Placement**.
     */
    get: operations["getPlacement"];
    /**
     * Update a Placement
     * @description Updates a **Placement**.
     */
    put: operations["updatePlacement"];
    /**
     * Delete a Placement
     * @description Deletes a **Placement**.
     */
    delete: operations["deletePlacement"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["PlacementUUID"];
      };
    };
  };
  "/content/regions": {
    /**
     * Get Theme Regions
     * @description Returns a list of unique **Theme Regions** in a file.
     */
    get: operations["getContentRegions"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    WidgetTemplatePreview: {
      /**
       * Format: json
       * @description The JSON data that populates the template.
       */
      widget_configuration?: Record<string, never>;
    };
    WidgetTemplatePreviewResponse: {
      data?: {
        /**
         * Format: html
         * @description The HTML render of the widget template.
         */
        html?: string;
      };
    };
    /** widgetTemplate_Put */
    widgetTemplate_Put: components["schemas"]["widgetTemplate_Base"] & {
      /** @description Can be added to create a new widget template version instead of updating the current one. */
      create_new_version?: boolean;
      /** @description The id of the channel on which to place this template. */
      channel_id?: number;
    };
    /** widgetTemplate_Post */
    widgetTemplate_Post: {
      /** @description User-friendly name. */
      name: string;
      schema?: components["schemas"]["widgetSchema"];
      /**
       * Format: html
       * @description Handlebars HTML content. Also has access to Stencil Paper helpers.
       */
      template: string;
      /** @description The GraphQL Storefront API query that provides widget data. */
      storefront_api_query?: string;
      /** @description The id of the channel on which to create this template. Defaults to the first channel created on the store. */
      channel_id?: number;
    };
    /** widgetTemplate_Full */
    widgetTemplate_Full: components["schemas"]["widgetTemplate_Base"] & {
      /**
       * Format: uuid
       * @description The primary identifier.
       */
      uuid?: string;
      /** @description The kind of widget template. */
      kind?: string;
      /**
       * Format: datetime
       * @description The date on which this object was initially created.
       */
      date_created?: string;
      /**
       * Format: datetime
       * @description The date on which this object was last updated.
       */
      date_modified?: string;
      /** @description The identifier to the current version of this widget template. */
      current_version_uuid?: string;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.
       * @default default
       */
      icon_name?: string;
    };
    /** widget_Full */
    widget_Full: components["schemas"]["widget_Base"] & {
      /**
       * Format: uuid
       * @description The primary identifier.
       */
      uuid?: string;
      widget_template?: components["schemas"]["widgetTemplate_Full"];
      /**
       * Format: datetime
       * @description The date on which this object was initially created.
       */
      date_created?: string;
      /**
       * Format: datetime
       * @description The date on which this object was last updated.
       */
      date_modified?: string;
      /** @description The identifier of the widget template version associated with this widget. */
      version_uuid?: string;
      /** @description The ID of the channel on which this widget exists. */
      channel_id?: number;
    };
    /** widget_Post */
    widget_Post: {
      /** @description User friendly name. */
      name: string;
      /** @description The user-friendly description. */
      description?: string;
      /**
       * Format: json
       * @description The JSON data that populates the template.
       */
      widget_configuration?: Record<string, never>;
      /** @description The widget template UUID. */
      widget_template_uuid: string;
      /** @description The ID of the channel on which to create this widget. Defaults to the first channel created on the store. */
      channel_id?: number;
    };
    /** widget_Put */
    widget_Put: components["schemas"]["widget_Base"] & {
      /** @description The widget template UUID. */
      widget_template_uuid?: string;
      channel_id?: number;
      /** @description Upgrade the Widget to latest version of the WidgetTemplate. */
      upgrade?: boolean;
    };
    /** placement_Post */
    placement_Post: {
      /** @description A widget identifier. */
      widget_uuid: string;
      /** @description The template file that you would like to target. */
      template_file: string;
      /**
       * @description The id of the channel on which to create this placement. Defaults to the first channel created on the store.
       * @example 1
       */
      channel_id?: number;
    } & components["schemas"]["placement_Base"];
    /** placement_Put */
    placement_Put: {
      /** @description The template file that you would like to target. */
      template_file?: string;
      /** @description A widget identifier. */
      widget_uuid?: string;
      /** @description The ID of the channel on which this placement exists. */
      channel_id?: number;
    } & components["schemas"]["placement_Base"];
    /** placement_Full */
    placement_Full: {
      /**
       * Format: uuid
       * @description The primary identifier.
       */
      uuid?: string;
      /** @description The template file that you would like to target. */
      template_file?: string;
      /**
       * Format: datetime
       * @description The date on which this object was initially created.
       */
      date_created?: string;
      /**
       * Format: datetime
       * @description The date on which this object was last updated.
       */
      date_modified?: string;
      /** @description The ID of the channel on which this placement exists. */
      channel_id?: number;
    } & components["schemas"]["placement_Base"] & {
      widget?: components["schemas"]["widget_Full"];
    };
    /**
     * metaCollection
     * @description Data about the response, including pagination and collection totals.
     */
    metaCollection: {
      pagination?: components["schemas"]["pagination"];
    };
    /**
     * pagination
     * @description Data about the response, including pagination and collection totals.
     */
    pagination: {
      /** @description Total number of items in the result set. */
      total?: number;
      /** @description Total number of items in the collection response. */
      count?: number;
      /** @description The amount of items returned in the collection per page, controlled by the limit parameter. */
      per_page?: number;
      /** @description The page you are currently on within the collection. */
      current_page?: number;
      /** @description The total number of pages in the collection. */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /** @description Link to the current page returned in the response. */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    ErrorResponse: components["schemas"]["BaseError"] & {
      errors?: components["schemas"]["DetailedErrors"];
    };
    /**
     * error_Base
     * @description Error payload for the BigCommerce API.
     */
    error_Base: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
      errors?: Record<string, never>;
    };
    /** @description Error payload for the BigCommerce API. */
    BaseError: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /** Detailed Errors */
    DetailedErrors: {
      [key: string]: unknown;
    };
    /** themeRegion */
    themeRegion: {
      /** @description The region name. */
      name?: string;
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    Meta: {
      [key: string]: unknown;
    };
    /** placement_Base */
    placement_Base: {
      /** @description The identifier of a page you would like to target. For product pages, choose product ID. For category pages, choose category ID. Home page does not support `entity_id`. */
      entity_id?: string;
      /** @description The sort order to control the position of a content widget in a region. */
      sort_order?: number;
      /** @description The name of the region in which to insert content widgets. */
      region?: string;
      /**
       * @description Sets the placement as either inactive or active.
       * @default inactive
       * @enum {string}
       */
      status?: "inactive" | "active";
    };
    /** widgetTemplate_Base */
    widgetTemplate_Base: {
      /** @description The user-friendly name. */
      name?: string;
      schema?: components["schemas"]["widgetSchema"];
      /**
       * Format: html
       * @description The widget template HTML. Supports Handlebars and Paper helpers.
       */
      template?: string;
      /** @description The GraphQL Storefront API query that provides widget data. */
      storefront_api_query?: string;
    };
    /** widget_Base */
    widget_Base: {
      /** @description The user-friendly name. */
      name?: string;
      /** @description The user-friendly description. */
      description?: string;
      /**
       * Format: json
       * @description The JSON data that populates the template.
       */
      widget_configuration?: Record<string, never>;
    };
    "new-model": {
        type?: string;
        label?: string;
        id?: string;
        default?: number;
        typeMeta?: string;
        conditional?: components["schemas"]["widgetSchemaConditional"];
      }[];
    /**
     * widgetSchemaTab
     * @description **Tab.** Use the **tab** settings type to create settings visible in Page Builder.
     */
    widgetSchemaTab: {
      /**
       * @description The type of setting component to display.
       * @enum {string}
       */
      type?: "tab";
      /**
       * @description The user-friendly message to inform the user how this setting will be used.
       * @example Content
       */
      label?: string;
      /** @description Groups of related settings. */
      sections?: ({
          /**
           * @description The user-friendly message to inform the user how this setting will be used.
           * @example Product
           */
          label?: string;
          /** @description For examples of schema settings, see [Widget UI Input Types](/stencil-docs/page-builder/schema-settings). */
          settings?: ({
              /**
               * @description The type of setting component to display. You can view the list of elements below to discover which are available to use.
               *
               * For examples of each type of setting, see [Page Builder > Schema Settings](/stencil-docs/page-builder/schema-settings/alignment) in Theme Docs.
               * @enum {string}
               */
              type?: "alignment" | "boolean" | "boxModel" | "code" | "color" | "imageManager" | "input" | "number" | "productId" | "productImage" | "range" | "regexInput" | "select" | "text" | "toggle";
              /** @description The user friendly message to inform the user how this setting will be used. */
              label?: string;
              /** @description The variable name where the setting value will be available in the widget template. */
              id?: string;
              /** @description The default value to use when rendering the widget for the first time. Make sure to set sensible defaults to make your widget easier to use. */
              default?: string;
              /** @description Additional information needed based on the selected setting type. */
              typeMeta?: {
                selectOptions?: {
                    /** @example Image */
                    label?: string;
                    /** @example image */
                    value?: string;
                  }[];
              };
              /**
               * widgetSchemaConditional
               * @description An optional property that can be added to each setting to control whether it should be displayed to the user while editing in Page Builder. This does not clear the value in the setting, just controls the display of the setting.
               */
              conditional?: {
                /**
                 * @description The ID of the `setting` object the conditional attribute is related to.
                 * @example backgroundType
                 */
                key?: string;
                /**
                 * @description Specifies the operation used to determine whether to display the setting. The `IN` operator is currently the only supported operator. The setting will be displayed if the conditional’s `value` property is equal to the selected value of the `selectOptions`.
                 * @example IN
                 */
                operator?: string;
                /** @description A single-object array containing a value from the `typeMeta`'s `selectOptions`. */
                value?: unknown[];
              };
            })[];
        })[];
    };
    /** widgetSchemaTabSections */
    widgetSchemaTabSections: {
      label?: string;
      /** @description For examples of each type of setting, see [Page Builder > Schema Settings](/stencil-docs/page-builder/schema-settings/alignment) in Theme Docs. */
      settings?: components["schemas"]["widgetSchemaSetting_Base"][];
    };
    /**
     * widgetSchemaArray
     * @description **Array.** Use the **array** settings type to build collections of elements within the widget. Each element in the array can contain tabs, sections, and an entire schema.
     */
    widgetSchemaArray: {
      /** @enum {string} */
      type?: "array";
      label?: string;
      id?: string;
      /** @description number of elements in the list to display by default. */
      defaultCount?: number;
      /** @description name for each element in the list */
      entryLabel?: string;
      /** @description used to display an image stored at the specified attribute name */
      thumbnail?: {
        /** @example image */
        type?: string;
        /** @example imageUrl.src */
        valueKey?: string;
      };
      /** @description The schema used for each element in the array. */
      schema?: (components["schemas"]["widgetSchemaHidden"] | components["schemas"]["widgetSchemaTab"])[];
    };
    /**
     * widgetSchemaSetting_Base
     * @description For examples of each type of setting, see [Page Builder > Schema Settings](/stencil-docs/page-builder/schema-settings/alignment) in Theme Docs.
     */
    widgetSchemaSetting_Base: {
      /**
       * @description The type of setting component to display. You can view the list of elements below to discover which are available to use.
       *
       * For examples of each type of setting, see [Page Builder > Schema Settings](/stencil-docs/page-builder/schema-settings/alignment) in Theme Docs.
       * @enum {string}
       */
      type?: "alignment" | "boolean" | "boxModel" | "code" | "color" | "imageManager" | "input" | "number" | "productId" | "productImage" | "range" | "regexInput" | "select" | "text" | "toggle";
      /** @description The user friendly message to inform the user how this setting will be used. */
      label?: string;
      /** @description The variable name where the setting value will be available in the widget template. */
      id?: string;
      /** @description The default value to use when rendering the widget for the first time. Make sure to set sensible defaults to make your widget easier to use. */
      default?: string;
      /** @description Additional information needed based on the selected setting type. */
      typeMeta?: {
        selectOptions?: {
            /** @example Image */
            label?: string;
            /** @example image */
            value?: string;
          }[];
      };
      conditional?: components["schemas"]["widgetSchemaConditional"];
    };
    /** @description The schema for the widget’s merchant-facing UI. For more information on the available schema settings, see [Widget UI Schema](/stencil-docs/page-builder/widget-ui-schema). */
    widgetSchema: (components["schemas"]["widgetSchemaTab"] | components["schemas"]["widgetSchemaArray"] | components["schemas"]["widgetSchemaHidden"])[];
    /**
     * widgetSchemaHidden
     * @description **Hidden.** Use the **hidden** settings type to create controls that have no user interface drawn in Page Builder. Hidden settings are not grouped into any other tabs or arrays.
     */
    widgetSchemaHidden: {
      /**
       * @example hidden
       * @enum {string}
       */
      type?: "hidden";
      settings?: ({
          /**
           * @description The type of setting component to display. You can view the list of elements below to discover which are available to use.
           *
           * For examples of each type of setting, see [Page Builder > Schema Settings](/stencil-docs/page-builder/schema-settings/alignment) in Theme Docs.
           * @enum {string}
           */
          type?: "alignment" | "boolean" | "boxModel" | "code" | "color" | "imageManager" | "input" | "number" | "productId" | "productImage" | "range" | "regexInput" | "select" | "text" | "toggle";
          /** @description The user friendly message to inform the user how this setting will be used. */
          label?: string;
          /** @description The variable name where the setting value will be available in the widget template. */
          id?: string;
          /** @description The default value to use when rendering the widget for the first time. Make sure to set sensible defaults to make your widget easier to use. */
          default?: string;
          /** @description Additional information needed based on the selected setting type. */
          typeMeta?: {
            selectOptions?: {
                /** @example Image */
                label?: string;
                /** @example image */
                value?: string;
              }[];
          };
          /**
           * widgetSchemaConditional
           * @description An optional property that can be added to each setting to control whether it should be displayed to the user while editing in Page Builder. This does not clear the value in the setting, just controls the display of the setting.
           */
          conditional?: {
            /**
             * @description The ID of the `setting` object the conditional attribute is related to.
             * @example backgroundType
             */
            key?: string;
            /**
             * @description Specifies the operation used to determine whether to display the setting. The `IN` operator is currently the only supported operator. The setting will be displayed if the conditional’s `value` property is equal to the selected value of the `selectOptions`.
             * @example IN
             */
            operator?: string;
            /** @description A single-object array containing a value from the `typeMeta`'s `selectOptions`. */
            value?: unknown[];
          };
        })[];
    };
    /** widgetSchemaTabSectionsSettings */
    widgetSchemaTabSectionsSettings: Record<string, never>;
    /**
     * widgetSchemaConditional
     * @description An optional property that can be added to each setting to control whether it should be displayed to the user while editing in Page Builder. This does not clear the value in the setting, just controls the display of the setting.
     */
    widgetSchemaConditional: {
      /**
       * @description The ID of the `setting` object the conditional attribute is related to.
       * @example backgroundType
       */
      key?: string;
      /**
       * @description Specifies the operation used to determine whether to display the setting. The `IN` operator is currently the only supported operator. The setting will be displayed if the conditional’s `value` property is equal to the selected value of the `selectOptions`.
       * @example IN
       */
      operator?: string;
      /** @description A single-object array containing a value from the `typeMeta`'s `selectOptions`. */
      value?: unknown[];
    };
  };
  responses: {
    ThemeRegions_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["themeRegion"][];
          meta?: components["schemas"]["Meta"];
        };
      };
    };
    LayoutCollectionResponse: {
      content: {
        "application/json": {
          data?: {
              /**
               * Format: uuid
               * @description The primary identifier.
               */
              uuid?: string;
              /** @description The specific instance of a page */
              entity_id?: string;
              /** @description The page template name. */
              template_file?: string;
              /** @description The name of the region defined in the Stencil theme file. */
              region?: string;
              /** @description The HTML layout which defines complex positioning for placements. */
              markup?: string;
              /**
               * Format: datetime
               * @description The date on which this object was initially created.
               */
              date_created?: string;
              /**
               * Format: datetime
               * @description The date on which this object was last updated.
               */
              date_modified?: string;
            }[];
          /**
           * Collection Meta
           * @description Data about the response, including pagination and collection totals.
           */
          meta?: {
            /** @description Data about the response, including pagination and collection totals. */
            pagination?: {
              /** @description Total number of items in the result set. */
              total?: number;
              /** @description Total number of items in the collection response. */
              count?: number;
              /** @description The amount of items returned in the collection per page, controlled by the limit parameter. */
              per_page?: number;
              /** @description The page you are currently on within the collection. */
              current_page?: number;
              /** @description The total number of pages in the collection. */
              total_pages?: number;
              /** @description Pagination links for the previous and next parts of the whole collection. */
              links?: {
                /** @description Link to the previous page returned in the response. */
                previous?: string;
                /** @description Link to the current page returned in the response. */
                current?: string;
                /** @description Link to the next page returned in the response. */
                next?: string;
              };
            };
          };
        };
      };
    };
    LayoutResponse: {
      content: {
        "application/json": {
          data?: {
              /**
               * Format: uuid
               * @description The primary identifier.
               */
              uuid?: string;
              /** @description The specific instance of a page */
              entity_id?: string;
              /** @description The page template name. */
              template_file?: string;
              /** @description The name of the region defined in the Stencil theme file. */
              region?: string;
              /** @description The HTML layout which defines complex positioning for placements. */
              markup?: string;
              /**
               * Format: datetime
               * @description The date on which this object was initially created.
               */
              date_created?: string;
              /**
               * Format: datetime
               * @description The date on which this object was last updated.
               */
              date_modified?: string;
            }[];
        };
      };
    };
    PlacementsCollection_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["placement_Full"][];
          meta?: components["schemas"]["metaCollection"];
        };
      };
    };
    Placement_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["placement_Full"];
          meta?: components["schemas"]["Meta"];
        };
      };
    };
    WidgetTemplateCollection_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["widgetTemplate_Full"][];
          meta?: components["schemas"]["metaCollection"];
        };
      };
    };
    WidgetTemplate_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["widgetTemplate_Full"];
        } & {
          meta?: components["schemas"]["Meta"];
        };
      };
    };
    WidgetCollection_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["widget_Full"][];
          meta?: components["schemas"]["metaCollection"];
        };
      };
    };
    Widget_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["widget_Full"];
          meta?: components["schemas"]["Meta"];
        };
      };
    };
    /** @description This is the result of missing required fields, or of invalid data. See the response for more details. */
    Error422_Resp: {
      content: {
        "application/json": components["schemas"]["error_Base"];
      };
    };
    /** @description The resource was not found. */
    Error404_Resp: {
      content: {
        "application/json": components["schemas"]["error_Base"];
      };
    };
  };
  parameters: {
    /** @description The identifier for a specific template. */
    TemplateUUID: string;
    /** @description The identifier for a specific widget template. */
    FilterWidgetTemplateUUIDParam?: string;
    /** @description The kind of widget template. */
    FilterWidgetTemplateKindParam?: string;
    /** @description The template file, for example: `pages/home`. */
    FilterTemplateFileParam?: string;
    /** @description The template file, for example: `templateFile=pages/home`. */
    RequiredTemplateFile: string;
    /** @description The identifier for a specific layout. */
    LayoutUUID: string;
    /** @description The identifier for a specific placement. */
    PlacementUUID: string;
    /** @description The identifier for a specific widget. */
    WidgetUUID: string;
    /** @description The identifier for a specific widget. */
    FilterWidgetUUIDParam?: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam?: number;
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
    /** @description The query string associated with a widget's name and description. */
    QueryWidgetsParam?: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description A comma-separated list of channel ids to filter the results by. */
    ChannelIDInParam?: string;
    /** @description A comma-separated list of site IDs to filter the results by. */
    SiteIDInParam?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Widget Templates
   * @description Returns a list of **Widget Templates**.
   */
  getWidgetTemplates: {
    parameters: {
      query?: {
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description The kind of widget template. */
        widget_template_kind?: string;
        /** @description Filter items by channel_id. */
        "channel_id:in"?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    responses: {
      200: components["responses"]["WidgetTemplateCollection_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Create a Widget Template
   * @description Creates a **Widget Template**.
   *
   * ***Note:*** *There is a limit of 1000 custom widget templates per store.*
   *
   * **Required Fields**
   * * name
   * * template
   */
  createWidgetTemplate: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["widgetTemplate_Post"];
      };
    };
    responses: {
      200: components["responses"]["WidgetTemplate_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Render a Widget Template
   * @description Render a widget template and return the widget html.
   */
  previewWidget: {
    parameters: {
      path: {
        /** @description The identifier for a specific widget. */
        uuid: string;
        uuid: components["parameters"]["TemplateUUID"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WidgetTemplatePreview"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["WidgetTemplatePreviewResponse"];
        };
      };
      /** @description Not Found */
      404: never;
      /** @description Unprocessable Entity */
      422: never;
    };
  };
  /**
   * Get a Widget Template
   * @description Returns a single **Widget Template**.
   */
  getWidgetTemplate: {
    parameters: {
      query?: {
        /** @description This is an optional query parameter used to attempt to fetch a specific Widget Template version. */
        version_uuid?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["TemplateUUID"];
      };
    };
    responses: {
      200: components["responses"]["WidgetTemplate_Resp"];
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Update a Widget Template
   * @description Updates a **Widget Template**.
   */
  updateWidgetTemplate: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        uuid: components["parameters"]["TemplateUUID"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["widgetTemplate_Put"];
      };
    };
    responses: {
      200: components["responses"]["WidgetTemplate_Resp"];
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Delete A Widget Template
   * @description Deletes a **Widget Template**.
   */
  deleteWidgetTemplate: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["TemplateUUID"];
      };
    };
    responses: {
      /** @description An empty response. */
      204: never;
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Get All Widgets
   * @description Returns a list of **Widgets**. Optional parameters can be passed in.
   */
  getWidgets: {
    parameters: {
      query?: {
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description The kind of widget template. */
        widget_template_kind?: string;
        /** @description The identifier for a specific widget template. */
        widget_template_uuid?: string;
        /** @description The URL encoded name of the widget. */
        name?: string;
        /** @description Use to pass in comma-separated list of widget names. Example: `/widgets?name:in=test-widget-name,header%20images` */
        "name:in"?: unknown[];
        /** @description Filter items by channel_id. */
        "channel_id:in"?: number;
        /** @description A comma-separated list of site ids to filter the results by. */
        "site_id:in"?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["WidgetCollection_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Create a Widget
   * @description Creates a **Widget**.
   *
   * **Note:** There is a limit of 100,000 widgets per store and 150 widgets per page. For more information, see [Store Limits](https://support.bigcommerce.com/s/article/Platform-Limits#storelimits).
   */
  createWidget: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["widget_Post"];
      };
    };
    responses: {
      200: components["responses"]["Widget_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Get a Widget
   * @description Returns a single **Widget**.
   */
  getWidget: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["WidgetUUID"];
      };
    };
    responses: {
      200: components["responses"]["Widget_Resp"];
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Update a Widget
   * @description Updates a **Widget**.
   */
  updateWidget: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        uuid: components["parameters"]["WidgetUUID"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["widget_Put"];
      };
    };
    responses: {
      200: components["responses"]["Widget_Resp"];
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Delete a Widget
   * @description Deletes a **Widget**.
   */
  deleteWidget: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["WidgetUUID"];
      };
    };
    responses: {
      /** @description An empty response. */
      204: never;
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Get All Placements
   * @description Returns a list of **Placements**.
   */
  getPlacements: {
    parameters: {
      query?: {
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description The kind of widget template. */
        widget_template_kind?: string;
        /** @description The template file, for example: `pages/home`. */
        template_file?: string;
        /** @description The identifier for a specific widget. */
        widget_uuid?: string;
        /** @description The identifier for a specific widget template. */
        widget_template_uuid?: string;
        "channel_id:in"?: components["parameters"]["ChannelIDInParam"];
        "site_id:in"?: components["parameters"]["SiteIDInParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["PlacementsCollection_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Create a Placement
   * @description Creates a **Placement**.
   *
   * **Template Files**
   *
   * To view the list of values accepted by the `template_file` property, including **custom** templates, see [Placements](/api-docs/store-management/widgets/overview#placements).
   */
  createPlacement: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["placement_Post"];
      };
    };
    responses: {
      200: components["responses"]["Placement_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Get a Placement
   * @description Returns a single **Placement**.
   */
  getPlacement: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["PlacementUUID"];
      };
    };
    responses: {
      200: components["responses"]["Placement_Resp"];
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Update a Placement
   * @description Updates a **Placement**.
   */
  updatePlacement: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        uuid: components["parameters"]["PlacementUUID"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["placement_Put"];
      };
    };
    responses: {
      200: components["responses"]["Placement_Resp"];
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Delete a Placement
   * @description Deletes a **Placement**.
   */
  deletePlacement: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["PlacementUUID"];
      };
    };
    responses: {
      /** @description An empty response. */
      204: never;
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
  /**
   * Get Theme Regions
   * @description Returns a list of unique **Theme Regions** in a file.
   */
  getContentRegions: {
    parameters: {
      query: {
        /** @description The template file, for example: `templateFile=pages/home`. */
        template_file: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["ThemeRegions_Resp"];
      404: components["responses"]["Error404_Resp"];
      422: components["responses"]["Error422_Resp"];
    };
  };
}
