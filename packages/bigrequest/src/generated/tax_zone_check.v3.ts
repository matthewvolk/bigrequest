// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/tax/zonecheck": {
    /**
     * Check zone given an address.
     * @description Check the applicable tax zone for a given address and customer group.
     */
    post: operations["zone-check"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ZoneCheck: {
      /**
       * @description Two-letter ISO 3166-1 country code.
       * @example AU
       */
      country_code: string;
      /**
       * @description ISO 3166-2 subdivision code, up to three alphanumeric characters.
       * @example NSW
       */
      subdivision_codes?: string;
      /**
       * @description Postal code.
       * @example 2099
       */
      postal_code?: string;
      /**
       * @description Customer Group ID to which the customer is belongs.
       * @example 0
       */
      customer_group_id?: number;
    };
    TaxZone: {
      /**
       * @description Tax Zone ID. Internal identifier used to get, update, or delete a specific tax zone.
       * @example 1
       */
      id?: number;
      /**
       * @description The human-readable name for this tax zone. The name displays on the merchant's control panel.
       * @example Australia
       */
      name?: string;
      /**
       * @description Indicates whether a tax zone is enabled. Tax operations are only for enabled zones.
       * @default true
       */
      enabled?: boolean;
      /** @description Settings that describe how a store displays prices to shoppers matched with this tax zone. */
      price_display_settings?: {
        /** @description Indicates whether to show prices as tax inclusive or tax exclusive to shoppers matched with this tax zone. */
        show_inclusive?: boolean;
        /** @description Indicates whether to show both tax inclusive and tax exclusive prices when viewing product detail; for example, on product pages. This view applies to shoppers matched with this tax zone. */
        show_both_on_detail_view?: boolean;
        /** @description Indicates whether to show both tax inclusive and tax exclusive prices when viewing a list of products; for example, on category and brand pages. This view applies to shoppers matched with this tax zone. */
        show_both_on_list_view?: boolean;
      };
      /** @description Settings that describe which shoppers match this tax zone and help determine the most appropriate target for a shopper. You cannot define shopper target settings for the default tax zone because it must accommodate all shoppers who don ºt qualify for any other zone. */
      shopper_target_settings?: {
        /** @description A tax zone may target shoppers in one or more locations. */
        locations?: {
            /**
             * @description Two-letter ISO 3166-1 country code
             * @example AU
             */
            country_code?: string;
            /**
             * @description Three-letter ISO 3166-2 subdivision code
             * @example [
             *   "NSW",
             *   "QLD"
             * ]
             */
            subdivision_codes?: string[];
            /**
             * @example [
             *   "2234",
             *   "2170"
             * ]
             */
            postal_codes?: string[];
          }[];
        /** @description One or more customer groups that a tax zone targets. Empty array if zone applies to all customers. */
        customer_groups?: number[];
      };
    };
  };
  responses: never;
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Check zone given an address.
   * @description Check the applicable tax zone for a given address and customer group.
   */
  "zone-check": {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ZoneCheck"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["TaxZone"][];
          };
        };
      };
      /** @description The request body does not meet specifications. */
      422: {
        content: never;
      };
    };
  };
}
