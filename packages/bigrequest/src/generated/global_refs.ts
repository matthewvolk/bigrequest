// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users/{userId}": {
    /**
     * Get User Info by User ID
     * @description Retrieve the information of the user with the matching user ID.
     */
    get: operations["getUser"];
    /**
     * Update User Information
     * @description Update the information of an existing user.
     */
    patch: operations["updateUser"];
    parameters: {
      path: {
        /** @description Id of an existing user. */
        userId: number;
      };
    };
  };
  "/user": {
    /**
     * Create New User
     * @description Create a new user.
     */
    post: operations["createUser"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * User
     * @example {
     *   "id": 142,
     *   "firstName": "Alice",
     *   "lastName": "Smith",
     *   "email": "alice.smith@gmail.com",
     *   "dateOfBirth": "1997-10-31",
     *   "emailVerified": true,
     *   "signUpDate": "2019-08-24"
     * }
     */
    User: {
      /** @description Unique identifier for the given user. */
      id: number;
      firstName: string;
      lastName: string;
      /** Format: email */
      email: string;
      /**
       * Format: date
       * @example 1997-10-31
       */
      dateOfBirth?: string;
      /** @description Set to true if the user's email has been verified. */
      emailVerified: boolean;
      /**
       * Format: date
       * @description The date that the user was created.
       */
      createDate?: string;
    };
    /**
     * meta_Empty
     * @description Response metadata.
     */
    meta_Empty: {
      [key: string]: unknown;
    };
  };
  responses: never;
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get User Info by User ID
   * @description Retrieve the information of the user with the matching user ID.
   */
  getUser: {
    parameters: {
      path: {
        /** @description Id of an existing user. */
        userId: number;
      };
    };
    responses: {
      /** @description User Found */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description User Not Found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update User Information
   * @description Update the information of an existing user.
   */
  updateUser: {
    parameters: {
      path: {
        /** @description Id of an existing user. */
        userId: number;
      };
    };
    /** @description Patch user properties to update. */
    requestBody?: {
      content: {
        "application/json": {
          firstName?: string;
          lastName?: string;
          /** @description If a new email is given, the user ºs email verified property will be set to false. */
          email?: string;
          dateOfBirth?: string;
        };
      };
    };
    responses: {
      /** @description User Updated */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description User Not Found */
      404: {
        content: never;
      };
      /** @description Email Already Taken */
      409: {
        content: never;
      };
    };
  };
  /**
   * Create New User
   * @description Create a new user.
   */
  createUser: {
    /** @description Post the necessary fields for the API to create a new user. */
    requestBody?: {
      content: {
        "application/json": {
          firstName: string;
          lastName: string;
          email: string;
          /** Format: date */
          dateOfBirth: string;
        };
      };
    };
    responses: {
      /** @description User Created */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Missing Required Information */
      400: {
        content: never;
      };
      /** @description Email Already Taken */
      409: {
        content: never;
      };
    };
  };
}
