// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/orders/{order_id}": {
    /**
     * Get an Order
     * @description Gets an *Order*. To learn more about creating or updating orders, see [Orders Overview](/docs/store-operations/orders).
     */
    get: operations["getOrder"];
    /**
     * Update an Order
     * @description Updates an *Order*.
     *
     * To add a product to an existing order, don't include `id` in the body. Include `product_options` if adding a product with variants.
     *
     * To update a product in an order, include `id` in the body. The body should only contain the fields that need to be updated. Those fields that are omitted will not be changed.
     *
     * To remove a product from an order, set that productâ€™s `quantity` to `0`.
     *
     * To learn more about creating or updating orders, see [Orders Overview](/docs/store-operations/orders).
     */
    put: operations["updateOrder"];
    /**
     * Archive an Order
     * @description Archives an order. To remove a single product from an order, see `PUT /orders/{order_id}`.
     */
    delete: operations["deleteOrder"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  "/orders/count": {
    /**
     * Get a Count of Orders
     * @description Gets an array of orders in the store organized by order status.
     */
    get: operations["getOrdersCount"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/orders": {
    /**
     * Get All Orders
     * @description Gets a list of orders using the filter query.
     *
     * **Notes**
     *
     * * The default sort is by order id, from lowest to highest.
     * * By default, requests sent without parameters will only return 50 orders.
     */
    get: operations["getOrders"];
    /**
     * Create an Order
     * @description Creates an *Order*. To learn more about creating or updating orders, see [Orders Overview](/docs/store-operations/orders).
     *
     * Create an order with an existing catalog product or a custom product.
     *
     * **Required Fields**
     *
     * * `products` or `consignments`
     * * `billing_address`
     *
     * When you create an order, the `consignment(s)` array allows you to create pickup consignments.
     * - An order can have either a pickup or a shipping fulfillment method, but not both.
     * - An order can have only one pickup consignment.
     *
     * Choose from one of the following:
     * 1. Create order with a shipping fulfillment method using `shipping_addresses` and `products`, i.e. legacy mode
     * 2. Create order with a pickup fulfillment method using `consignments`, i.e. Consignment mode
     *
     * You can fulfill an order with shipping or pickup, but not both.
     *
     * This means that if the `consignments` array is present in the request, then _none_ of the following may be present and vice-versa:
     * - `shipping_addresses`
     * - `products`
     */
    post: operations["createOrder"];
    /**
     * Delete All Orders
     * @description Archives all orders.
     */
    delete: operations["deleteOrders"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/orders/{order_id}/coupons": {
    /**
     * List Order Coupons
     * @description Lists all order coupons. Optional parameters can be passed in.
     *
     * |Type `int`|Type Name|
     * |-|-|
     * |`0`|`per_item_discount`|
     * |`1`|`percentage_discount`|
     * |`2`|`per_total_discount`|
     * |`3`|`shipping_discount`|
     * |`4`|`free_shipping`|
     * |`5`|`promotion`|
     */
    get: operations["getOrderCoupons"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  "/orders/{order_id}/products": {
    /**
     * List Order Products
     * @description Lists 50 order products on an order using `order_id`. By default, items sort from lowest to highest according to a newly created ID, separate from the `order_id` and the `product_id`.
     */
    get: operations["getOrderProducts"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  "/orders/{order_id}/shipping_addresses": {
    /**
     * Get Order Shipping Addresses
     * @description Get all shipping addresses on an order using the `order_id`.
     *
     * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
     */
    get: operations["getOrderShippingAddresses"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  "/order_statuses": {
    /**
     * Get All Order Statuses
     * @description Returns a Collection of All Order Statuses.
     *
     * **Order Status Descriptions:**
     * |Status ID | Name  | Description |
     * |--|--|--|
     * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
     * | 1 | Pending |Customer started the checkout process, but did not complete it. |
     * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
     * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
     * | 4 | Refunded | Seller has used the Refund action. |
     * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
     * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
     * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
     * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
     * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
     * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
     * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
     * | 12 | Manual Verification Required | Order is on hold while some aspect needs to be manually confirmed. |
     * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
     * | 14 | Partially Refunded | Seller has partially refunded the order. |
     */
    get: operations["getOrderStatuses"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/order_statuses/{status_id}": {
    /**
     * Get a Single Order Status by ID
     * @description Returns a single order status.
     *
     * **Order Status Descriptions**
     * |Status ID | Name  | Description |
     * |:--|:--|:--|
     * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
     * | 1 | Pending |Customer started the checkout process, but did not complete it. |
     * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
     * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
     * | 4 | Refunded | Seller has used the Refund action. |
     * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
     * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
     * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
     * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
     * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
     * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
     * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
     * | 12 | Manual Verification Required | Order is on hold while some aspect needs to be manually confirmed. |
     * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
     * | 14 | Partially Refunded | Seller has partially refunded the order. |
     */
    get: operations["getOrderStatusesStatus"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        status_id: components["parameters"]["status_id_path"];
      };
    };
  };
  "/orders/{order_id}/taxes": {
    /**
     * Get All Order Taxes
     * @description Gets all order taxes using `order_id`.
     * Each tax applied to an order. This information can be useful for reporting purposes.
     * Pass in the query parameter `?details=true` to return extra details about order taxes.
     * `order_product_id` and `line_item_type` are also returned.
     *
     * All values are read-only.
     */
    get: operations["getOrderTaxes"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  "/orders/{order_id}/shipments": {
    /**
     * Get Order Shipments
     * @description Gets a list of all shipments on an order.
     */
    get: operations["getOrderShipments"];
    /**
     * Create Order Shipment
     * @description Creates an *Order Shipment*. For more details, see [Shipping an Order](/docs/store-operations/orders#creating-order-shipments).
     *
     * **Required Fields**
     * *   order_address_id
     * *   items
     *
     * **Usage notes**
     *
     * There are three methods for generating a tracking link for a shipment:
     *
     * 1. Use `shipping_provider` and `tracking_number`: This generates an automatic tracking link that you can click from the BigCommerce control panel and customer-facing emails. The `generated_tracking_link` property in the API response represents this tracking link. The `tracking_link` property in the API response will remain empty.
     *
     * 2. Use `tracking_carrier` and `tracking_number`: This also creates an automatic tracking link that you can click in both the BigCommerce control panel and customer-facing emails. Like the previous method, the `generated_tracking_link` property in the API response represents this tracking link. The `tracking_link` property in the API response will remain empty.
     *
     * 3. Supply a custom `tracking_link`: By providing a value for the `tracking_link` property, you can use your own tracking link within the BigCommerce control panel and in customer-facing emails. The API response will return your supplied tracking link as part of the `tracking_link` property in the response. In situations when there isn't a `generated_tracking_link`, the property in the API response will remain empty.
     *
     * Acceptable values for `shipping_provider` include an empty string (`""`), `auspost`, `carrier_{your_carrier_id}` (only used if the carrier is a [third-party Shipping Provider](/docs/integrations/shipping)), `canadapost`, `endicia`, `usps`, `fedex`, `royalmail`, `ups`, `upsready`, `upsonline`, or `shipperhq`.
     *
     * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid [tracking-carrier values](https://github.com/bigcommerce/dev-docs/blob/master/assets/csv/tracking_carrier_values.csv).
     */
    post: operations["createOrderShipments"];
    /**
     * Delete Order Shipments
     * @description Deletes all shipments associated with an order.
     */
    delete: operations["deleteOrderShipments"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  "/orders/{order_id}/shipments/count": {
    /**
     * Get Count of Order Shipments
     * @description Gets a count of the number of shipments that have been made for a single order.
     */
    get: operations["getOrderShipmentsCount"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  "/orders/{order_id}/shipments/{shipment_id}": {
    /**
     * Get a Shipment
     * @description Gets an order shipment.
     */
    get: operations["getOrderShipment"];
    /**
     * Update a Shipment
     * @description Updates an existing shipment associated with an order.
     */
    put: operations["updateOrderShipment"];
    /**
     * Delete an Order Shipment
     * @description Deletes a shipment associated with an order.
     */
    delete: operations["deleteOrderShipment"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        shipment_id: components["parameters"]["shipment_id_path"];
      };
    };
  };
  "/orders/{order_id}/messages": {
    /**
     * Get Order Messages
     * @description Gets the messages associated with an order.
     */
    get: operations["getOrderMessages"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
  };
  "/orders/{order_id}/products/{product_id}": {
    /**
     * Get an Order Product
     * @description Gets a product line item associated with the order.
     */
    get: operations["getOrderProduct"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        product_id: components["parameters"]["product_id_path"];
      };
    };
  };
  "/orders/{order_id}/shipping_addresses/{id}": {
    /**
     * Get a Shipping Address
     * @description Gets a shipping address associated with an order.
     *
     * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
     */
    get: operations["getOrderShippingAddress"];
    /**
     * Update a Shipping Address
     * @description Update a shipping address associated with an order.
     *
     * **Note**: Updating a shipping address will NOT trigger the recalculation of shipping cost and tax
     */
    put: operations["updateOrderShippingAddress"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        /** @description Shipping address ID. */
        id: string;
      };
    };
  };
  "/orders/{order_id}/shipping_addresses/{shipping_address_id}/shipping_quotes": {
    /**
     * Get Order Shipping Quotes
     * @description Gets all shipping quotes persisted on an order.
     *
     * This is a read-only endpoint and the output can vary based on the shipping quote. A shipping quote can only be generated using the storefront at this time. Orders that are created in the control panel or using the API return a 204 for this endpoint since a shipping quote is not generated during that process.
     */
    get: operations["getOrderShippingAddressShippingQuotes"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        shipping_address_id: components["parameters"]["shipping_address_id_path"];
      };
    };
  };
  "/orders/{order_id}/consignments": {
    /**
     * Get Consignments
     * @description Get all consignments for an order.
     */
    get: operations["getOrderConsignments"];
    parameters: {
      query?: {
        /** @description * `consignments.line_items` - include the response returned from the request to the `/orders/{order_id}/products` endpoint in consignments. */
        include?: "consignments.line_items";
      };
      path: {
        order_id: string;
      };
    };
  };
  "/orders/{order_id}/consignments/shipping/{shipping_consignment_id}/shipping_quotes": {
    /**
     * Get Consignment Shipping Quotes
     * @description Get all shipping quotes persisted on an order for a shipping consignment.
     * This is a read-only endpoint whose response depends on the shipping quote. You can only generate a shipping quote using the storefront at this time. Orders that are created in the control panel, or using the API, return a 204 status response since you can't generate a shipping quote during that process.
     */
    get: operations["getOrderConsignmentShippingQuotes"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * order_Resp
     * @description Order object returned in responses.
     */
    order_Resp: components["schemas"]["order_RespOnly"] & components["schemas"]["order_Shared"];
    /** ordersCount_Full */
    ordersCount_Full: {
      statuses?: components["schemas"]["ordersCountStatus"][];
      /**
       * @description Total number of orders in the store.
       * @example 45
       */
      count?: number;
    };
    /** orderCoupons_Base */
    orderCoupons_Base: {
      /**
       * @description Numeric ID of the coupon code.
       * @example 3
       */
      id?: number;
      /**
       * @description Numeric ID of the associated coupon.
       * @example 1
       */
      coupon_id?: number;
      /**
       * @description Numeric ID of the associated order.
       * @example 120
       */
      order_id?: number;
      /**
       * @description Coupon code, as a string.
       * @example S2549JM0Y
       */
      code?: string | null;
      /**
       * Format: float
       * @description Amount of the discount. This information is returned as in integer. Dollar and percentage discounts will return the same. For example, $3 returns as `3` while 5% will return as `5`. Check the discount type to see what type of discount is available.
       * @example 5
       */
      amount?: string | number;
      /**
       * Order Coupon Discount Type
       * @description 0: per_item_discount
       * 1: percentage_discount
       * 2: per_total_discount
       * 3: shipping_discount
       * 4: free_shipping
       * 5: promotions
       * @enum {integer}
       */
      type?: 0 | 1 | 2 | 3 | 4 | 5;
      /**
       * @description The amount off the order the discount is worth. For example, if an order subtotal is $90 and the discount is $3 then it will return as 3.000. If the discount is
       * 3% then will return as 2.7000 or the amount of the order. (Float, Float-As-String, Integer)
       * @example 2.7
       */
      discount?: number;
    };
    /** orderProducts */
    orderProducts: {
      /**
       * @description Numeric ID of this product within this order.
       * @example 25
       */
      id?: number;
      /**
       * @description Numeric ID of the associated order.
       * @example 120
       */
      order_id?: number;
      /**
       * @description Numeric ID of the product.
       * @example 20
       */
      product_id?: number;
      /**
       * @description ID of the pickup fulfillment method for this item. Default value is 0 when the item is not fulfilled by pickup method.
       * @example 0
       */
      order_pickup_method_id?: number;
      /**
       * @description Numeric ID of the associated order address. Value is `0` for items that are not fulfilled by a pickup method.
       * @example 20
       */
      order_address_id?: number;
      /**
       * @description Alias for name_customer - The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name?: string;
      /**
       * @description User-defined product code/stock keeping unit (SKU).
       * @example S-GREE
       */
      sku?: string;
      /**
       * @description Type of product.
       * @example physical
       * @enum {string}
       */
      type?: "physical" | "digital";
      /**
       * @description The productâ€™s base price. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      base_price?: string;
      /**
       * @description The productâ€™s price excluding tax. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      price_ex_tax?: string;
      /**
       * @description The productâ€™s price including tax. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      price_inc_tax?: string;
      /**
       * @description Amount of tax applied to a single product.
       *
       * Price tax is calculated as:
       * `price_tax = price_inc_tax - price_ex_tax`
       *
       * (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      price_tax?: string;
      /**
       * @description Total base price. (Float, Float-As-String, Integer)
       *
       * **Note**: The `base_total` is affected by the tax options set up in the control panel and is altered on tax-free orders. See more details on how `base_total` is affected by visiting the [Responsive Tax Display Settings](https://support.bigcommerce.com/s/article/Manual-Tax-Setup) overview. If the `base_total` is `$0`, it's due to the store's tax settings. To learn more about tax settings in the control panel, check out this [Tax Settings](https://support.bigcommerce.com/s/article/Tax-Overview?language=en_US#tax-settings) support article.
       * @example 54.0000
       */
      base_total?: string;
      /**
       * @description Total base price excluding tax. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      total_ex_tax?: string;
      /**
       * @description Total base price including tax. (Float, Float-As-String, Integer)
       * @example 54.0000
       */
      total_inc_tax?: string;
      /**
       * @description Total tax applied to products.
       * For example, if quantity if 2, base price is 5 and tax rate is 10%. price_tax will be $.50 and total_tax will be $1.00.
       *
       * If there is a manual discount applied total_tax is calculated as the following:
       * `(price_ex_tax - discount)*tax_rate=total_tax`.
       * (Float, Float-As-String, Integer)
       * @example 0.5200
       */
      total_tax?: string;
      /**
       * @description Quantity of the product ordered.
       * @example 1
       */
      quantity?: number;
      /**
       * @description The productâ€™s cost price.  This can be set using the Catalog API. (Float, Float-As-String, Integer)
       * @example 50.0000
       */
      base_cost_price?: string;
      /**
       * @description The productâ€™s cost price including tax. (Float, Float-As-String, Integer)
       * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes.
       * @example 50.0000
       */
      cost_price_inc_tax?: string;
      /**
       * @description The product cost price excluding tax. (Float, Float-As-String, Integer)
       * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes.
       * @example 50.0000
       */
      cost_price_ex_tax?: string;
      /**
       * @description Weight of the product. (Float, Float-As-String, Integer)
       * @example 1
       */
      weight?: number | string;
      /**
       * @description Tax applied to the productâ€™s cost price. (Float, Float-As-String, Integer)
       * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
       * @example 54.0000
       */
      cost_price_tax?: string;
      /**
       * @description Whether the product has been refunded.
       * @example false
       */
      is_refunded?: boolean;
      /**
       * @description The total quantity of product refunded from this transaction.
       * @example 0
       */
      quantity_refunded?: number;
      /**
       * @deprecated
       * @description The amount refunded from this transaction; always returns `0`. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      refunded_amount?: string;
      /**
       * @description Numeric ID for the refund.
       * @example 0
       */
      return_id?: number;
      /**
       * @description Name of gift-wrapping option.
       * @example null
       */
      wrapping_name?: string | null;
      /**
       * @description The value of the base wrapping cost. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_wrapping_cost?: string | number;
      /**
       * @description The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_ex_tax?: string;
      /**
       * @description The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_inc_tax?: string;
      /**
       * @description Tax applied to gift-wrapping option. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_tax?: string;
      /** @description Message to accompany gift-wrapping option. */
      wrapping_message?: string;
      /**
       * @description Quantity of this item shipped.
       * @example 0
       */
      quantity_shipped?: number;
      /**
       * @description Name of promotional event/delivery date.
       * @example null
       */
      event_name?: string | null;
      /**
       * Format: date
       * @description Date of the promotional event/scheduled delivery.
       */
      event_date?: string | null;
      /**
       * @description Fixed shipping cost for this product. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      fixed_shipping_cost?: string;
      /** @description Item ID for this product on eBay. */
      ebay_item_id?: string;
      /** @description Transaction ID for this product on eBay. */
      ebay_transaction_id?: string;
      /**
       * @description Numeric ID of the option set applied to the product.
       * @example 5
       */
      option_set_id?: number | null;
      /** @description ID of a parent product. */
      parent_order_product_id?: number | null;
      /**
       * @description Whether this product is bundled with other products.
       * @example false
       */
      is_bundled_product?: boolean;
      /** @description Bin picking number for the physical product. */
      bin_picking_number?: string;
      /** @description (Read-only) ID of the order in another system. For example, the Amazon order ID if this is an Amazon order. */
      external_id?: string | null;
      /** @description The productÊ¼s brand. */
      brand?: string;
      /** @description Array of objects containing discounts applied to the product. */
      applied_discounts?: components["schemas"]["orderProductAppliedDiscounts"][];
      /** @description Array of product option objects. */
      product_options?: components["schemas"]["orderProductOptions"][];
      /** @description Universal Product Code. Can be written to for custom products and catalog products. */
      upc?: string;
      /** @description Products `variant_id`. PUT or POST. This field is not available for custom products. */
      variant_id?: number;
      /**
       * @description The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name_customer?: string;
      /**
       * @description The product name that is shown to merchant in Control Panel.
       * @example Towel Type 1
       */
      name_merchant?: string;
      /**
       * @description ID of the associated gift certificate.
       * @example 52
       */
      gift_certificate_id?: number | null;
      /**
       * @description Represent the correct total amount of the line item after deducting all the discounts and including the tax. This number can be used for accounting purpose.
       *
       * This makes it easier to have the "shopper paid" value for a line item and api user doesn't have to do any calculation to deduct discount on the client side.
       *
       * This field includes all types of discounts (automatic, coupon, manual) and therefore if you use this value, you don't need to deduct any more discounts at line item level or order level.
       * @example 0.0000
       */
      discounted_total_inc_tax?: string;
    };
    /**
     * orderCount
     * @example {
     *   "count": 27
     * }
     */
    orderCount: {
      /** @example 27 */
      count?: number;
    };
    /** orderShippingAddress */
    orderShippingAddress: {
      /**
       * @description ID of this shipping address.
       * @example 1
       */
      id?: number;
      /**
       * @description ID of the order.
       * @example 100
       */
      order_id?: number;
      /**
       * @description The total number of items in the order.
       * @example 1
       */
      items_total?: number;
      /**
       * @description The number of items that have been shipped.
       * @example 0
       */
      items_shipped?: number;
      /**
       * @description The base value of the orderâ€™s items. (Float, Float-As-String, Integer)
       * @example 5.0000
       */
      base_cost?: string;
      /**
       * @description The value of the orderâ€™s items, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      cost_ex_tax?: string;
      /**
       * @description The value of the orderâ€™s items, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      cost_inc_tax?: string;
      /**
       * @description The tax amount on the order. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      cost_tax?: string;
      /**
       * @description The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
       * @example 2
       */
      cost_tax_class_id?: number;
      /**
       * @description The base handling charge. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_handling_cost?: string;
      /**
       * @description The handling charge, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_ex_tax?: string;
      /**
       * @description The handling charge, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_inc_tax?: string;
      /** @example 0.0000 */
      handling_cost_tax?: string;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
       * @example 2
       */
      handling_cost_tax_class_id?: number;
      /**
       * @description Numeric ID of the shipping zone.
       * @example 1
       */
      shipping_zone_id?: number;
      /**
       * @description Name of the shipping zone.
       * @example United States
       */
      shipping_zone_name?: string;
      form_fields?: components["schemas"]["formFields"][];
      shipping_quotes?: components["schemas"]["shippingQuotes_Resource"];
    } & components["schemas"]["shippingAddress_Base"];
    /** orderTaxes_Base */
    orderTaxes_Base: {
      /**
       * @description The unique numeric identifier of the taxes object.
       * @example 1
       */
      id?: number;
      /**
       * @description The unique numeric identifier of the order to which the tax was applied. NOTE: Not included if the store was using the automatic tax feature.
       * @example 129
       */
      order_id?: number;
      /**
       * @description The unique numeric identifier of the order address object associated with the order. NOTE: Not included if the store was using the automatic tax feature.
       * @example 29
       */
      order_address_id?: number;
      /**
       * @description The unique numeric identifier of the tax rate.
       * @example 1
       */
      tax_rate_id?: number;
      /**
       * @description The unique numeric identifier of the tax class object. NOTE: Will be 0 if automatic tax was enabled, or if the default tax class was used.
       * @example 0
       */
      tax_class_id?: number;
      /**
       * @description The name of the tax class object.
       * @example State Tax
       */
      name?: string;
      /**
       * @description The name of the type of tax that was applied. NOTE: It will be "Automatic Tax" if automatic tax was enabled. It will be "API Tax Override" if the order was created with V2 Orders API.
       * @example Gift Wrapping
       */
      class?: string;
      /**
       * @description The tax rate.  The priority order in which the tax is applied (Float, Float-As-String, Integer)
       * @example 8.0000
       */
      rate?: string;
      /**
       * @description The order in which the tax is applied.
       * @example 0
       */
      priority?: number;
      /**
       * @description The amount of tax calculated on the order. (Float, Float-As-String, Integer)
       * @example 1.5200
       */
      priority_amount?: string;
      /**
       * @description (Float, Float-As-String, Integer)
       * @example 1.5200
       */
      line_amount?: string;
      /** @description If the `line_item_type` is `item` or `handling` then this field will be the order product id. Otherwise the field will return as null. */
      order_product_id?: string;
      /**
       * @description Type of tax on item.
       * @enum {string}
       */
      line_item_type?: "item" | "shipping" | "handling" | "gift-wrapping";
    };
    /** orderShipment */
    orderShipment: {
      /**
       * @description Shipment ID.
       * @example 1
       */
      id?: number;
      /**
       * @description ID of the order associated with this shipment.
       * @example 120
       */
      order_id?: number;
      /**
       * @description ID of this orderâ€™s customer.
       * @example 5
       */
      customer_id?: number;
      /**
       * @description ID of the desired `shipping_address` associated with the shipment.
       * @example 20
       */
      order_address_id?: number;
      /** @description Creation date for the shipment. */
      date_created?: string;
      /**
       * @description Tracking number of the shipment.
       * @example w4se4b6ASFEW4T
       */
      tracking_number?: string;
      /**
       * @description Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
       * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
       * @example Ship by Weight
       */
      shipping_method?: string;
      /**
       * @description Enum of the BigCommerce shipping-carrier integration/module.
       * @enum {string}
       */
      shipping_provider?: "auspost" | "canadapost" | "carrier_{your_carrier_id} (only used if the carrier is a [third-party Shipping Provider](/docs/integrations/shipping))" | "endicia" | "usps" | "fedex" | "ups" | "upsready" | "upsonline" | "shipperhq" | "";
      /**
       * Tracking Carrier
       * @description Tracking carrier for the shipment.
       * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid [tracking-carrier values](https://github.com/bigcommerce/dev-docs/blob/master/assets/csv/tracking_carrier_values.csv).
       */
      tracking_carrier?: string;
      /** @description The custom tracking link supplied on POST or PUT shipments. For the auto-generated tracking link see the `generated_tracking_link` property. */
      tracking_link?: string;
      /** @description Comments the shipper wishes to add. */
      comments?: string;
      billing_address?: components["schemas"]["billingAddress_Base"];
      shipping_address?: components["schemas"]["shippingAddress_Base"];
      /** @description The items in the shipment. This object has the following members, all integer: order_product_id (required), quantity (required), product_id (read-only). A sample items value might be: [ {"order_product_id":16,"product_id": 0,"quantity":2} ] */
      items?: {
          /** @example 5 */
          order_product_id?: number;
          /** @example 87 */
          product_id?: number;
          /** @example 2 */
          quantity?: number;
        }[];
      /** @description The human-readable name for the `shipping_provider`. */
      shipping_provider_display_name?: string;
      /** @description The tracking link that is generated using the combination of either the `tracking_number` and `shipping_provider` or `tracking_number` and `tracking_carrier`. This will be empty if the custom `tracking_link` value is provided. */
      generated_tracking_link?: string;
    };
    /** orderConsignments_Resource */
    readonly orderConsignments_Resource: {
      /**
       * @description URL where you can use a GET request to get the order consignments.
       * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/101/consignments
       */
      readonly url?: string;
      /**
       * @description Path where you can use a GET request to get the order consignments.
       * @example /orders/101/consignments
       */
      readonly resource?: string;
    };
    /** products_Resource */
    readonly products_Resource: {
      /** @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/products */
      readonly url?: string;
      /** @example /orders/129/products */
      readonly resource?: string;
    };
    /** shippingAddress_Resource */
    readonly shippingAddresses_Resource: {
      /**
       * @description URL of the shipping address for API requests.
       * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/shippingaddresses
       */
      readonly url?: string;
      /** @example /orders/129/shippingaddresses */
      readonly resource?: string;
    };
    /** coupons_Resource */
    readonly coupons_Resource: {
      /**
       * @description URL of the coupons for API requests.
       * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/coupons
       */
      readonly url?: string;
      /**
       * @description Resource of the coupons.
       * @example /orders/129/coupons
       */
      readonly resource?: string;
    };
    /**
     * orderProductAppliedDiscounts
     * @description When applying a manual discount to an order (not a product level discount), the discount is distributed across products in proportion to the products price.
     * `(total_manual_discount*price_ex_tax)/subtotal_ex_tax`
     */
    orderProductAppliedDiscounts: {
      /**
       * @description Name of the coupon applied to order.
       * @example total-coupon
       */
      id?: string;
      /**
       * @description Amount of the discount.(Float, Float-As-String, Integer)
       * @example 1.2100
       */
      amount?: string;
      /**
       * @description Name of the coupon.
       * `Manual Discount` when creating a manual discount.
       * @example $5 off
       */
      name?: string;
      /**
       * @description Coupon Code.
       * There is no code when creating a manual discount.
       * @example S2549JM0Y
       */
      code?: string | null;
      /**
       * @description Determines if the discount if discount was applied at the Order or Product level. Read Only.
       * @enum {string}
       */
      target?: "order" | "product";
    };
    /** orderProductOptions */
    orderProductOptions: {
      /**
       * @description The unique numerical ID of the option; increments sequentially.
       * @example 16
       */
      id?: number;
      /**
       * @description Numeric ID of the associated option.
       * @example 18
       */
      option_id?: number;
      /** @example 53 */
      order_product_id?: number;
      /**
       * @description Numeric ID of an option applied to the product from a list of options available to the product.
       * @example 120
       */
      product_option_id?: number;
      /**
       * @description Alias for display_name_customer. The product option name that is shown to customer in the storefront.
       * @example Size
       */
      display_name?: string;
      /**
       * @description Alias for display_value_customer. The product option value that is shown to customer in storefront.
       * @example S
       */
      display_value?: string;
      /**
       * @description For file-upload type, itÊ¼s a unique string describing the properties of the file upload. For other types, itÊ¼s the value of the property.
       * @example {"originalName":"BigCommerceLogo.jpeg","temporaryPath":"121_fbfb71dfc5a5d911f62d8e35dedd6e45.jpeg","path":"f606efcae7e179970b19c3658142c5d0.jpeg"}
       */
      value?: string;
      /**
       * @description Option Type
       * @example Checkbox
       * @enum {unknown}
       */
      type?: "Checkbox" | "Date field" | "File Upload" | "Multi-line text field" | "Multiple choice" | "Product Pick List" | "Swatch" | "Text field";
      /**
       * @description The optionâ€™s name, as used internally. Must be unique.
       * @example Apparel sizes
       */
      name?: string;
      /**
       * @description How it is displayed on the storefront. Examples include Drop-down, radio buttons, or rectangles.
       * @example Rectangle
       */
      display_style?: string;
      /**
       * @description The product option name that is shown to customer in storefront.
       * @example couleur
       */
      display_name_customer?: string;
      /**
       * @description The product option name that is shown to merchant in Control Panel.
       * @example color
       */
      display_name_merchant?: string;
      /**
       * @description The product option value that is shown to customer in storefront.
       * @example bleu
       */
      display_value_customer?: string;
      /**
       * @description The product option value that is shown to merchant in Control Panel.
       * @example blue
       */
      display_value_merchant?: string;
    };
    /** formFields */
    formFields: {
      /**
       * @description The form field name.
       * @example License ID
       */
      name?: string;
      /**
       * @description The form field value.
       * @example 123BAF
       */
      value?: number | string | unknown[];
    };
    /** orderMessages */
    orderMessages: {
        id?: number;
        order_id?: number;
        staff_id?: number;
        customer_id?: number;
        type?: string;
        subject?: string;
        message?: string;
        status?: string;
        is_flagged?: boolean;
        date_created?: string;
        customer?: Record<string, never>;
      }[];
    /** shippingQuotes_Resource */
    readonly shippingQuotes_Resource: {
      /**
       * @description This URL will return a 204 for shipping quotes. To return shipping quotes:
       * `/shipping_addresses/shipping_address_id/shipping_quotes`
       * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/163/shippingaddresses/64/shippingquotes
       */
      readonly url?: string;
      /**
       * @description This URL will return a 204 for shipping quotes. To return shipping quotes:
       * `/shipping_addresses/shipping_address_id/shipping_quotes`
       * @example orders/163/shippingaddresses/64/shippingquotes
       */
      readonly resource?: string;
    };
    /** shippingQuotes_Base */
    shippingQuotes_Base: {
      /**
       * @description ID of the shipping quote.
       * @example 24
       */
      id?: string;
      /**
       * @description UUID of the shipping quote.
       * @example a72acc8d-504b-4a40-8534-7c54d997ed59
       */
      uuid?: string;
      /** @description Time the order was created in RFC 2822 format. */
      timestamp?: string;
      /**
       * @description ID of the shipping provider.
       * @example bcstatic
       */
      shipping_provider_id?: string;
      /** @description This can vary based on the shipping provider. Manual shipping methods such as fixed will return an empty array. Shipping providers such as UPS will return an object with the shipping information. Since the shipping quote is tied to a shipping address only one quote will return in the response. */
      shipping_provider_quote?: unknown[];
      /**
       * @description Code of the shipping provider.
       * @example shipping_byweight
       */
      provider_code?: string;
      /** @description Code of the shipping carrier. */
      carrier_code?: string;
      /** @description Type of delivery. This can vary based on shipping quote. */
      rate_code?: string;
      /** @description This can vary based on shipping quote. */
      rate_id?: string;
      /** @description Shipping method ID */
      method_id?: number;
    };
    /** orderShipment_Post */
    orderShipment_Post: {
      /**
       * @description ID of the desired `shipping_address` associated with the shipment.
       * @example 20
       */
      order_address_id?: number;
      /**
       * @description Tracking number of the shipment.
       * @example w4se4b6ASFEW4T
       */
      tracking_number?: string;
      /**
       * @description The custom tracking link supplied on POST or PUT shipments. For the auto-generated tracking link see the `generated_tracking_link` property.
       * @example https://www.mycustomtrackinglink.com/tracking
       */
      tracking_link?: string;
      /**
       * @description Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
       * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
       *
       * @example Ship by Weight
       */
      shipping_method?: string;
      /**
       * @description Enum of the BigCommerce shipping-carrier integration/module.
       * @enum {string}
       */
      shipping_provider?: "auspost" | "canadapost" | "carrier_{your_carrier_id} (only used if the carrier is a [third-party Shipping Provider](/docs/integrations/shipping))" | "endicia" | "usps" | "fedex" | "ups" | "upsready" | "upsonline" | "shipperhq";
      /**
       * Tracking Carrier
       * @description Tracking carrier for the shipment.
       * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid [tracking-carrier values](https://github.com/bigcommerce/dev-docs/blob/master/assets/csv/tracking_carrier_values.csv).
       */
      tracking_carrier?: string;
      /** @description Comments the shipper wishes to add. */
      comments?: string;
      /** @description The items in the shipment. This object has the following members, all integer: order_product_id (required), quantity (required), product_id (read-only). A sample items value might be: [ {"order_product_id":16,"product_id": 0,"quantity":2} ] */
      items?: {
          /** @example 5 */
          order_product_id?: number;
          /** @example 2 */
          quantity?: number;
        }[];
    };
    /** orderShipment_Put */
    orderShipment_Put: {
      /**
       * @description ID of the desired `shipping_address` associated with the shipment.
       * @example 20
       */
      order_address_id?: number;
      /**
       * @description Tracking number of the shipment.
       * @example w4se4b6ASFEW4T
       */
      tracking_number?: string;
      /**
       * @description Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
       * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
       *
       * @example Ship by Weight
       */
      shipping_method?: string;
      /**
       * @description Enum of the BigCommerce shipping-carrier integration/module.
       * @enum {string}
       */
      shipping_provider?: "auspost" | "canadapost" | "carrier_{your_carrier_id} (only used if the carrier is a [third-party Shipping Provider](/docs/integrations/shipping))" | "endicia" | "usps" | "fedex" | "ups" | "upsready" | "upsonline" | "shipperhq";
      /**
       * Tracking Carrier
       * @description Tracking carrier for the shipment.
       * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid [tracking-carrier values](https://github.com/bigcommerce/dev-docs/blob/master/assets/csv/tracking_carrier_values.csv).
       */
      tracking_carrier?: string;
      /**
       * @description The custom tracking link supplied on POST or PUT shipments. For the auto-generated tracking link see the `generated_tracking_link` property.
       * @example https://www.mycustomtrackinglink.com/tracking
       */
      tracking_link?: string;
      /** @description Comments the shipper wishes to add. */
      comments?: string;
    };
    /** orderStatus_Base */
    orderStatus_Base: {
      /**
       * @description The ID of the type of order status.
       * @example 0
       */
      id?: number;
      /**
       * @description Name of the type of order status.
       * @example Incomplete
       */
      name?: string;
      /**
       * @description System name of the type of order status.
       * @example Incomplete
       */
      system_label?: string;
      /**
       * @description Custom order status label given in the Control Panel.
       * @example Incomplete- Waiting on Shipment
       */
      custom_label?: string;
      /**
       * @description System description of the order status.
       * @example An incomplete order happens when a shopper reached the payment page, but did not complete the transaction.
       */
      system_description?: string;
    };
    /** ordersCountStatus */
    ordersCountStatus: components["schemas"]["orderStatus_Base"] & {
      /**
       * @description Number of orders that exist with this status.
       * @example 6
       */
      count?: number;
      /**
       * @description The sort order of the order status from the Control Panel.
       * @example 0
       */
      sort_order?: number;
    };
    /**
     * order_Shared
     * @description Order properties used in `PUT` and `POST` requests and responses.
     */
    order_Shared: {
      /**
       * @description The value of the base handling cost. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_handling_cost?: string;
      /**
       * @description The value of the base shipping cost. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_shipping_cost?: string;
      /**
       * @description The value of the base wrapping cost expressed as a floating point number to four decimal places in string format.
       * @example 0.0000
       */
      base_wrapping_cost?: string;
      billing_address?: components["schemas"]["billingAddress_Base"];
      /**
       * @description Shows where the order originated. The channel_id will default to 1.
       * @example 1
       */
      channel_id?: number;
      customer_id?: number;
      /**
       * @description Message that the customer entered (number, options) -o the `Order Comments` box during checkout.
       * @example Thank you
       */
      customer_message?: string;
      /** @description The date the order was created, formatted in the RFC-2822 standard. You set this attribute on Order creation (POST) to support the migration of historical orders. If you do not provide a value, then it will default to the current date/time. e.g., `Tue, 20 Nov 2012 00:00:00 +0000`. */
      date_created?: string;
      /** @description The currency code of the transactional currency the shopper pays in; writeable when multi-currency is enabled. */
      default_currency_code?: string;
      /**
       * @description Amount of discount for this transaction. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      discount_amount?: string;
      /**
       * @description If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.
       * @example 0
       */
      ebay_order_id?: string;
      /**
       * @description (Read-only) The order ID in another system, such as the Amazon order ID if this is an Amazon order.
       * @example null
       */
      external_id?: string | null;
      /**
       * @description The merchant ID represents an upstream order from an external system. It is the source of truth for orders. After setting it, you cannot write to or update the `external_merchant_id`. For example, you can update the Facebook by Meta page ID in a POST request, but a PUT request to update the order will return a 400 error. Please remove it from your request before trying again.
       * @example null
       */
      external_merchant_id?: string | null;
      /**
       * @description This value identifies an external system that generated the order and submitted it to BigCommerce with the Orders API.
       * * When supplying the value, we recommend combining the type of system and vendor, e.g., ERP (Acumatica) or POS (Square).
       * * If you are migrating historical orders processed on another eCommerce platform to BigCommerce, supply the following code as the value: M-MIG. This code will exclude historical orders from the storeâ€™s GMV/order count, which factors into pricing.
       * * If you do not provide a value, then it will default to null.
       * @example null
       */
      external_source?: string | null;
      /**
       * @description The full name of the country where the customer made the purchase, based on the IP.
       * @example United States
       */
      geoip_country?: string;
      /**
       * @description The country where the customer made the purchase, in ISO2 format, based on the IP.
       * @example US
       */
      geoip_country_iso2?: string;
      /**
       * @description The value of the handling cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_ex_tax?: string;
      /**
       * @description The value of the handling cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_inc_tax?: string;
      /**
       * @description IPv4 Address of the customer, if known.
       *
       * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address` value will reset the `ip_address_v6` value and vice versa.
       * @example 12.345.678.910
       */
      ip_address?: string;
      /**
       * @description IPv6 Address of the customer, if known.
       *
       * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address_v6` value will reset the `ip_address` value and vice versa.
       * @example 2001:db8:3333:4444:5555:6666:7777:8888
       */
      ip_address_v6?: string;
      /**
       * @description Indicates whether the order was deleted (archived). Set to to true, to archive an order.
       * @example false
       */
      is_deleted?: boolean;
      /**
       * @description The number of items that have been shipped.
       * @example 0
       */
      items_shipped?: number;
      /**
       * @description The total number of items in the order.
       * @example 1
       */
      items_total?: number;
      /**
       * @description Whether this is an order for digital products.
       * @example false
       */
      order_is_digital?: boolean;
      /**
       * @description The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.
       * @enum {string}
       */
      payment_method?: "Credit Card" | "Cash" | "Test Payment Gateway" | "Manual";
      /**
       * @description The external Transaction ID/Payment ID within this orderâ€™s payment provider (if a payment provider was used).
       * @example
       */
      payment_provider_id?: string | number;
      /**
       * @description The amount refunded from this transaction; always returns `0`. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      refunded_amount?: string;
      /**
       * @description The value of shipping cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      shipping_cost_ex_tax?: string;
      /**
       * @description The value of shipping cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      shipping_cost_inc_tax?: string;
      /**
       * @description Any additional notes for staff.
       * @example Send Saturday
       */
      staff_notes?: string;
      /** @description The status ID of the order. */
      status_id?: number;
      /**
       * @description Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      subtotal_ex_tax?: string;
      /**
       * @description Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      subtotal_inc_tax?: string;
      /**
       * @description BasicTaxProvider - Tax is set to manual and order is created in the store.
       *
       * AvaTaxProvider - Tax is set to automatic and order is created in the store. Used for Avalara.
       *
       * "" (empty string) - The order is created with the API, or the tax provider is unknown.
       *
       * @enum {string}
       */
      tax_provider_id?: "BasicTaxProvider" | "AvaTaxProvider" | "";
      /**
       * @description The customerâ€™s locale.
       * @example en
       */
      customer_locale?: string;
      /**
       * @description The order ID in another system, such as the Amazon Order ID if this is an Amazon order. After setting it, you can update this field using a POST or PUT request.
       * @example external-order-id
       */
      external_order_id?: string;
      /**
       * @description Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      total_ex_tax?: string;
      /**
       * @description Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      total_inc_tax?: string;
      /**
       * @description The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_ex_tax?: string;
      /**
       * @description The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_inc_tax?: string;
    };
    /** billingAddress_Base */
    billingAddress_Base: {
      /** @example Jane */
      first_name?: string;
      /** @example Doe */
      last_name?: string;
      company?: string;
      /** @example 123 Main Street */
      street_1?: string;
      street_2?: string;
      /** @example Austin */
      city?: string;
      /** @example TX */
      state?: string;
      /**
       * @description The billing address must include the ZIP code. The ZIP code must be two or more characters.
       * @example 12345
       */
      zip: string;
      /** @example United States */
      country?: string;
      /** @example US */
      country_iso2?: string;
      phone?: string;
      /** @example janedoe@example.com */
      email?: string;
    };
    /**
     * shippingAddress_Base
     * @description Shipping Address properties common to all requests and responses.
     */
    shippingAddress_Base: {
      /** @example Jane */
      first_name?: string;
      /** @example Doe */
      last_name?: string;
      company?: string;
      /**
       * @description Street address (first line).
       * @example 123 Main Street
       */
      street_1?: string;
      /** @description Street address (second line). */
      street_2?: string;
      /** @example Austin */
      city?: string;
      /** @example Texas */
      state?: string;
      /**
       * @description Zip or postal code, as a string.
       * @example 12345
       */
      zip?: string;
      /** @example United States */
      country?: string;
      /**
       * @description 2-letter ISO Alpha-2 code for the country.
       * @example US
       */
      country_iso2?: string;
      /** @description Recipientâ€™s telephone number. */
      phone?: string;
      /**
       * @description Recipientâ€™s email address.
       * @example janedoe@example.com
       */
      email?: string;
      /**
       * @description Text code identifying the BigCommerce shipping module selected by the customer.
       * @example Free Shipping
       */
      shipping_method?: string;
    };
    /**
     * order_RespOnly
     * @description Properties that are only for order response bodies.
     */
    order_RespOnly: {
      /**
       * @description Read-only. The ID of the order.
       * @example 118
       */
      id?: number;
      /** @description A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT request. RFC-2822 */
      date_modified?: string;
      /** @description A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT request. RFC-2822 */
      date_shipped?: string;
      /**
       * @description The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a read-only field; do not set or modify its value in a POST or PUT request.
       * @example a8458391-ef68-4fe5-9ec1-442e6a767364
       */
      cart_id?: string;
      /**
       * @description The status will include one of the (string, options) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.
       * @example Awaiting Fulfillment
       */
      status?: string;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT request. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      subtotal_tax?: string;
      /**
       * @description A read-only value. Do not attempt to modify or set this value in a POST or PUT request. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      shipping_cost_tax?: string;
      /**
       * @description Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT request. (NOTE: Value ignored if automatic tax is enabled on the store.)
       * @example 2
       */
      shipping_cost_tax_class_id?: number;
      /**
       * @description A read-only value. Do not attempt to modify or set this value in a POST or PUT request. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_tax?: string;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT request.
       *
       * (NOTE: Value ignored if automatic tax is enabled on the store.)
       * @example 2
       */
      handling_cost_tax_class_id?: number;
      /**
       * @description A read-only value. Do not attempt to modify or set this value in a POST or PUT request. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_tax?: string;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT request.
       *
       * NOTE: Value ignored if automatic tax is enabled on the store.
       * @example 3
       */
      wrapping_cost_tax_class_id?: number;
      /**
       * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT request.
       * @enum {string}
       */
      payment_status?: "authorized" | "captured" | "capture pending" | "declined" | "held for review" | "paid" | "partially refunded" | "pending" | "refunded" | "void" | "void pending";
      /**
       * @description Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT request. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      store_credit_amount?: string;
      /**
       * @description A read-only value. Do not pass in a POST or PUT request. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      gift_certificate_amount?: string;
      /**
       * @description The display currency ID. Depending on the currency selected, the value can be different from the transactional currency. A read-only value. Do not pass in a POST or PUT request. In v2 display currency is set to the transactional currency, ''default_currency_id''.
       * @example 1
       */
      currency_id?: number;
      /**
       * @description The currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value can be different from the transactional currency. A read-only value. Do not pass in a POST or PUT request.
       * @example USD
       */
      currency_code?: string;
      /**
       * @description The exchange rate between the storeâ€™s default currency and the display currency. A read-only value. Do not pass in a POST or PUT request. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). (Float, Float-As-String, Integer)
       * @example 1.0000000000
       */
      currency_exchange_rate?: string;
      /**
       * @description The transactional currency ID. A read-only value. Do not pass in a POST or PUT request.
       * @example 1
       */
      default_currency_id?: number;
      /**
       * @description The currency code of the transactional currency the shopper pays in.
       * @example EUR
       */
      default_currency_code?: string;
      /**
       * @description The currency code of the storeÊ¼s default currency.
       * @example USD
       */
      store_default_currency_code?: string;
      /**
       * @description The exchange rate between the storeÊ¼s default currency and the transactional currency used in the order.
       * @example 100.0000000000
       */
      store_default_to_transactional_exchange_rate?: string;
      /**
       * @description A read-only value. Do not pass in a POST or PUT request. (Float, Float-As-String, Integer)
       * @example 5.0000
       */
      coupon_discount?: string;
      /** @description The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT. */
      shipping_address_count?: number;
      /**
       * @description Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT.
       * @example false
       */
      is_email_opt_in?: boolean;
      /**
       * @description The `order_source` is set upon order creation and reflects the origin of the order. It will indicate whether the order was created by one of the following:
       * * storefront
       * * control panel
       * * manual order
       * * /v2/orders API
       * * Checkout API
       * * or by an integration with an external platform such as Facebook by Meta or Amazon.
       */
      order_source?: string;
      consignments?: components["schemas"]["orderConsignments_Resource"];
      products?: components["schemas"]["products_Resource"];
      shipping_addresses?: components["schemas"]["shippingAddresses_Resource"];
      coupons?: components["schemas"]["coupons_Resource"];
      /**
       * @description The status ID of the order.
       * @example 7
       */
      status_id?: number;
      billing_address?: {
        form_fields?: components["schemas"]["formFields"][];
      };
    };
    /**
     * Custom product
     * @description **Usage notes:**
     *
     * To `add` a custom product to an existing order, don't include `id` in the payload. You must provide a non-empty value for at least one of these fields: `name`, `name_customer`, or `name_merchant`.
     * To `update` an order product line, `id` is required. The payload should only contain the fields that need to be updated. You cannot change omitted fields.
     *
     * Note the following constraints and default field values:
     *  - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
     *  - `name` and `name_customer` always hold the same value; updating either `name` or `name_customer` will change the value for both of those fields.
     *  - If both fields `name` and `name_customer` are present, they must have the same value.
     *  - When updating an existing order product, if you omit both fields `name` and `name_customer` from the request, they will not be updated.
     *  - When updating an existing order product, if you omit `name_merchant` from the request, it will not be updated.
     *  - When adding a product, if you omit `name_merchant`, it will be set to the value of `name` (or `name_customer`).
     *  - When adding a new product to an existing order, if you omit both fields `name` and `name_customer`, they will be set to the value of `name_merchant`.
     */
    orderCustomProduct_Put: {
      /**
       * @description Alias for name_customer. The product name that is shown to customer in storefront.
       *
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name: string;
      /**
       * @description The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name_customer?: string;
      /**
       * @description The product name that is shown to merchant in control panel.
       * @example Towel Type 1
       */
      name_merchant?: string;
      quantity: number;
      price_ex_tax: number;
      price_inc_tax: number;
      sku?: string;
      upc?: string;
      /** @description ID of the product line. */
      id?: number;
    };
    /**
     * Catalog product
     * @description **Usage notes**
     *
     *  To `add` a product to an existing order, don't include `id` in the payload. When adding a product with variants, `product_options` are required.
     *  To `update` an order product line, `id` is required. The payload should only contain the fields that need to be updated. The fields that you omit will not be changed.
     *
     *  Note the following constraints and default field values:
     *  - `xxx` and `xxx_customer` always hold the same value. Updating either `xxx` or `xxx_customer` will change the value of both fields.
     *  - If both fields `xxx` and `xxx_customer` are present, they must have same value.
     *  - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
     *  - When updating an existing order product without changing the variant, product, or product options, requests that do not contain `xxx_merchant` will fail.
     *  - When updating an existing order product, requests that do not contain both fields `xxx` and `xxx_customer` will fail.
     *  - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer, and `xxx_merchant`. If `xxx_merchant` is omitted, it will default to have the catalog value.
     *  - If both fields `xxx` and `xxx_customer` are omitted from the request, they will default to the catalog value.
     */
    orderCatalogProduct_Put: {
      /** @description The order product `id`. To add a product to an existing order, donÊ¼t include `id` in the payload. `id` is required when updating an order product. */
      id?: number;
    } & components["schemas"]["orderCatalogProduct_Post"];
    /** Remove Product from Order */
    orderRemoveProduct_Put: {
      /**
       * @description The `id` returned from a request to the [List order products](/docs/rest-management/orders/order-products#list-order-products) or the [Get an order product](/docs/rest-management/orders/order-products#get-an-order-product) endpoint.
       * @example 123
       */
      id?: number;
      /**
       * @description The numeric ID of the product.
       * @example 117
       */
      product_id?: number;
      /**
       * @description The quantity of product being removed.
       * @example 1
       */
      quantity?: number;
      /** @description List of product variant options and modifiers. `product_options` are required when removing a product with variants and not specifying the `variant_id`, or when products have mandatory modifiers. */
      product_options?: {
          /**
           * @description The productâ€™s cost price including tax. (Float, Float-As-String, Integer)
           * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes.
           * @example 50.0000
           */
          cost_price_inc_tax?: string;
          /**
           * @description The products cost price excluding tax. (Float, Float-As-String, Integer)
           * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only.
           * @example 0.0000
           */
          price_ex_tax?: string;
        }[];
    };
    /**
     * orderCatalogProduct_Post
     * @description Note:
     * - `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
     * - If both fields `xxx` and `xxx_customer` are present, they must have same value.
     * - Empty strings `''` and `null` are invalid for `xxx` and `xxx_customer, and `xxx_merchant`.
     * - `xxx`, `xxx_customer`, and `xxx_merchant` default to the value from `catalog` if not supplied in the request.
     */
    orderCatalogProduct_Post: {
      product_id?: number;
      /**
       * @description Alias for `name_customer`. The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name?: string;
      /**
       * @description The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name_customer?: string;
      /**
       * @description The product name that is shown to merchant in control panel.
       * @example Towel Type 1
       */
      name_merchant?: string;
      /** @description List of product variant options and modifiers. `product_options` are required when adding a product with variants and not specifying the `variant_id`, or when products have mandatory modifiers. */
      product_options?: {
          /** @description Numeric ID of an option applied to the product from a list of options available to the product. This field has the same value as `product_option_id` when [retrieving products in an order](/docs/rest-management/orders/order-products#list-order-products). */
          id?: number;
          /**
           * @description Depending on the option type, value can be one of the following:
           * - The variant option value id or the modifier value id for modifier types with a list of defined values, such as drop down or checkbox modifiers.
           * - The modifier value for modifier types without a list of defined values, such as text field or date field modifiers.
           *
           * Notes:
           * - The API does not currently support the following option types:
           *   - File upload
           *   - Pick list
           * - For date modifiers use either the `YYYY-MM-DDThh:mm:ssÂ±hh:mm` or the `YYYY-MM-DD` ISO-8601 formats. The date field modifier values are saved and returned as timestamps. For values entered using the YYYY-MM-DD format, the store timezone is used when creating the timestamp.
           * - For multi-line text field modifiers, use the `\n` characters for separating the lines.
           */
          value?: string;
          /**
           * @description Alias for display_name_customer. The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
           * @example couleur
           */
          display_name?: string;
          /**
           * @description The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
           * @example couleur
           */
          display_name_customer?: string;
          /**
           * @description The product option name that is shown to merchant in Control Panel.
           * @example color
           */
          display_name_merchant?: string;
          /**
           * @description Alias for display_value_customer. The product option value that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
           * @example bleu
           */
          display_value?: string;
          /**
           * @description The product option value that is shown to merchant in Control Panel.
           * @example blue
           */
          display_value_merchant?: string;
          /**
           * @description The product option value that is shown to a customer in storefront.`xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
           * @example bleu
           */
          display_value_customer?: string;
        }[];
      quantity?: number;
      price_inc_tax?: number;
      price_ex_tax?: number;
      upc?: string;
      /** @description "" */
      variant_id?: number;
      /** @description ID of the gift wrapping that will be used for this product. If provided, then `wrapping_cost_ex_tax` and `wrapping_cost_inc_tax` are required. When updating an order product line item, if `wrapping_id` is set to `0` and no other wrapping fields are provided,then the wrapping will be removed from the order product. */
      wrapping_id?: number;
      /** @description If the `wrapping_id` is provided, this field will populate with the name of the gift wrapping that is to be used. */
      wrapping_name?: string;
      wrapping_message?: string;
      /** @description When provided, this value should be equal to `wrapping_cost_ex_tax` times quantity to accurately reflect wrapping cost per unit. */
      wrapping_cost_ex_tax?: number;
      /** @description When provided, this value should be equal to `wrapping_cost_inc_tax` times quantity to accurately reflect wrapping cost per unit. */
      wrapping_cost_inc_tax?: number;
    };
    /**
     * orderCustomProduct_Post
     * @description **Usage notes**
     *
     * Provide one of these fields with a non-empty value:
     *   - `name`
     *   - `name_customer`
     *   - `name_merchant`
     *
     * Note the following constraints and default field values:
     *   - Null and `''` empty strings are invalid for `name`, `name_customer`, and `name_merchant`.
     *   - `name` and `name_customer` always share the same value; updating one updates the other.
     *   - When you omit both `name` and `name_customer`, they default to the value of `name_merchant`.
     *   - When you omit `name_merchant`, it defaults to the value that `name` and `name_customer` share.
     */
    orderCustomProduct_Post: {
      /**
       * @description Alias for name_customer. The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name: string;
      /**
       * @description The product name that is shown to customer in storefront.
       * @example Fog Linen Chambray Towel - Beige Stripe
       */
      name_customer?: string;
      /**
       * @description The product name that is shown to merchant in control panel.
       * @example Towel Type 1
       */
      name_merchant?: string;
      quantity: number;
      price_inc_tax: number;
      price_ex_tax: number;
      upc?: string;
      sku?: string;
    };
    order_Put: {
      /**
       * @description The value of the base handling cost. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_handling_cost?: string;
      /**
       * @description The value of the base shipping cost. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      base_shipping_cost?: string;
      /**
       * @description The value of the base wrapping cost expressed as a floating point number to four decimal places in string format.
       * @example 0.0000
       */
      base_wrapping_cost?: string;
      billing_address?: components["schemas"]["billingAddress_Put"];
      /**
       * @description Shows where the order originated. The channel_id will default to 1.
       * @example 1
       */
      channel_id?: number;
      consignments?: components["schemas"]["orderConsignment_Put"];
      customer_id?: number;
      /**
       * @description Message that the customer entered (number, options) -o the `Order Comments` box during checkout.
       * @example Thank you
       */
      customer_message?: string;
      /** @description The date the order was created, formatted in the RFC-2822 standard. You set this attribute on Order creation (POST) to support the migration of historical orders. If you do not provide a value, then it will default to the current date/time. e.g., `Tue, 20 Nov 2012 00:00:00 +0000`. */
      date_created?: string;
      /** @description A read-only field displays the currency code of the [transactional currency](/docs/store-operations/currencies#display-vs-transactional) the shopper uses. */
      default_currency_code?: string;
      /**
       * @description Amount of discount for this transaction. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      discount_amount?: string;
      /**
       * @description If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.
       * @example 0
       */
      ebay_order_id?: string;
      /**
       * @description (Read-only) The order ID in another system, such as the Amazon Order ID if this is an Amazon order.
       * @example null
       */
      external_id?: string | null;
      /**
       * @description The merchant ID represents an upstream order from an external system. It is the source of truth for orders. After setting it, you cannot write to or update the `external_merchant_id`. For example, you can update the Facebook by Meta page ID in a POST request, but a PUT request to update the order will return a 400 error. Please remove it from your request before trying again.
       * @example null
       */
      external_merchant_id?: string | null;
      /**
       * @description This value identifies an external system that generated the order and submitted it to BigCommerce with the Orders API.
       * * When supplying the value, we recommend combining the type of system and vendor, e.g., ERP (Acumatica) or POS (Square).
       * * If you are migrating historical orders processed on another eCommerce platform to BigCommerce, supply the following code as the value: M-MIG. This code will exclude historical orders from the storeâ€™s GMV/order count, which factors into pricing.
       * * If you do not provide a value, then it will default to null.
       * @example null
       */
      external_source?: string | null;
      /**
       * @description The full name of the country where the customer made the purchase, based on the IP.
       * @example United States
       */
      geoip_country?: string;
      /**
       * @description The country where the customer made the purchase, in ISO2 format, based on the IP.
       * @example US
       */
      geoip_country_iso2?: string;
      /**
       * @description The value of the handling cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_ex_tax?: string;
      /**
       * @description The value of the handling cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      handling_cost_inc_tax?: string;
      /**
       * @description IPv4 Address of the customer, if known.
       *
       * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address` value will reset the `ip_address_v6` value and vice versa.
       * @example 12.345.678.910
       */
      ip_address?: string;
      /**
       * @description IPv6 Address of the customer, if known.
       *
       * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address_v6` value will reset the `ip_address` value and vice versa.
       * @example 2001:db8:3333:4444:5555:6666:7777:8888
       */
      ip_address_v6?: string;
      /**
       * @description Indicates whether the order was deleted (archived). Set to to true, to archive an order.
       * @example false
       */
      is_deleted?: boolean;
      /**
       * @description The number of items that have been shipped.
       * @example 0
       */
      items_shipped?: number;
      /**
       * @description The total number of items in the order.
       * @example 1
       */
      items_total?: number;
      /**
       * @description Whether this is an order for digital products.
       * @example false
       */
      order_is_digital?: boolean;
      /** @description The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `Cash`,`Test Payment Gateway`, etc. */
      payment_method?: string;
      /** @description The external Transaction ID/Payment ID within this orderâ€™s payment provider (if a payment provider was used). */
      payment_provider_id?: string | number;
      products?: (components["schemas"]["orderCatalogProduct_Put"] | components["schemas"]["orderCustomProduct_Put"] | components["schemas"]["orderRemoveProduct_Put"])[];
      /**
       * @description The amount refunded from this transaction; always returns `0`. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      refunded_amount?: string;
      /**
       * @description The value of shipping cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      shipping_cost_ex_tax?: string;
      /**
       * @description The value of shipping cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      shipping_cost_inc_tax?: string;
      /**
       * @description Any additional notes for staff.
       * @example Send Saturday
       */
      staff_notes?: string;
      shipping_addresses?: ({
          id?: number;
        } & components["schemas"]["shippingAddress_Put"])[];
      /** @description The status ID of the order. */
      status_id?: number;
      /**
       * @description Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      subtotal_ex_tax?: string;
      /**
       * @description Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      subtotal_inc_tax?: string;
      /**
       * @description BasicTaxProvider - Tax is set to manual and order is created in the store.
       *
       * AvaTaxProvider - Tax is set to automatic and order is created in the store. Used for Avalara.
       *
       * "" (empty string) - The order is created with the API, or the tax provider is unknown.
       *
       * @enum {string}
       */
      tax_provider_id?: "BasicTaxProvider" | "AvaTaxProvider" | "";
      /**
       * @description The customerâ€™s locale.
       * @example en
       */
      customer_locale?: string;
      /**
       * @description The order ID in another system, such as the Amazon Order ID if this is an Amazon order. After setting it, you can update this field using a POST or PUT request.
       * @example external-order-id
       */
      external_order_id?: string | null;
      /**
       * @description Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      total_ex_tax?: string;
      /**
       * @description Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer)
       * @example 225.0000
       */
      total_inc_tax?: string;
      /**
       * @description The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_ex_tax?: string;
      /**
       * @description The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
       * @example 0.0000
       */
      wrapping_cost_inc_tax?: string;
    };
    /**
     * order_Post
     * @description Products and Billing address only required for POST operation.
     */
    order_Post: ({
      products?: (components["schemas"]["orderCatalogProduct_Post"] | components["schemas"]["orderCustomProduct_Post"])[];
      shipping_addresses?: components["schemas"]["shippingAddress_Base"][];
      consignments?: components["schemas"]["orderConsignment_Post"];
    }) & components["schemas"]["order_Shared"];
    shippingAddress_Put: components["schemas"]["shippingAddress_Base"] & {
      form_fields?: components["schemas"]["formFields"][];
    };
    billingAddress_Put: components["schemas"]["billingAddress_Base"] & {
      form_fields?: components["schemas"]["formFields"][];
    };
    orderConsignment_Put: {
      pickups?: components["schemas"]["pickupConsignment_Put"][];
    };
    pickupConsignment_Put: {
      /**
       * @description ID of the pickup consignment to update.
       * @example 99
       */
      id: number;
      /**
       * @description ID of the pickup method.
       * @example 1
       */
      pickup_method_id?: number;
    } & components["schemas"]["pickupConsignment_Base"] & {
      location?: components["schemas"]["pickupConsignmentLocation_Put"];
      line_items?: components["schemas"]["orderProduct_Put"][];
    };
    pickupConsignment_Base: {
      /**
       * @description A name for the pickup method that can be displayed to shoppers.
       * @example Pick Up
       */
      pickup_method_display_name?: string;
      /**
       * @description A message for shoppers explaining how to collect their pickup order.
       * @example Bring your ID.
       */
      collection_instructions?: string;
      /**
       * @description A message for shoppers indicating the estimated time their pickup order will be ready for collection.
       * @example 9am - 6pm
       */
      collection_time_description?: string;
    };
    pickupConsignmentLocation_Put: components["schemas"]["pickupConsignmentLocation_Base"];
    pickupConsignmentLocation_Base: {
      /**
       * @description The name of the pickup location.
       * @example Location 1
       */
      name?: string;
      /**
       * @description The code of the pickup location.
       * @example LOCATION-1
       */
      code?: string;
      /**
       * @description Street address (first line).
       * @example 123 Main Street
       */
      address_line_1?: string;
      /**
       * @description Street address (second line).
       * @example Suite 101
       */
      address_line_2?: string;
      /** @example Austin */
      city?: string;
      /** @example Texas */
      state?: string;
      /** @example 78726 */
      postal_code?: string;
      /**
       * @description 2-letter ISO Alpha-2 code for the country.
       * @example US
       */
      country_alpha2?: string;
      /**
       * @description Pickup locationÊ¼s email address.
       * @example location1@example.com
       */
      email?: string;
      /**
       * @description Pickup locationÊ¼s phone number.
       * @example +1 111-111-1111
       */
      phone?: string;
    };
    /** orderProduct_Put */
    orderProduct_Put: components["schemas"]["orderCustomProduct_Put"] | components["schemas"]["orderCatalogProduct_Put"];
    orderConsignment_Post: {
      pickups: components["schemas"]["pickupConsignment_Post"][];
    };
    pickupConsignment_Post: {
      /**
       * @description ID of the pickup method.
       * @example 1
       */
      pickup_method_id: number;
    } & components["schemas"]["pickupConsignment_Base"] & {
      location?: components["schemas"]["pickupConsignmentLocation_Post"];
      line_items: components["schemas"]["orderProduct_Post"][];
    };
    pickupConsignmentLocation_Post: components["schemas"]["pickupConsignmentLocation_Base"];
    /** orderProduct_Post */
    orderProduct_Post: components["schemas"]["orderCustomProduct_Post"] | components["schemas"]["orderCatalogProduct_Post"];
    orderConsignment_Get: {
      /** @description Pickup consignments. */
      pickups?: components["schemas"]["pickupConsignment_Get"][];
      /** @description Shipping consignments. */
      shipping?: components["schemas"]["shippingConsignment_Get"][];
      /** @description Digital consignments for products that are downloaded. */
      downloads?: components["schemas"]["digitalConsignment_Get"][];
      /** @description Email consignments for gift certificates. */
      email?: {
        gift_certificates?: components["schemas"]["giftCertificateConsignment_Get"][];
      };
    };
    giftCertificateConsignment_Get: {
      /**
       * @description The recipient email of the gift certificate.
       * @example recipient@email.com
       */
      recipient_email?: string;
      line_items?: components["schemas"]["products_Resource"][];
    };
    pickupConsignment_Get: {
      /**
       * @description The ID of the pickup consignment to update.
       * @example 99
       */
      id?: number;
      /**
       * @description ID of the pickup method.
       * @example 1
       */
      pickup_method_id?: number;
    } & components["schemas"]["pickupConsignment_Base"] & {
      location?: components["schemas"]["pickupConsignmentLocation_Get"];
      line_items?: components["schemas"]["products_Resource"][];
    };
    pickupConsignmentLocation_Get: {
      /**
       * @description ID of the location.
       * @example 1
       */
      id?: number;
    } & components["schemas"]["pickupConsignmentLocation_Base"];
    shippingConsignment_Get: {
      /**
       * @description ID of the shipping consignment.
       * @example 99
       */
      id?: number;
    } & components["schemas"]["shippingConsignment_Base"] & {
      line_items?: components["schemas"]["products_Resource"][];
      /**
       * @description The total number of items in the order.
       * @example 1
       */
      items_total?: number;
      /**
       * @description The number of items that have been shipped.
       * @example 0
       */
      items_shipped?: number;
      /**
       * @description Text identifying the BigCommerce shipping module selected by the customer.
       * @example Free Shipping
       */
      shipping_method?: string;
      /**
       * @description The base shipping cost value.
       * @example 5.1
       */
      base_cost?: number;
      /**
       * @description The shipping cost value excluding tax.
       * @example 5.1
       */
      cost_ex_tax?: number;
      /**
       * @description The shipping cost value including tax.
       * @example 6.2
       */
      cost_inc_tax?: number;
      /**
       * @description The tax amount on the shipping cost.
       * @example 1.1
       */
      cost_tax?: number;
      /**
       * @description The ID of the tax class applied to the shipping cost. Ignored if automatic tax is enabled.
       * @example 2
       */
      cost_tax_class_id?: number;
      /**
       * @description The base handling charge.
       * @example 4.1
       */
      base_handling_cost?: number;
      /**
       * @description The handling charge, excluding tax.
       * @example 4.1
       */
      handling_cost_ex_tax?: number;
      /**
       * @description The handling charge, including tax.
       * @example 5.3
       */
      handling_cost_inc_tax?: number;
      /** @example 1.2 */
      handling_cost_tax?: number;
      /**
       * @description The ID of the tax class applied to the handling charge. Ignored if automatic tax is enabled.
       * @example 2
       */
      handling_cost_tax_class_id?: number;
      /**
       * @description The numeric ID of the shipping zone.
       * @example 1
       */
      shipping_zone_id?: number;
      /**
       * @description The name of the shipping zone.
       * @example United States
       */
      shipping_zone_name?: string;
      shipping_quotes?: components["schemas"]["shippingQuotesConsignment_Resource"];
    };
    /** shippingConsignment_Base */
    shippingConsignment_Base: {
      /** @example Jane */
      first_name?: string;
      /** @example Doe */
      last_name?: string;
      /** @example Laser Ltd */
      company?: string;
      /**
       * @description Street address (first line).
       * @example 123 Main Street
       */
      street_1?: string;
      /** @description Street address (second line). */
      street_2?: string;
      /** @example Austin */
      city?: string;
      /**
       * @description Zip or postal code, as a string.
       * @example 12345
       */
      zip?: string;
      /** @example United States */
      country?: string;
      /**
       * @description 2-letter ISO Alpha-2 code for the country.
       * @example US
       */
      country_iso2?: string;
      /** @example Texas */
      state?: string;
      /**
       * @description Recipientâ€™s email address.
       * @example janedoe@example.com
       */
      email?: string;
      /**
       * @description Recipientâ€™s telephone number.
       * @example 0410999888
       */
      phone?: string;
      form_fields?: components["schemas"]["formFields"][];
    };
    readonly shippingQuotesConsignment_Resource: {
      /**
       * @description URL where you can use a GET request to get the shipping quotes for the order consignment.
       * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/163/consignments/shipping/64/shipping_quotes
       */
      readonly url?: string;
      /**
       * @description Path where you can use a GET request to get the shipping quotes for the order consignment.
       * @example /orders/163/consignments/shipping/64/shipping_quotes
       */
      readonly resource?: string;
    };
    digitalConsignment_Get: {
      /**
       * @description The recipient email of the digital consignment.
       * @example recipient@email.com
       */
      recipient_email?: string;
      line_items?: components["schemas"]["products_Resource"][];
    };
  };
  responses: {
    /** @description Get All Order Status Collection Response. */
    orderStatusCollection_Resp: {
      content: {
        "application/json": components["schemas"]["orderStatus_Base"][];
      };
    };
    orderStatus_Resp: {
      content: {
        "application/json": components["schemas"]["orderStatus_Base"];
      };
    };
    orderCollection_Resp: {
      content: {
        "application/json": components["schemas"]["order_Resp"][];
      };
    };
    /** @description Order Counter response collection. */
    ordersCount_Resp: {
      content: {
        "application/json": components["schemas"]["ordersCount_Full"];
      };
    };
    /** @description Order Response. */
    order_Resp: {
      content: {
        "application/json": components["schemas"]["order_Resp"];
      };
    };
    orderCouponsCollection_Resp: {
      content: {
        "application/json": components["schemas"]["orderCoupons_Base"][];
      };
    };
    orderMessagesCollection_Resp: {
      content: {
        "application/json": components["schemas"]["orderMessages"];
      };
    };
    orderProductsCollection_Resp: {
      content: {
        "application/json": components["schemas"]["orderProducts"][];
      };
    };
    orderProductLineItem_Resp: {
      content: {
        "application/json": components["schemas"]["orderProducts"];
      };
    };
    orderShipmentCollection_Resp: {
      content: {
        "application/json": components["schemas"]["orderShipment"][];
      };
    };
    orderShipment_Resp: {
      content: {
        "application/json": components["schemas"]["orderShipment"];
      };
    };
    orderCount_Resp: {
      content: {
        "application/json": components["schemas"]["orderCount"];
      };
    };
    orderShippingAddressCollection_Resp: {
      content: {
        "application/json": components["schemas"]["orderShippingAddress"][];
      };
    };
    orderShippingAddress_Resp: {
      content: {
        "application/json": components["schemas"]["orderShippingAddress"];
      };
    };
    /** @description This response can vary depending on the shipping provider. */
    shippingQuotes_Resp: {
      content: {
        "application/json": components["schemas"]["shippingQuotes_Base"];
        "Fixed Shipping": unknown;
        "UPS Example": unknown;
      };
    };
    orderTaxes_Resp: {
      content: {
        "application/json": components["schemas"]["orderTaxes_Base"][];
      };
    };
    /** @description Not Found */
    "404_Resp": {
      content: {
        "application/json": {
            status?: number;
            message?: string;
          }[];
      };
    };
  };
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description The minimum order ID. */
    min_id?: number;
    /** @description The maximum order ID. */
    max_id?: number;
    /** @description The minimum order total in floating point format. eg. 12.50 */
    min_total?: number;
    /** @description The maximum order total in floating point format. eg. 12.50 */
    max_total?: number;
    /** @description Customer ID. */
    customer_id?: number;
    /** @description The email of the customer. */
    email?: string;
    /** @description The status ID of the order. You can get the status id from the `/orders` endpoints. */
    status_id?: number;
    /** @description The status ID of the order. You can get the status id from the `/orders` endpoints. */
    status_id_path: number;
    /** @description The cart ID of the order. */
    cart_id?: string;
    /** @description If the order was deleted or archived. */
    is_deleted?: boolean;
    /** @description The display name of the payment method used on the order. */
    payment_method?: "Manual" | "Cash on Delivery" | "Credit Card" | "Test Payment Gateway" | "Pay In Store";
    /**
     * @description Minimum date the order was created in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    min_date_created?: string;
    /**
     * @description Maximum date the order was created in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    max_date_created?: string;
    /**
     * @description Minimum date the order was modified in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    min_date_modified?: string;
    /**
     * @description Maximum date the order was modified in RFC-2822 or ISO-8601.
     *
     * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
     *
     * ISO-8601: `2017-04-20T11:32:00.000-04:00`
     */
    max_date_modified?: string;
    /** @description The page to return in the response. */
    page?: number;
    /** @description Number of results to return. */
    limit?: number;
    /** @description Field and direction to sort orders. To specify the direction, add `:asc` or `:desc` to the end of the query parameter. e.g., `sort=date_created:desc`. */
    sort?: "id" | "customer_id" | "date_created" | "date_modified" | "status_id" | "channel_id" | "external_id";
    /** @description Status of the order message. */
    status?: "read" | "unread";
    /** @description If the message is [flagged](https://support.bigcommerce.com/s/article/Communicating-with-Customers#Messages). */
    is_flagged?: boolean;
    /** @description ID of the order. */
    order_id_path: number;
    /** @description ID of the product. */
    product_id_path: number;
    /** @description Shipping address ID. */
    shipping_address_id_path: number;
    /** @description Shipment ID. */
    shipment_id_path: number;
    /** @description The Channel ID of the Order. */
    channel_id?: number;
    /** @description Shipping consignment ID. */
    shipping_consignment_id: number;
    /**
     * @description * `consignments` - include the response returned from the request to the `/orders/{order_id}/consignments` endpoint.
     *
     * * `consignments.line_items` - include the response returned from the request to the `/orders/{order_id}/products` endpoint in consignments. This implies `include=consignments`.
     */
    order_includes?: "consignments" | "consignments.line_items";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get an Order
   * @description Gets an *Order*. To learn more about creating or updating orders, see [Orders Overview](/docs/store-operations/orders).
   */
  getOrder: {
    parameters: {
      query?: {
        include?: components["parameters"]["order_includes"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      200: components["responses"]["order_Resp"];
      /** @description The requested resource was not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Update an Order
   * @description Updates an *Order*.
   *
   * To add a product to an existing order, don't include `id` in the body. Include `product_options` if adding a product with variants.
   *
   * To update a product in an order, include `id` in the body. The body should only contain the fields that need to be updated. Those fields that are omitted will not be changed.
   *
   * To remove a product from an order, set that productâ€™s `quantity` to `0`.
   *
   * To learn more about creating or updating orders, see [Orders Overview](/docs/store-operations/orders).
   */
  updateOrder: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["order_Put"];
      };
    };
    responses: {
      200: components["responses"]["order_Resp"];
    };
  };
  /**
   * Archive an Order
   * @description Archives an order. To remove a single product from an order, see `PUT /orders/{order_id}`.
   */
  deleteOrder: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /**
   * Get a Count of Orders
   * @description Gets an array of orders in the store organized by order status.
   */
  getOrdersCount: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["ordersCount_Resp"];
    };
  };
  /**
   * Get All Orders
   * @description Gets a list of orders using the filter query.
   *
   * **Notes**
   *
   * * The default sort is by order id, from lowest to highest.
   * * By default, requests sent without parameters will only return 50 orders.
   */
  getOrders: {
    parameters: {
      query?: {
        min_id?: components["parameters"]["min_id"];
        max_id?: components["parameters"]["max_id"];
        min_total?: components["parameters"]["min_total"];
        max_total?: components["parameters"]["max_total"];
        customer_id?: components["parameters"]["customer_id"];
        email?: components["parameters"]["email"];
        status_id?: components["parameters"]["status_id"];
        cart_id?: components["parameters"]["cart_id"];
        payment_method?: components["parameters"]["payment_method"];
        min_date_created?: components["parameters"]["min_date_created"];
        max_date_created?: components["parameters"]["max_date_created"];
        min_date_modified?: components["parameters"]["min_date_modified"];
        max_date_modified?: components["parameters"]["max_date_modified"];
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
        sort?: components["parameters"]["sort"];
        is_deleted?: components["parameters"]["is_deleted"];
        channel_id?: components["parameters"]["channel_id"];
        include?: components["parameters"]["order_includes"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["orderCollection_Resp"];
    };
  };
  /**
   * Create an Order
   * @description Creates an *Order*. To learn more about creating or updating orders, see [Orders Overview](/docs/store-operations/orders).
   *
   * Create an order with an existing catalog product or a custom product.
   *
   * **Required Fields**
   *
   * * `products` or `consignments`
   * * `billing_address`
   *
   * When you create an order, the `consignment(s)` array allows you to create pickup consignments.
   * - An order can have either a pickup or a shipping fulfillment method, but not both.
   * - An order can have only one pickup consignment.
   *
   * Choose from one of the following:
   * 1. Create order with a shipping fulfillment method using `shipping_addresses` and `products`, i.e. legacy mode
   * 2. Create order with a pickup fulfillment method using `consignments`, i.e. Consignment mode
   *
   * You can fulfill an order with shipping or pickup, but not both.
   *
   * This means that if the `consignments` array is present in the request, then _none_ of the following may be present and vice-versa:
   * - `shipping_addresses`
   * - `products`
   */
  createOrder: {
    parameters: {
      query?: {
        include?: components["parameters"]["order_includes"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["order_Post"];
      };
    };
    responses: {
      200: components["responses"]["order_Resp"];
    };
  };
  /**
   * Delete All Orders
   * @description Archives all orders.
   */
  deleteOrders: {
    parameters: {
      query?: {
        limit?: components["parameters"]["limit"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /**
   * List Order Coupons
   * @description Lists all order coupons. Optional parameters can be passed in.
   *
   * |Type `int`|Type Name|
   * |-|-|
   * |`0`|`per_item_discount`|
   * |`1`|`percentage_discount`|
   * |`2`|`per_total_discount`|
   * |`3`|`shipping_discount`|
   * |`4`|`free_shipping`|
   * |`5`|`promotion`|
   */
  getOrderCoupons: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderCouponsCollection_Resp"];
    };
  };
  /**
   * List Order Products
   * @description Lists 50 order products on an order using `order_id`. By default, items sort from lowest to highest according to a newly created ID, separate from the `order_id` and the `product_id`.
   */
  getOrderProducts: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderProductsCollection_Resp"];
    };
  };
  /**
   * Get Order Shipping Addresses
   * @description Get all shipping addresses on an order using the `order_id`.
   *
   * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
   */
  getOrderShippingAddresses: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderShippingAddressCollection_Resp"];
    };
  };
  /**
   * Get All Order Statuses
   * @description Returns a Collection of All Order Statuses.
   *
   * **Order Status Descriptions:**
   * |Status ID | Name  | Description |
   * |--|--|--|
   * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
   * | 1 | Pending |Customer started the checkout process, but did not complete it. |
   * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
   * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
   * | 4 | Refunded | Seller has used the Refund action. |
   * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
   * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
   * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
   * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
   * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
   * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
   * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
   * | 12 | Manual Verification Required | Order is on hold while some aspect needs to be manually confirmed. |
   * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
   * | 14 | Partially Refunded | Seller has partially refunded the order. |
   */
  getOrderStatuses: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["orderStatusCollection_Resp"];
    };
  };
  /**
   * Get a Single Order Status by ID
   * @description Returns a single order status.
   *
   * **Order Status Descriptions**
   * |Status ID | Name  | Description |
   * |:--|:--|:--|
   * | 0 | Incomplete  | An incomplete order happens when a shopper reached the payment page, but did not complete the transaction. |
   * | 1 | Pending |Customer started the checkout process, but did not complete it. |
   * | 2 | Shipped | Order has been shipped, but receipt has not been confirmed; seller has used the Ship Items action. |
   * | 3 | Partially Shipped | Only some items in the order have been shipped, due to some products being pre-order only or other reasons. |
   * | 4 | Refunded | Seller has used the Refund action. |
   * | 5 | Cancelled | Seller has cancelled an order, due to a stock inconsistency or other reasons. |
   * | 6 |Declined | Seller has marked the order as declined for lack of manual payment, or other reasons. |
   * | 7 | Awaiting Payment | Customer has completed checkout process, but payment has yet to be confirmed. |
   * | 8 | Awaiting Pickup | Order has been pulled, and is awaiting customer pickup from a seller-specified location. |
   * | 9 | Awaiting Shipment | Order has been pulled and packaged, and is awaiting collection from a shipping provider. |
   * | 10 | Completed | Client has paid for their digital product and their file(s) are available for download. |
   * | 11 | Awaiting Fulfillment | Customer has completed the checkout process and payment has been confirmed. |
   * | 12 | Manual Verification Required | Order is on hold while some aspect needs to be manually confirmed. |
   * | 13 | Disputed | Customer has initiated a dispute resolution process for the PayPal transaction that paid for the order. |
   * | 14 | Partially Refunded | Seller has partially refunded the order. |
   */
  getOrderStatusesStatus: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        status_id: components["parameters"]["status_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderStatus_Resp"];
    };
  };
  /**
   * Get All Order Taxes
   * @description Gets all order taxes using `order_id`.
   * Each tax applied to an order. This information can be useful for reporting purposes.
   * Pass in the query parameter `?details=true` to return extra details about order taxes.
   * `order_product_id` and `line_item_type` are also returned.
   *
   * All values are read-only.
   */
  getOrderTaxes: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
        /** @description To return detailed tax information, pass in the details query. */
        details?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderTaxes_Resp"];
    };
  };
  /**
   * Get Order Shipments
   * @description Gets a list of all shipments on an order.
   */
  getOrderShipments: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderShipmentCollection_Resp"];
    };
  };
  /**
   * Create Order Shipment
   * @description Creates an *Order Shipment*. For more details, see [Shipping an Order](/docs/store-operations/orders#creating-order-shipments).
   *
   * **Required Fields**
   * *   order_address_id
   * *   items
   *
   * **Usage notes**
   *
   * There are three methods for generating a tracking link for a shipment:
   *
   * 1. Use `shipping_provider` and `tracking_number`: This generates an automatic tracking link that you can click from the BigCommerce control panel and customer-facing emails. The `generated_tracking_link` property in the API response represents this tracking link. The `tracking_link` property in the API response will remain empty.
   *
   * 2. Use `tracking_carrier` and `tracking_number`: This also creates an automatic tracking link that you can click in both the BigCommerce control panel and customer-facing emails. Like the previous method, the `generated_tracking_link` property in the API response represents this tracking link. The `tracking_link` property in the API response will remain empty.
   *
   * 3. Supply a custom `tracking_link`: By providing a value for the `tracking_link` property, you can use your own tracking link within the BigCommerce control panel and in customer-facing emails. The API response will return your supplied tracking link as part of the `tracking_link` property in the response. In situations when there isn't a `generated_tracking_link`, the property in the API response will remain empty.
   *
   * Acceptable values for `shipping_provider` include an empty string (`""`), `auspost`, `carrier_{your_carrier_id}` (only used if the carrier is a [third-party Shipping Provider](/docs/integrations/shipping)), `canadapost`, `endicia`, `usps`, `fedex`, `royalmail`, `ups`, `upsready`, `upsonline`, or `shipperhq`.
   *
   * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid [tracking-carrier values](https://github.com/bigcommerce/dev-docs/blob/master/assets/csv/tracking_carrier_values.csv).
   */
  createOrderShipments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["orderShipment_Post"];
      };
    };
    responses: {
      201: components["responses"]["orderShipment_Resp"];
    };
  };
  /**
   * Delete Order Shipments
   * @description Deletes all shipments associated with an order.
   */
  deleteOrderShipments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /**
   * Get Count of Order Shipments
   * @description Gets a count of the number of shipments that have been made for a single order.
   */
  getOrderShipmentsCount: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderCount_Resp"];
    };
  };
  /**
   * Get a Shipment
   * @description Gets an order shipment.
   */
  getOrderShipment: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        shipment_id: components["parameters"]["shipment_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderShipment_Resp"];
    };
  };
  /**
   * Update a Shipment
   * @description Updates an existing shipment associated with an order.
   */
  updateOrderShipment: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        shipment_id: components["parameters"]["shipment_id_path"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["orderShipment_Put"];
      };
    };
    responses: {
      200: components["responses"]["orderShipment_Resp"];
    };
  };
  /**
   * Delete an Order Shipment
   * @description Deletes a shipment associated with an order.
   */
  deleteOrderShipment: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        shipment_id: components["parameters"]["shipment_id_path"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /**
   * Get Order Messages
   * @description Gets the messages associated with an order.
   */
  getOrderMessages: {
    parameters: {
      query?: {
        min_id?: components["parameters"]["min_id"];
        max_id?: components["parameters"]["max_id"];
        customer_id?: components["parameters"]["customer_id"];
        min_date_created?: components["parameters"]["min_date_created"];
        max_date_created?: components["parameters"]["max_date_created"];
        is_flagged?: components["parameters"]["is_flagged"];
        status?: components["parameters"]["status"];
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderMessagesCollection_Resp"];
    };
  };
  /**
   * Get an Order Product
   * @description Gets a product line item associated with the order.
   */
  getOrderProduct: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        product_id: components["parameters"]["product_id_path"];
      };
    };
    responses: {
      200: components["responses"]["orderProductLineItem_Resp"];
    };
  };
  /**
   * Get a Shipping Address
   * @description Gets a shipping address associated with an order.
   *
   * Returned in the response is shipping_quotes object. Please use the Get Shipping Quotes Endpoint. Using the response will return a 204 for the shipping quote.
   */
  getOrderShippingAddress: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        /** @description Shipping address ID. */
        id: string;
      };
    };
    responses: {
      200: components["responses"]["orderShippingAddress_Resp"];
    };
  };
  /**
   * Update a Shipping Address
   * @description Update a shipping address associated with an order.
   *
   * **Note**: Updating a shipping address will NOT trigger the recalculation of shipping cost and tax
   */
  updateOrderShippingAddress: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        /** @description Shipping address ID. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["shippingAddress_Put"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["orderShippingAddress"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
              status?: number;
              message?: string;
            }[];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
              status?: number;
              message?: string;
            }[];
        };
      };
    };
  };
  /**
   * Get Order Shipping Quotes
   * @description Gets all shipping quotes persisted on an order.
   *
   * This is a read-only endpoint and the output can vary based on the shipping quote. A shipping quote can only be generated using the storefront at this time. Orders that are created in the control panel or using the API return a 204 for this endpoint since a shipping quote is not generated during that process.
   */
  getOrderShippingAddressShippingQuotes: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["order_id_path"];
        shipping_address_id: components["parameters"]["shipping_address_id_path"];
      };
    };
    responses: {
      200: components["responses"]["shippingQuotes_Resp"];
    };
  };
  /**
   * Get Consignments
   * @description Get all consignments for an order.
   */
  getOrderConsignments: {
    parameters: {
      query?: {
        /** @description * `consignments.line_items` - include the response returned from the request to the `/orders/{order_id}/products` endpoint in consignments. */
        include?: "consignments.line_items";
      };
      path: {
        order_id: string;
        order_id: components["parameters"]["order_id_path"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["orderConsignment_Get"];
        };
      };
      404: components["responses"]["404_Resp"];
    };
  };
  /**
   * Get Consignment Shipping Quotes
   * @description Get all shipping quotes persisted on an order for a shipping consignment.
   * This is a read-only endpoint whose response depends on the shipping quote. You can only generate a shipping quote using the storefront at this time. Orders that are created in the control panel, or using the API, return a 204 status response since you can't generate a shipping quote during that process.
   */
  getOrderConsignmentShippingQuotes: {
    parameters: {
      path: {
        order_id: components["parameters"]["order_id_path"];
        shipping_consignment_id: components["parameters"]["shipping_consignment_id"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["shippingQuotes_Base"];
        };
      };
      404: components["responses"]["404_Resp"];
    };
  };
}
