// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/catalog/products/{product_id}/options": {
    /**
     * Get All Product Variant Options
     * @description Returns a list of product *Variant Options*. Optional parameters can be passed in.
     */
    get: operations["getOptions"];
    /**
     * Create a Product Variant Option
     * @description Creates a *Variant Option*.
     *
     * **Required Fields**
     * * display_name
     * * type
     * * option_values
     *
     * **Read-Only Fields**
     * * id
     *
     * **Limits**
     * * 255 characters option name length.
     *
     * **Notes**
     *
     * * Only one variant option at a time can be created; individual variant options will contain an array of multiple values.
     * * There are several examples listed below that create options, but the SKUs are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request.
     * * Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created.
     * * If more than one variant needs to be created, use the [Create a Product](/docs/rest-catalog/products#create-a-product) endpoint.
     */
    post: operations["createOption"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/options/{option_id}": {
    /**
     * Get a Product Variant Option
     * @description Returns a single *Variant Option*. Optional parameters can be passed in.
     */
    get: operations["getOptionById"];
    /**
     * Update a Product Variant Option
     * @description Updates a *Variant Option*.
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations["updateOption"];
    /**
     * Delete a Product Variant Option
     * @description Deletes a *Variant Option*.
     */
    delete: operations["deleteOptionById"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/options/{option_id}/values": {
    /**
     * Get All Product Variant Option Values
     * @description Returns a list of all *Variant Option Values*. Optional parameters can be passed in.
     */
    get: operations["getOptionValues"];
    /**
     * Create a Product Variant Option Value
     * @description Creates a *Variant Option Value*.
     *
     * **Required Fields**
     * * label
     * * sort_order
     *
     * **Read-Only Fields**
     * * id
     *
     * **Limits**
     * * 250 option values per option limit.
     */
    post: operations["createOptionValue"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/options/{option_id}/values/{value_id}": {
    /**
     * Get a Product Variant Option Value
     * @description Returns a single *Variant Option Value*. Optional parameters can be passed in.
     */
    get: operations["getOptionValueById"];
    /**
     * Update a Product Variant Option Value
     * @description Updates a *Variant Option Value*.
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations["updateOptionValue"];
    /**
     * Delete a Product Variant Option Value
     * @description Deletes a *Variant Option Value*.
     */
    delete: operations["deleteOptionValueById"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
        value_id: components["parameters"]["ValueIdParam"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * productOption_Base
     * @description Common Option properties.
     */
    productOption_Base: {
      /**
       * @description The unique numerical ID of the option, increments sequentially.
       *
       * @example 55
       */
      id?: number | null;
      /**
       * @description The unique numerical ID of the product to which the option belongs.
       *
       * @example 4
       */
      product_id?: number;
      /**
       * @description The name of the option shown on the storefront.
       *
       * @example Add-a-$5-Donation1535042499-187
       */
      display_name?: string;
      /**
       * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
       *
       * @enum {string}
       */
      type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
      config?: components["schemas"]["productOptionConfig_Full"];
      /**
       * @description Order in which the option is displayed on the storefront.
       * @example 1
       */
      sort_order?: number;
      option_values?: components["schemas"]["productOptionOptionValue_Full"][];
    };
    /** productOption_Full */
    productOption_Full: components["schemas"]["productOption_Base"] & {
      /**
       * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
       *
       * @example Add-a-$5-Donation1535042499-187
       */
      name?: string;
    };
    /**
     * productOptionOptionValue_Base
     * @description Common Product Option `option_value` properties.
     */
    productOptionOptionValue_Base: {
      /**
       * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
       *
       * @example false
       */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /**
       * @description The order in which the value will be displayed on the product page. Required in a /POST.
       *
       * @example 0
       */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
      value_data?: Record<string, unknown> | null;
    };
    /**
     * productOptionOptionValue_Full
     * @description Product Option `option_value`.
     */
    productOptionOptionValue_Full: components["schemas"]["productOptionOptionValue_Base"] & {
      /** @description The unique numeric ID of the value; increments sequentially. */
      id?: number;
    };
    /**
     * productOptionConfig_Full
     * @description The values for option config can vary based on the Modifier created.
     */
    productOptionConfig_Full: {
      /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string. */
      default_value?: string;
      /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
      checked_by_default?: boolean;
      /** @description (checkbox) Label displayed for the checkbox option. */
      checkbox_label?: string;
      /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
      date_limited?: boolean;
      /**
       * @description (date) The type of limit that is allowed to be entered on a date option.
       *
       * @example range
       * @enum {string}
       */
      date_limit_mode?: "earliest" | "range" | "latest";
      /**
       * Format: date
       * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_earliest_value?: string;
      /**
       * Format: date
       * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_latest_value?: string;
      /**
       * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
       *
       * @example specific
       * @enum {string}
       */
      file_types_mode?: "specific" | "all";
      /**
       * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      file_types_supported?: string[];
      /** @description (file) A list of other file types allowed with the file upload option. */
      file_types_other?: string[];
      /**
       * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
       *
       * @example 5
       */
      file_max_size?: number;
      /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      text_characters_limited?: boolean;
      /**
       * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
       *
       * @example 1
       */
      text_min_length?: number;
      /**
       * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
       *
       * @example 55
       */
      text_max_length?: number;
      /**
       * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
       *
       * @example true
       */
      text_lines_limited?: boolean;
      /**
       * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
       *
       * @example 4
       */
      text_max_lines?: number;
      /**
       * @description (numbers_only_text) Flag to limit the value of a number option.
       *
       * @example true
       */
      number_limited?: boolean;
      /**
       * @description (numbers_only_text) The type of limit on values entered for a number option.
       *
       * @example lowest
       * @enum {string}
       */
      number_limit_mode?: "lowest" | "highest" | "range";
      /**
       * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
       *
       * @example 100
       */
      number_lowest_value?: number;
      /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      number_highest_value?: number;
      /**
       * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
       *
       * @example false
       */
      number_integers_only?: boolean;
      /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      product_list_adjusts_inventory?: boolean;
      /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
      product_list_adjusts_pricing?: boolean;
      /**
       * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
       *
       * @example weight
       * @enum {string}
       */
      product_list_shipping_calc?: "none" | "weight" | "package";
    };
    /**
     * metaCollection_Full
     * @description Data about the response, including pagination and collection totals.
     */
    metaCollection_Full: {
      pagination?: components["schemas"]["pagination_Full"];
    };
    /**
     * pagination_Full
     * @description Data about the response, including pagination and collection totals.
     */
    pagination_Full: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    metaEmpty_Full: {
      [key: string]: unknown;
    };
  };
  responses: never;
  parameters: {
    /** @description The ID of the `Product` to which the resource belongs. */
    ProductIdParam: number;
    /** @description The ID of the `Modifier/Option Value`. */
    ValueIdParam: number;
    /** @description The ID of the `Option`. */
    OptionIdParam: number;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Product Variant Options
   * @description Returns a list of product *Variant Options*. Optional parameters can be passed in.
   */
  getOptions: {
    parameters: {
      query?: {
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productOption_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Product Variant Option
   * @description Creates a *Variant Option*.
   *
   * **Required Fields**
   * * display_name
   * * type
   * * option_values
   *
   * **Read-Only Fields**
   * * id
   *
   * **Limits**
   * * 255 characters option name length.
   *
   * **Notes**
   *
   * * Only one variant option at a time can be created; individual variant options will contain an array of multiple values.
   * * There are several examples listed below that create options, but the SKUs are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request.
   * * Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created.
   * * If more than one variant needs to be created, use the [Create a Product](/docs/rest-catalog/products#create-a-product) endpoint.
   */
  createOption: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique numerical ID of the product to which the option belongs.
           *
           * @example 4
           */
          product_id?: number;
          /**
           * @description The name of the option shown on the storefront.
           *
           * @example Add-a-$5-Donation1535042499-187
           */
          display_name?: string;
          /**
           * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
           *
           * @enum {string}
           */
          type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
          /**
           * Option Config
           * @description The values for option config can vary based on the Modifier created.
           */
          config?: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string. */
            default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             * @enum {string}
             */
            date_limit_mode?: "earliest" | "range" | "latest";
            /**
             * Format: date-time
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2018-08-31T00:00:00+00:00
             */
            date_earliest_value?: string;
            /**
             * Format: date-time
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2019-01-01T00:00:00+00:00
             */
            date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             * @enum {string}
             */
            file_types_mode?: "specific" | "all";
            /**
             * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             *
             * @example [
             *   "images",
             *   "documents",
             *   "other"
             * ]
             */
            file_types_supported?: string[];
            /**
             * @description (file) A list of other file types allowed with the file upload option.
             *
             * @example [
             *   "pdf",
             *   "txt"
             * ]
             */
            file_types_other?: string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             * @enum {string}
             */
            number_limit_mode?: "lowest" | "highest" | "range";
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /**
             * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
             *
             * @example false
             */
            number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             * @enum {string}
             */
            product_list_shipping_calc?: "none" | "weight" | "package";
          };
          /**
           * @description Order in which the option is displayed on the storefront.
           * @example 1
           */
          sort_order?: number;
          option_values?: ({
              /**
               * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
               *
               * @example false
               */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /**
               * @description The order in which the value will be displayed on the product page. Required in a /POST.
               *
               * @example 0
               */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: Record<string, never>;
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            })[];
          /** @description Publicly available image url */
          image_url?: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Option */
            data?: ({
              /**
               * @description The unique numerical ID of the option, increments sequentially.
               *
               * @example 55
               */
              id?: number;
              /**
               * @description The unique numerical ID of the product to which the option belongs.
               *
               * @example 4
               */
              product_id?: number;
              /**
               * @description The name of the option shown on the storefront.
               *
               * @example Add-a-$5-Donation1535042499-187
               */
              display_name?: string;
              /**
               * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
               *
               * @enum {string}
               */
              type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
              /**
               * Option Config
               * @description The values for option config can vary based on the Modifier created.
               */
              config?: {
                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string. */
                default_value?: string;
                /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                checked_by_default?: boolean;
                /** @description (checkbox) Label displayed for the checkbox option. */
                checkbox_label?: string;
                /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                date_limited?: boolean;
                /**
                 * @description (date) The type of limit that is allowed to be entered on a date option.
                 *
                 * @example range
                 * @enum {string}
                 */
                date_limit_mode?: "earliest" | "range" | "latest";
                /**
                 * Format: date-time
                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_earliest_value?: string;
                /**
                 * Format: date-time
                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_latest_value?: string;
                /**
                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                 *
                 * @example specific
                 * @enum {string}
                 */
                file_types_mode?: "specific" | "all";
                /**
                 * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                 *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                 *   `other` - Allows file types defined in the `file_types_other` array.
                 */
                file_types_supported?: string[];
                /** @description (file) A list of other file types allowed with the file upload option. */
                file_types_other?: string[];
                /**
                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                 *
                 * @example 5
                 */
                file_max_size?: number;
                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                text_characters_limited?: boolean;
                /**
                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                 *
                 * @example 1
                 */
                text_min_length?: number;
                /**
                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                 *
                 * @example 55
                 */
                text_max_length?: number;
                /**
                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                 *
                 * @example true
                 */
                text_lines_limited?: boolean;
                /**
                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                 *
                 * @example 4
                 */
                text_max_lines?: number;
                /**
                 * @description (numbers_only_text) Flag to limit the value of a number option.
                 *
                 * @example true
                 */
                number_limited?: boolean;
                /**
                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                 *
                 * @example lowest
                 * @enum {string}
                 */
                number_limit_mode?: "lowest" | "highest" | "range";
                /**
                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                 *
                 * @example 100
                 */
                number_lowest_value?: number;
                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                number_highest_value?: number;
                /**
                 * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
                 *
                 * @example false
                 */
                number_integers_only?: boolean;
                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                product_list_adjusts_inventory?: boolean;
                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                product_list_adjusts_pricing?: boolean;
                /**
                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                 *
                 * @example weight
                 * @enum {string}
                 */
                product_list_shipping_calc?: "none" | "weight" | "package";
              };
              /**
               * @description Order in which the option is displayed on the storefront.
               * @example 1
               */
              sort_order?: number;
              option_values?: ({
                  /**
                   * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                   *
                   * @example false
                   */
                  is_default?: boolean;
                  /**
                   * @description The text display identifying the value on the storefront. Required in a /POST.
                   *
                   * @example Green
                   */
                  label: string;
                  /**
                   * @description The order in which the value will be displayed on the product page. Required in a /POST.
                   *
                   * @example 0
                   */
                  sort_order: number;
                  /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                  value_data?: Record<string, never>;
                } & {
                  /** @description The unique numeric ID of the value; increments sequentially. */
                  id?: number;
                })[];
              /** @description Publicly available image url */
              image_url?: string;
            }) & {
              /**
               * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
               *
               * @example Add-a-$5-Donation1535042499-187
               */
              name?: string;
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: Record<string, never>;
          };
        };
      };
      /** @description Option was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description Option was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Variant Option
   * @description Returns a single *Variant Option*. Optional parameters can be passed in.
   */
  getOptionById: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productOption_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Variant Option
   * @description Updates a *Variant Option*.
   *
   * **Read-Only Fields**
   * * id
   */
  updateOption: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique numerical ID of the option, increments sequentially.
           *
           * @example 55
           */
          id?: number | null;
          /**
           * @description The unique numerical ID of the product to which the option belongs.
           *
           * @example 4
           */
          product_id?: number;
          /**
           * @description The name of the option shown on the storefront.
           *
           * @example Add-a-$5-Donation1535042499-187
           */
          display_name?: string;
          /**
           * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
           *
           * @enum {string}
           */
          type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
          /**
           * Option Config
           * @description The values for option config can vary based on the Modifier created.
           */
          config?: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string. */
            default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             * @enum {string}
             */
            date_limit_mode?: "earliest" | "range" | "latest";
            /**
             * Format: date-time
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2018-08-31T00:00:00+00:00
             */
            date_earliest_value?: string;
            /**
             * Format: date-time
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             * @example 2019-01-01T00:00:00+00:00
             */
            date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             * @enum {string}
             */
            file_types_mode?: "specific" | "all";
            /**
             * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             *
             * @example [
             *   "images",
             *   "documents",
             *   "other"
             * ]
             */
            file_types_supported?: string[];
            /**
             * @description (file) A list of other file types allowed with the file upload option.
             *
             * @example [
             *   "pdf",
             *   "txt"
             * ]
             */
            file_types_other?: string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             * @enum {string}
             */
            number_limit_mode?: "lowest" | "highest" | "range";
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /**
             * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
             *
             * @example false
             */
            number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             * @enum {string}
             */
            product_list_shipping_calc?: "none" | "weight" | "package";
          };
          /**
           * @description Order in which the option is displayed on the storefront.
           * @example 1
           */
          sort_order?: number;
          option_values?: ({
              /**
               * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
               *
               * @example false
               */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /**
               * @description The order in which the value will be displayed on the product page. Required in a /POST.
               *
               * @example 0
               */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: Record<string, never>;
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            })[];
          /** @description Publicly available image url */
          image_url?: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Option */
            data?: ({
              /**
               * @description The unique numerical ID of the option, increments sequentially.
               *
               * @example 55
               */
              id?: number;
              /**
               * @description The unique numerical ID of the product to which the option belongs.
               *
               * @example 4
               */
              product_id?: number;
              /**
               * @description The name of the option shown on the storefront.
               *
               * @example Add-a-$5-Donation1535042499-187
               */
              display_name?: string;
              /**
               * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
               *
               * @enum {string}
               */
              type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
              /**
               * Option Config
               * @description The values for option config can vary based on the Modifier created.
               */
              config?: {
                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string. */
                default_value?: string;
                /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                checked_by_default?: boolean;
                /** @description (checkbox) Label displayed for the checkbox option. */
                checkbox_label?: string;
                /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                date_limited?: boolean;
                /**
                 * @description (date) The type of limit that is allowed to be entered on a date option.
                 *
                 * @example range
                 * @enum {string}
                 */
                date_limit_mode?: "earliest" | "range" | "latest";
                /**
                 * Format: date
                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_earliest_value?: string;
                /**
                 * Format: date
                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                 */
                date_latest_value?: string;
                /**
                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                 *
                 * @example specific
                 * @enum {string}
                 */
                file_types_mode?: "specific" | "all";
                /**
                 * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                 *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                 *   `other` - Allows file types defined in the `file_types_other` array.
                 */
                file_types_supported?: string[];
                /** @description (file) A list of other file types allowed with the file upload option. */
                file_types_other?: string[];
                /**
                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                 *
                 * @example 5
                 */
                file_max_size?: number;
                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                text_characters_limited?: boolean;
                /**
                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                 *
                 * @example 1
                 */
                text_min_length?: number;
                /**
                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                 *
                 * @example 55
                 */
                text_max_length?: number;
                /**
                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                 *
                 * @example true
                 */
                text_lines_limited?: boolean;
                /**
                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                 *
                 * @example 4
                 */
                text_max_lines?: number;
                /**
                 * @description (numbers_only_text) Flag to limit the value of a number option.
                 *
                 * @example true
                 */
                number_limited?: boolean;
                /**
                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                 *
                 * @example lowest
                 * @enum {string}
                 */
                number_limit_mode?: "lowest" | "highest" | "range";
                /**
                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                 *
                 * @example 100
                 */
                number_lowest_value?: number;
                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                number_highest_value?: number;
                /**
                 * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
                 *
                 * @example false
                 */
                number_integers_only?: boolean;
                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                product_list_adjusts_inventory?: boolean;
                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                product_list_adjusts_pricing?: boolean;
                /**
                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                 *
                 * @example weight
                 * @enum {string}
                 */
                product_list_shipping_calc?: "none" | "weight" | "package";
              };
              /**
               * @description Order in which the option is displayed on the storefront.
               * @example 1
               */
              sort_order?: number;
              option_values?: ({
                  /**
                   * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                   *
                   * @example false
                   */
                  is_default?: boolean;
                  /**
                   * @description The text display identifying the value on the storefront. Required in a /POST.
                   *
                   * @example Green
                   */
                  label: string;
                  /**
                   * @description The order in which the value will be displayed on the product page. Required in a /POST.
                   *
                   * @example 0
                   */
                  sort_order: number;
                  /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                  value_data?: Record<string, never>;
                } & {
                  /** @description The unique numeric ID of the value; increments sequentially. */
                  id?: number;
                })[];
              /** @description Publicly available image url */
              image_url?: string;
            }) & {
              /**
               * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
               *
               * @example Add-a-$5-Donation1535042499-187
               */
              name?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The `Option` was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `Option` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Variant Option
   * @description Deletes a *Variant Option*.
   */
  deleteOptionById: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get All Product Variant Option Values
   * @description Returns a list of all *Variant Option Values*. Optional parameters can be passed in.
   */
  getOptionValues: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
        /** @description The ID of the `Option`. */
        option_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: ({
                /**
                 * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                 *
                 * @example false
                 */
                is_default?: boolean;
                /**
                 * @description The text display identifying the value on the storefront. Required in a /POST.
                 *
                 * @example Green
                 */
                label: string;
                /**
                 * @description The order in which the value will be displayed on the product page. Required in a /POST.
                 *
                 * @example 0
                 */
                sort_order: number;
                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                value_data?: Record<string, never>;
              } & {
                /** @description The unique numeric ID of the value; increments sequentially. */
                id?: number;
              })[];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Create a Product Variant Option Value
   * @description Creates a *Variant Option Value*.
   *
   * **Required Fields**
   * * label
   * * sort_order
   *
   * **Read-Only Fields**
   * * id
   *
   * **Limits**
   * * 250 option values per option limit.
   */
  createOptionValue: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
        /** @description The ID of the `Option`. */
        option_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
           *
           * @example false
           */
          is_default?: boolean;
          /**
           * @description The text display identifying the value on the storefront. Required in a /POST.
           *
           * @example Green
           */
          label: string;
          /**
           * @description The order in which the value will be displayed on the product page. Required in a /POST.
           *
           * @example 0
           */
          sort_order: number;
          /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          value_data?: Record<string, never>;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Option Value */
            data?: {
              /**
               * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
               *
               * @example false
               */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /**
               * @description The order in which the value will be displayed on the product page. Required in a /POST.
               *
               * @example 0
               */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: Record<string, never>;
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Variant Option Value
   * @description Returns a single *Variant Option Value*. Optional parameters can be passed in.
   */
  getOptionValueById: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
        value_id: components["parameters"]["ValueIdParam"];
        /** @description The ID of the `Option`. */
        option_id: number;
        /** @description The ID of the `Modifier/Option Value`. */
        value_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Option Value */
            data?: {
              /**
               * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
               *
               * @example false
               */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /**
               * @description The order in which the value will be displayed on the product page. Required in a /POST.
               *
               * @example 0
               */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: Record<string, never>;
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Variant Option Value
   * @description Updates a *Variant Option Value*.
   *
   * **Read-Only Fields**
   * * id
   */
  updateOptionValue: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
        value_id: components["parameters"]["ValueIdParam"];
        /** @description The ID of the `Option`. */
        option_id: number;
        /** @description The ID of the `Modifier/Option Value`. */
        value_id: number;
      };
    };
    /** @description A BigCommerce `OptionValue` object. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
           *
           * @example false
           */
          is_default?: boolean;
          /**
           * @description The text display identifying the value on the storefront. Required in a /POST.
           *
           * @example Green
           */
          label: string;
          /**
           * @description The order in which the value will be displayed on the product page. Required in a /POST.
           *
           * @example 0
           */
          sort_order: number;
          /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
          value_data?: Record<string, never>;
        } & {
          /** @description The unique numeric ID of the value; increments sequentially. */
          id?: number;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Option Value */
            data?: {
              /**
               * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
               *
               * @example false
               */
              is_default?: boolean;
              /**
               * @description The text display identifying the value on the storefront. Required in a /POST.
               *
               * @example Green
               */
              label: string;
              /**
               * @description The order in which the value will be displayed on the product page. Required in a /POST.
               *
               * @example 0
               */
              sort_order: number;
              /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
              value_data?: Record<string, never>;
            } & {
              /** @description The unique numeric ID of the value; increments sequentially. */
              id?: number;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description No option(s) were found with this query. */
      404: {
        content: {
        };
      };
      /** @description The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Variant Option Value
   * @description Deletes a *Variant Option Value*.
   */
  deleteOptionValueById: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        option_id: components["parameters"]["OptionIdParam"];
        value_id: components["parameters"]["ValueIdParam"];
        /** @description The ID of the `Option`. */
        option_id: number;
        /** @description The ID of the `Modifier/Option Value`. */
        value_id: number;
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
}
