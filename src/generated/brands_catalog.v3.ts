// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/catalog/brands": {
    /**
     * Get All Brands
     * @description Returns a list of brands. Optional filter parameters can be passed in.
     */
    get: operations["getBrands"];
    /**
     * Create a Brand
     * @description Creates a brand.
     *
     * **Required Fields**
     * - name
     *
     * **Limits**
     * - 30,000 brands per store limit
     */
    post: operations["createBrand"];
    /**
     * Delete Brands
     * @description To delete brand objects, you must include a value for the name filter.
     */
    delete: operations["deleteBrands"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/catalog/brands/{brand_id}": {
    /**
     * Get a Brand
     * @description Returns a single brand. Optional filter parameters can be passed in.
     */
    get: operations["getBrand"];
    /**
     * Update a Brand
     * @description Updates a brand.
     *
     * To update a brand image, send a request with an `image_url`.
     */
    put: operations["updateBrand"];
    /**
     * Delete a Brand
     * @description Deletes a brand.
     */
    delete: operations["deleteBrand"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
  };
  "/catalog/brands/{brand_id}/metafields": {
    /**
     * Get brand metafields
     * @description Returns a list of brand metafields. Optional filter parameters can be passed in.
     */
    get: operations["getBrandMetafields"];
    /**
     * Create a Brand Metafield
     * @description Creates a brand metafield.
     *
     * **Note:** The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    post: operations["createBrandMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
  };
  "/catalog/brands/{brand_id}/metafields/{metafield_id}": {
    /**
     * Get a Brand Metafields
     * @description Returns a brand metafield. Optional filter parameters can be passed in.
     */
    get: operations["getBrandMetafield"];
    /**
     * Update a Brand Metafield
     * @description Updates a brand metafield.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     * * The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    put: operations["updateBrandMetafield"];
    /**
     * Delete a Brand Metafield
     * @description Deletes a brand metafield.
     */
    delete: operations["deleteBrandMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
        metafield_id: components["parameters"]["MetafieldIdPath"];
      };
    };
  };
  "/catalog/brands/{brand_id}/image": {
    /**
     * Create a Brand Image
     * @description Creates a brand image.
     *
     * **Required Fields**
     * - image_file: Form posts are the only accepted upload option. For more information on how to upload an image see [Adding product images](docs/store-operations/catalog#adding-product-images). NOTE:  Ensure you set the `Content-Type` header to `multipart/form-data; boundary=--example-boundary--` and set the correct URL for this endpoint.
     *
     * **Read-Only Fields**
     * - id
     *
     * Only one image at a time can be created. To update a brand image, use the [Update a brand](/docs/rest-catalog/brands#update-a-brand) endpoint and an `image_url`.
     */
    post: operations["createBrandImage"];
    /**
     * Delete a Brand Image
     * @description Deletes a brand image.
     */
    delete: operations["deleteBrandImage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
  };
  "/catalog/brands/metafields": {
    /**
     * Get All Brand Metafields
     * @description Get all brand metafields.
     */
    get: operations["getBrandsMetafields"];
    /**
     * Update multiple metafields
     * @description Create multiple metafields.
     */
    put: operations["updateBrandsMetafields"];
    /**
     * Create multiple metafields
     * @description Create multiple metafields.
     */
    post: operations["createBrandsMetafields"];
    /**
     * Delete Multiple Metafields
     * @description Delete all brand metafields.
     */
    delete: operations["deleteBrandsMetafields"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * brand_Full
     * @description Common Brand properties.
     */
    brand_Full: {
      /** @description Unique ID of the brand. */
      id?: number;
      /**
       * @description The name of the brand. Must be unique.
       * Required in POST.
       * @example Common Good
       */
      name: string;
      /**
       * @description The title shown in the browser while viewing the brand.
       *
       * @example Common Good
       */
      page_title?: string;
      /**
       * @description An array of meta keywords to include in the HTML.
       *
       * @example [
       *   "modern",
       *   "clean",
       *   "contemporary"
       * ]
       */
      meta_keywords?: string[];
      /**
       * @description A meta description to include.
       *
       * @example Common Good is a modern brand.
       */
      meta_description?: string;
      /**
       * @description A comma-separated list of keywords that can be used to locate this brand.
       *
       * @example kitchen, laundry, cart, storage
       */
      search_keywords?: string;
      /**
       * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
       *
       * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
       */
      image_url?: string;
      custom_url?: components["schemas"]["customUrl_Full"];
    };
    /**
     * metafield_Base
     * @description Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    metafield_Base: {
      /**
       * @description The name of the field, for example: `location_id`, `color`. Required for POST.
       *
       * @example Location
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`. Required for POST.
       *
       * @example 4HG
       */
      value: string;
      /**
       * @description Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
       *
       * @example Warehouse Locations
       */
      namespace: string;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description
       * |-|-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Description for the metafields.
       *
       * @example Location in the warehouse
       */
      description?: string;
    };
    /**
     * customUrl_Full
     * @description The custom URL for the product on the storefront.
     */
    customUrl_Full: {
      /** @description Product URL on the storefront. */
      url?: string;
      /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
      is_customized?: boolean;
    };
    /**
     * metaCollection_Full
     * @description Data about the response, including pagination and collection totals.
     */
    metaCollection_Full: {
      pagination?: components["schemas"]["pagination_Full"];
    };
    /**
     * pagination_Full
     * @description Data about the response, including pagination and collection totals.
     */
    pagination_Full: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    metaEmpty_Full: {
      [key: string]: unknown;
    };
    /**
     * error_Base
     * @description Error payload for the BigCommerce API.
     */
    error_Base: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    };
    /** metafield_Full */
    metafield_Full: {
      /**
       * @description Unique ID of the metafield.
       * @example 6
       */
      id?: number;
    } & components["schemas"]["metafield_Base"] & ({
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example product
       * @enum {string}
       */
      resource_type?: "category" | "brand" | "product" | "variant";
      /**
       * @description The ID of the resource with which the metafield is associated.
       *
       * @example 111
       */
      resource_id?: number;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation.
       *
       * @example 2018-05-07T20:14:17+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       *
       * @example 2018-05-07T20:14:17+00:00
       */
      date_modified?: string;
      /**
       * @description Client ID for the metafieldʼs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    });
    /** @description Common Metafield properties. */
    Metafield: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example order
       */
      description?: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example cart
       * @enum {string}
       */
      resource_type?: "brand" | "product" | "variant" | "category" | "cart" | "channel" | "location" | "order" | "customer";
      /**
       * @description The unique identifier for the resource with which the metafield is associated.
       *
       * @example 424242
       */
      resource_id?: number;
      /** @description The unique identifier for the metafield. */
      id?: number;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_modified?: string;
      /**
       * @description Client ID for the metafieldʼs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse: {
      data?: components["schemas"]["Metafield"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_DELETE: {
      /**
       * @example [
       *   123
       * ]
       */
      data?: number[];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionDeleteResponseSuccess: {
      /**
       * @example [
       *   123,
       *   124,
       *   125
       * ]
       */
      data?: number[];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionPartialSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 1
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 2
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 3
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 0
       */
      failed?: number;
    };
    /**
     * @description Total number of items in the result set.
     *
     * @example 3
     */
    Total: number;
    /** @description Error response payload for the BigCommerce API. */
    Error: {
      /**
       * @description The HTTP status code for the error.
       *
       * @example 422
       */
      status?: number;
      /**
       * @description The error title.
       *
       * @example Bulk operation has failed
       */
      title?: string;
      /**
       * @description The error type.
       *
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      errors?: components["schemas"]["ErrorDetail"];
    };
    /**
     * @description Error detail response payload for the BigCommerce API.
     *
     * @example {
     *   "1": "Unauthorized to delete",
     *   "2": "Metafield does not exist"
     * }
     */
    ErrorDetail: {
      [key: string]: unknown;
    };
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
      [key: string]: unknown;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Post: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** @description The model for a POST to create metafield. */
    MetafieldPost: components["schemas"]["MetafieldBase_Post"] & {
      /**
       * @description The ID for the resource with which the metafield is associated.
       *
       * @example 42
       */
      resource_id: number;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Put: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** Error Response */
    NotFoundError: {
      /** @description The HTTP status code. */
      status: number;
      /** @description The error title describing the particular error. */
      title: string;
      type: string;
    };
    /** Error response */
    Conflict: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      /** Detailed Errors */
      errors?: Record<string, never>;
    };
  };
  responses: {
    Error: {
      content: {
        "application/json": components["schemas"]["error_Base"];
      };
    };
    ErrorWithDetails: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Not Found */
    NotFoundError: {
      content: {
        "application/json": components["schemas"]["NotFoundError"];
      };
    };
    /** @description Unauthorized */
    UnauthorizedError: {
      content: {
        "plain/text": string;
      };
    };
    /** @description Bad Request */
    BadRequestError: {
      content: {
        "plain/text": string;
      };
    };
    /** @description Multi-status. Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but the URL or inventory data failed to save. */
    MultiStatus: {
      content: {
        "application/json": {
          data?: components["schemas"]["brand_Full"][];
          errors?: components["schemas"]["Error"];
          meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
      };
    };
    /** @description Conflict */
    Conflict: {
      content: {
        "application/json": components["schemas"]["Conflict"];
      };
    };
  };
  parameters: {
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionQuery?: "asc" | "desc";
    /** @description The ID of the brand to which the resource belongs. */
    BrandIdPath: number;
    /** @description The ID of the `Metafield`. */
    MetafieldIdPath: number;
    /** @description Filter based on a metafieldʼs key. */
    MetafieldKeyParam?: string;
    /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
    MetafieldKeyInParam?: string[];
    /** @description Filter based on a metafieldʼs namespaces. */
    MetafieldNamespaceParam?: string;
    /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
    MetafieldNamespaceInParam?: string[];
    /** @description 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.' */
    date_created_min?: string;
    /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.' */
    date_created_max?: string;
    /** @description 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.' */
    date_modified_max?: string;
    /** @description 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.' */
    date_modified_min?: string;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam?: "asc" | "desc";
    /** @description Filter items by ID. */
    IdQuery?: number;
    IdInQuery?: number[];
    IdNotInQuery?: number[];
    IdMinQuery?: number[];
    IdMaxQuery?: number[];
    IdGreaterQuery?: number[];
    IdLessQuery?: number[];
    /** @description Filter items by name. */
    NameQuery?: string;
    /** @description Filter items by name. */
    NameRequired: string;
    /** @description Filter items by part of a name. For example, `name:like=new` returns brands with names that include `new`. */
    NameLikeQuery?: string;
    /** @description Filter items by page_title. */
    PageTitleQuery?: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageQuery?: number;
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitQuery?: number;
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    IncludeFieldsQuery?: string[];
    /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
    ExcludeFieldsQuery?: string[];
    /** @description Field name to sort by. */
    SortQuery?: "name";
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    IncludeFieldsParamMetafields?: ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Brands
   * @description Returns a list of brands. Optional filter parameters can be passed in.
   */
  getBrands: {
    parameters: {
      query?: {
        id?: components["parameters"]["IdQuery"];
        "id:in"?: components["parameters"]["IdInQuery"];
        "id:not_in"?: components["parameters"]["IdNotInQuery"];
        "id:min"?: components["parameters"]["IdMinQuery"];
        "id:max"?: components["parameters"]["IdMaxQuery"];
        "id:greater"?: components["parameters"]["IdGreaterQuery"];
        "id:less"?: components["parameters"]["IdLessQuery"];
        name?: components["parameters"]["NameQuery"];
        "name:like"?: components["parameters"]["NameLikeQuery"];
        page_title?: components["parameters"]["PageTitleQuery"];
        page?: components["parameters"]["PageQuery"];
        limit?: components["parameters"]["LimitQuery"];
        include_fields?: components["parameters"]["IncludeFieldsQuery"];
        exclude_fields?: components["parameters"]["ExcludeFieldsQuery"];
        sort?: components["parameters"]["SortQuery"];
        direction?: components["parameters"]["DirectionQuery"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["brand_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["Error"];
    };
  };
  /**
   * Create a Brand
   * @description Creates a brand.
   *
   * **Required Fields**
   * - name
   *
   * **Limits**
   * - 30,000 brands per store limit
   */
  createBrand: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The name of the brand. Must be unique.
           * Required in POST.
           * @example Common Good
           */
          name: string;
          /**
           * @description The title shown in the browser while viewing the brand.
           *
           * @example Common Good
           */
          page_title?: string;
          /**
           * @description An array of meta keywords to include in the HTML.
           *
           * @example [
           *   "modern",
           *   "clean",
           *   "contemporary"
           * ]
           */
          meta_keywords?: string[];
          /**
           * @description A meta description to include.
           *
           * @example Common Good is a modern brand.
           */
          meta_description?: string;
          /**
           * @description A comma-separated list of keywords that can be used to locate this brand.
           *
           * @example kitchen, laundry, cart, storage
           */
          search_keywords?: string;
          /**
           * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
           *
           * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
           */
          image_url?: string;
          /**
           * Custom Url Brand
           * @description The custom URL for the brand on the storefront. If not provided, the URL will be autogenerated from the brand name.
           */
          custom_url?: {
            /**
             * @description Brand URL on the storefront.
             *
             * @example /shoes
             */
            url?: string;
            /**
             * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             * @example true
             */
            is_customized?: boolean;
          };
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Brand
             * @description Common Brand properties.
             */
            data?: {
              /** @description Unique ID of the brand. */
              id?: number;
              /**
               * @description The name of the brand. Must be unique.
               * Required in POST.
               * @example Common Good
               */
              name?: string;
              /**
               * @description The title shown in the browser while viewing the brand.
               *
               * @example Common Good
               */
              page_title?: string;
              /**
               * @description An array of meta keywords to include in the HTML.
               *
               * @example [
               *   "modern",
               *   "clean",
               *   "contemporary"
               * ]
               */
              meta_keywords?: string[];
              /**
               * @description A meta description to include.
               *
               * @example Common Good is a modern brand.
               */
              meta_description?: string;
              /**
               * @description A comma-separated list of keywords that can be used to locate this brand.
               *
               * @example kitchen, laundry, cart, storage
               */
              search_keywords?: string;
              /**
               * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
               *
               * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
               */
              image_url?: string;
              /**
               * Custom Url Brand
               * @description The custom URL for the brand on the storefront.
               */
              custom_url?: {
                /**
                 * @description Brand URL on the storefront.
                 *
                 * @example /shoes
                 */
                url?: string;
                /**
                 * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                 *
                 * @example true
                 */
                is_customized?: boolean;
              };
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      207: components["responses"]["MultiStatus"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["Error"];
      404: components["responses"]["NotFoundError"];
      /** @description Brand was in conflict with another brand. This is the result of duplicate unique fields such as name. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description Brand was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete Brands
   * @description To delete brand objects, you must include a value for the name filter.
   */
  deleteBrands: {
    parameters: {
      query: {
        name: components["parameters"]["NameRequired"];
        page_title?: components["parameters"]["PageTitleQuery"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["Error"];
      422: components["responses"]["Error"];
    };
  };
  /**
   * Get a Brand
   * @description Returns a single brand. Optional filter parameters can be passed in.
   */
  getBrand: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsQuery"];
        exclude_fields?: components["parameters"]["ExcludeFieldsQuery"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["brand_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      207: components["responses"]["MultiStatus"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["Error"];
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      409: components["responses"]["Conflict"];
      422: components["responses"]["ErrorWithDetails"];
    };
  };
  /**
   * Update a Brand
   * @description Updates a brand.
   *
   * To update a brand image, send a request with an `image_url`.
   */
  updateBrand: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Unique ID of the brand. */
          id?: number;
          /**
           * @description The name of the brand. Must be unique.
           * Required in POST.
           * @example Common Good
           */
          name: string;
          /**
           * @description The title shown in the browser while viewing the brand.
           *
           * @example Common Good
           */
          page_title?: string;
          /**
           * @description An array of meta keywords to include in the HTML.
           *
           * @example [
           *   "modern",
           *   "clean",
           *   "contemporary"
           * ]
           */
          meta_keywords?: string[];
          /**
           * @description A meta description to include.
           *
           * @example Common Good is a modern brand.
           */
          meta_description?: string;
          /**
           * @description A comma-separated list of keywords that can be used to locate this brand.
           *
           * @example kitchen, laundry, cart, storage
           */
          search_keywords?: string;
          /**
           * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
           *
           * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
           */
          image_url?: string;
          /**
           * Custom Url Brand
           * @description The custom URL for the brand on the storefront.
           */
          custom_url?: {
            /**
             * @description Brand URL on the storefront.
             *
             * @example /shoes
             */
            url?: string;
            /**
             * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             * @example true
             */
            is_customized?: boolean;
          };
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Brand
             * @description Common Brand properties.
             */
            data?: {
              /** @description Unique ID of the brand. */
              id?: number;
              /**
               * @description The name of the brand. Must be unique.
               * Required in POST.
               * @example Common Good
               */
              name: string;
              /**
               * @description The title shown in the browser while viewing the brand.
               *
               * @example Common Good
               */
              page_title?: string;
              /**
               * @description An array of meta keywords to include in the HTML.
               *
               * @example [
               *   "modern",
               *   "clean",
               *   "contemporary"
               * ]
               */
              meta_keywords?: string[];
              /**
               * @description A meta description to include.
               *
               * @example Common Good is a modern brand.
               */
              meta_description?: string;
              /**
               * @description A comma-separated list of keywords that can be used to locate this brand.
               *
               * @example kitchen, laundry, cart, storage
               */
              search_keywords?: string;
              /**
               * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
               *
               * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
               */
              image_url?: string;
              /**
               * Custom Url Brand
               * @description The custom URL for the brand on the storefront.
               */
              custom_url?: {
                /**
                 * @description Brand URL on the storefront.
                 *
                 * @example /shoes
                 */
                url?: string;
                /**
                 * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                 *
                 * @example true
                 */
                is_customized?: boolean;
              };
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      207: components["responses"]["MultiStatus"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["Error"];
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `Brand` was in conflict with another product. This is the result of duplicate unique values, such as `name`. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `Brand` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Brand
   * @description Deletes a brand.
   */
  deleteBrand: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["Error"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Get brand metafields
   * @description Returns a list of brand metafields. Optional filter parameters can be passed in.
   */
  getBrandMetafields: {
    parameters: {
      query?: {
        id?: components["parameters"]["IdQuery"];
        "id:in"?: components["parameters"]["IdInQuery"];
        "id:not_in"?: components["parameters"]["IdNotInQuery"];
        "id:min"?: components["parameters"]["IdMinQuery"];
        "id:max"?: components["parameters"]["IdMaxQuery"];
        "id:greater"?: components["parameters"]["IdGreaterQuery"];
        "id:less"?: components["parameters"]["IdLessQuery"];
        page?: components["parameters"]["PageQuery"];
        limit?: components["parameters"]["LimitQuery"];
        key?: components["parameters"]["MetafieldKeyParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        include_fields?: components["parameters"]["IncludeFieldsQuery"];
        exclude_fields?: components["parameters"]["ExcludeFieldsQuery"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Create a Brand Metafield
   * @description Creates a brand metafield.
   *
   * **Note:** The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  createBrandMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["metafield_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: Record<string, never>;
          };
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combination of the appʼs client id, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Brand Metafields
   * @description Returns a brand metafield. Optional filter parameters can be passed in.
   */
  getBrandMetafield: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsQuery"];
        exclude_fields?: components["parameters"]["ExcludeFieldsQuery"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
        metafield_id: components["parameters"]["MetafieldIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Brand Metafield
   * @description Updates a brand metafield.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified by the app (API credentials) that created the metafield:
   * 	* namespace
   * 	* key
   * 	* permission_set
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
   * * The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  updateBrandMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
        metafield_id: components["parameters"]["MetafieldIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MetafieldBase_Put"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Brand Metafield
   * @description Deletes a brand metafield.
   */
  deleteBrandMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
        metafield_id: components["parameters"]["MetafieldIdPath"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Brand Image
   * @description Creates a brand image.
   *
   * **Required Fields**
   * - image_file: Form posts are the only accepted upload option. For more information on how to upload an image see [Adding product images](docs/store-operations/catalog#adding-product-images). NOTE:  Ensure you set the `Content-Type` header to `multipart/form-data; boundary=--example-boundary--` and set the correct URL for this endpoint.
   *
   * **Read-Only Fields**
   * - id
   *
   * Only one image at a time can be created. To update a brand image, use the [Update a brand](/docs/rest-catalog/brands#update-a-brand) endpoint and an `image_url`.
   */
  createBrandImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          image_file?: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: {
              image_url?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description Image was not valid. This is the result of a missing `image_file` field, or of an incorrect file type. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Brand Image
   * @description Deletes a brand image.
   */
  deleteBrandImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        brand_id: components["parameters"]["BrandIdPath"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get All Brand Metafields
   * @description Get all brand metafields.
   */
  getBrandsMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageQuery"];
        limit?: components["parameters"]["LimitQuery"];
        key?: components["parameters"]["MetafieldKeyParam"];
        "key:in"?: components["parameters"]["MetafieldKeyInParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
        direction?: components["parameters"]["DirectionParam"];
        include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description List of `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            errors?: unknown;
          };
        };
      };
    };
  };
  /**
   * Update multiple metafields
   * @description Create multiple metafields.
   */
  updateBrandsMetafields: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Put"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            id: number;
          })[];
      };
    };
    responses: {
      /** @description List of updated `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            errors?: Record<string, never>;
          };
        };
      };
      /** @description JSON data is missing or invalid */
      422: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            /** @description Empty for 200 responses. */
            errors?: Record<string, never>;
          };
        };
      };
    };
  };
  /**
   * Create multiple metafields
   * @description Create multiple metafields.
   */
  createBrandsMetafields: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID for the brand with which the metafield is associated.
             *
             * @example 42
             */
            resource_id: number;
          })[];
      };
    };
    responses: {
      /** @description List of created `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Delete Multiple Metafields
   * @description Delete all brand metafields.
   */
  deleteBrandsMetafields: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    /** @description List of metafield IDs. */
    requestBody?: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Response object for metafields deletion with success. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields deletion with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
        };
      };
    };
  };
}
