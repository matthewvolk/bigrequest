// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/pickup/methods": {
    /**
     * Get Pickup Methods
     * @description Retrieves a list of pickup methods.
     *
     * ## Examples
     *
     * You can filter this list to return pickup method objects specific to a list of requested pickup method IDs. This is achieved by appending the query string `?id:in=1,3,5` to the resource `/pickup/methods`.
     *
     * ```http
     * GET /pickup/methods?id:in=1,3,5
     * ```
     */
    get: operations["get-pickup-methods"];
    /**
     * Update Pickup Methods
     * @description Update existing pickup methods.
     *
     * This batch operation can update 10 pickup method objects in one request.
     *
     * Only the `id` property of the pickup method object is required as part of the request. Pickup method properties that are not provided will maintain their existing values.
     *
     * ## Limits
     * * Limit of updating 10 pickup method objects per `PUT` request.
     */
    put: operations["put-pickup-methods"];
    /**
     * Create Pickup Methods
     * @description Creates one or many pickup methods.
     *
     * This is a batch operation that can create up to 100 pickup methods objects in one request.
     *
     * ## Limits
     * * Limit of creating 100 pickup method objects per `POST` request.
     */
    post: operations["post-pickup-methods"];
    /**
     * Delete Pickup Methods
     * @description Delete existing pickup methods.
     */
    delete: operations["delete-pickup-methods"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BasePickupMethod: {
      /**
       * @description The ID of the location.
       * @example 2
       */
      location_id?: number;
      /**
       * @description Title of the pickup method.
       * @example Office Pickup!
       */
      display_name?: string;
      /**
       * @description Instructions for picking up items.
       * @example Bring your ID!
       */
      collection_instructions?: string;
      /**
       * @description The description of collection time.
       * @example Collect during our opening hours of 0900 - 1700
       */
      collection_time_description?: string;
      /**
       * @deprecated
       * @example 2
       */
      location_identity?: number;
    };
    PickupMethodResponse: {
      /**
       * @description The ID of the pickup method.
       * @example 1
       */
      id?: number;
    } & components["schemas"]["BasePickupMethod"] & {
      /**
       * Format: date-time
       * @description Filter pickup methods by time created.
       *
       * Time is presented in ISO-8601 format.
       * @example 2023-06-06T00:00:20Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Filter pickup methods by time modified.
       *
       * Time is presented in ISO-8601 format.
       * @example 2023-06-08T00:00:20Z
       */
      date_modified?: string;
    };
    MetaCollection: {
      pagination?: {
        /**
         * @description Total number of items in the result set.
         * @example 123
         */
        total?: number;
        /**
         * @description The total number of items in the collection on the current page.
         * @example 100
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         * @example 100
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         * @example 2
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description A link to the previous page is returned in the response. */
          previous?: string;
          /** @description A link to the current page is returned in the response. */
          current?: string;
          /** @description A link to the next page is returned in the response. */
          next?: string;
        };
      };
    };
  };
  responses: never;
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Pickup Methods
   * @description Retrieves a list of pickup methods.
   *
   * ## Examples
   *
   * You can filter this list to return pickup method objects specific to a list of requested pickup method IDs. This is achieved by appending the query string `?id:in=1,3,5` to the resource `/pickup/methods`.
   *
   * ```http
   * GET /pickup/methods?id:in=1,3,5
   * ```
   */
  "get-pickup-methods": {
    parameters: {
      query?: {
        /** @description Comma separated list of pickup method IDs. */
        "id:in"?: number;
        /** @description Maximum number of results per page. */
        limit?: number;
        /** @description The number of the page to be fetched. */
        page?: number;
        /**
         * @description Filter pickup methods by the date created. Return methods created on the provided date.
         *
         * For example, `date_created=2023-09-07T06:23:13Z`.
         * @example 2023-09-07T06:23:13Z
         */
        date_created?: string;
        /**
         * @description Filter pickup methods by minimum date created. Return methods created after the provided date.
         *
         * For example, `date_created:min=2023-09-07T06:23:13Z`.
         * @example 2023-09-07T06:23:13Z
         */
        "date_created:min"?: string;
        /**
         * @description Filter pickup methods by maximum date created. Return methods created before the provided date.
         *
         * For example, `date_created:max=2023-09-07T06:23:13Z`.
         * @example 2023-09-07T06:23:13Z
         */
        "date_created:max"?: string;
        /**
         * @description Filter pickup methods by date modified. Return methods modified on the provided date.
         *
         * For example, `date_modified=2023-09-07T06:23:13Z`.
         * @example 2023-09-07T06:23:13Z
         */
        date_modified?: string;
        /**
         * @description Filter pickup methods by minimum date modified. Return methods modified after the provided date.
         *
         * For example, `date_modified:min=2023-09-07T06:23:13Z`.
         * @example 2023-09-07T06:23:13Z
         */
        "date_modified:min"?: string;
        /**
         * @description Filter pickup methods by maximum date modified. Return methods modified before the provided date.
         *
         * For example, `date_modified:max=2023-09-07T06:23:13Z`.
         * @example 2023-09-07T06:23:13Z
         */
        "date_modified:max"?: string;
        /**
         * @description Sort pickup methods by date_modified:* or name:* ; for example, `sort=name:asc`.
         *
         * - `date_modified:asc` - sort by date modified in ascending order
         * - `date_modified:desc` - sort by date modified in descending order
         * - `name:asc` - sort by name in ascending order
         * - `name:desc` - sort by name in descending order
         */
        sort?: "date_modified:asc" | "date_modified:desc" | "name:asc" | "name:desc";
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description The request has been processed and a list of pickup methods has been returned successfully. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["PickupMethodResponse"][];
            meta?: components["schemas"]["MetaCollection"];
          };
        };
      };
    };
  };
  /**
   * Update Pickup Methods
   * @description Update existing pickup methods.
   *
   * This batch operation can update 10 pickup method objects in one request.
   *
   * Only the `id` property of the pickup method object is required as part of the request. Pickup method properties that are not provided will maintain their existing values.
   *
   * ## Limits
   * * Limit of updating 10 pickup method objects per `PUT` request.
   */
  "put-pickup-methods": {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": ({
            /**
             * @description The ID of the pickup method.
             * @example 1
             */
            id?: number;
          } & components["schemas"]["BasePickupMethod"])[];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["PickupMethodResponse"][];
            meta?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Create Pickup Methods
   * @description Creates one or many pickup methods.
   *
   * This is a batch operation that can create up to 100 pickup methods objects in one request.
   *
   * ## Limits
   * * Limit of creating 100 pickup method objects per `POST` request.
   */
  "post-pickup-methods": {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BasePickupMethod"][];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["PickupMethodResponse"][];
            meta?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Delete Pickup Methods
   * @description Delete existing pickup methods.
   */
  "delete-pickup-methods": {
    parameters: {
      query: {
        /** @description Comma separated list of pickup method IDs. */
        "id:in": number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
}
