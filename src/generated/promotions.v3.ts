// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/promotions": {
    /**
     * Get All Promotions
     * @description Returns a list of *promotions*.
     *
     * The response includes the display name and other details about each promotion, and lists the promotions ordered by ID by default.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    get: operations["getPromotions"];
    /**
     * Create Promotion
     * @description Creates a *promotion*.
     * To learn more about how to create a *promotion*, read the [Promotions Overview](/docs/store-operations/promotions).
     * For examples grouped by use case, see the [promotions examples](/docs/store-operations/promotions/examples/brand).
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    post: operations["createPromotion"];
    /**
     * Delete Multiple Promotions
     * @description Deletes multiple promotions. Currently, batches are limited to 50 promotions.
     *
     * **Notes**
     * * "id:in" query param is required to delete promotions. If this parameter is not provided, or provided with the wrong data format, a 422 error code is returned.
     * * You cannot delete promotions that still have coupon codes attached.
     * * The default rate limit for this endpoint is 40 concurrent requests.
     */
    delete: operations["deletePromotions"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/promotions/{id}": {
    /**
     * Get Promotion
     * @description Returns a single *promotion*.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests
     */
    get: operations["getPromotion"];
    /**
     * Update Promotion
     * @description Update a promotion.
     *
     * **Note:**
     * The default rate limit for this request is 40 concurrent requests.
     */
    put: operations["updatePromotion"];
    /**
     * Delete Promotion
     * @description Deletes a promotion.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    delete: operations["deletePromotion"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/promotions/{promotion_id}/codes": {
    /**
     * Get Coupon Codes
     * @description Get codes for a particular promotion.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    get: operations["getPromotionCodes"];
    /**
     * Create A Coupon Code
     * @description Create a new code for the promotion.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    post: operations["createPromotionCode"];
    /**
     * Delete Multiple Coupon Codes
     * @description Deletes multiple coupon codes relating to the given promotion. Currently, batches are limited to 50 coupon codes.
     *
     * **Notes**
     * * "id:in" query param is required to delete coupon codes. If not provided, or provided with the wrong data format, a 422 error code is returned.
     * * The default rate limit for this endpoint is 40 concurrent requests.
     */
    delete: operations["deleteCouponCodes"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/promotions/{promotion_id}/codes/{code_id}": {
    /**
     * Delete A Coupon Code
     * @description Deletes a coupon code.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    delete: operations["deleteCouponCode"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description Describes which client originally created the promotion
     * @enum {unknown}
     */
    readonly CreatedFrom: "react_ui" | "legacy_ui" | "api";
    /**
     * PromotionBase
     * @description **Promotion**
     * A *promotion* is composed of a condition that a customer can satisfy (such as increasing their cart value above a certain amount or adding an item to their cart) and an action will take place (such as a discount on the customerâ€™s order total, or a free item being added to their cart).
     */
    PromotionBase: {
      /**
       * @description An auto-generated unique identifier for the discount rule.
       * @example 1
       */
      id?: number;
      /**
       * @description A read-only field indicating the type of promotion. Promotions applied automatically have a value of `AUTOMATIC` whereas promotions requiring a coupon have a value of `COUPON`.
       * @enum {string}
       */
      redemption_type?: "AUTOMATIC" | "COUPON";
      /**
       * @description An internal name for this rule that the merchant can refer to.
       * @example Buy Product X Get Free Shipping
       */
      name?: string;
      /**
       * @description Customer-facing name for this rule, that the merchant want to display to customers.
       * @example WOW!!! FREE SHIPPING for Product X
       */
      display_name?: string;
      /** @description Channels that the promotion targets. Empty array [] means targeting all the channels. In POST request, if omitted, this field defaults to an empty array [] value. */
      channels?: components["schemas"]["Channel"][];
      customer?: components["schemas"]["Customer"];
      /** @description An ordered list of rules to be executed until the first applicable one applies a discount successfully and the rest will be skipped. */
      rules?: components["schemas"]["Rule"][];
      /**
       * @description A read-only count of the times this rule has been used by customers. A rule is considered to be used when a customer successfully checks out with a rule that has applied a discount to their cart.
       * @example 2
       */
      current_uses?: number;
      /**
       * @description The maximum number of times this discount can be used by customers.
       * @example 10
       */
      max_uses?: number;
      /**
       * @description Controls whether or not a discount rule can be used by customers. `INVALID` is a read-only status into which enabled discount rules may transition when they become invalid.
       * @enum {string}
       */
      status?: "ENABLED" | "DISABLED" | "INVALID";
      /**
       * @description The date and time when this rule will become active.
       * @example 2005-12-30T01:02:03+00:00
       */
      start_date?: string;
      /**
       * @description The date and time when this rule will expire. If this property is left null, the promotion never expires.
       * @example 2025-12-30T01:02:03+00:00
       */
      end_date?: string;
      /**
       * @description Boolean value that specifies whether to stop evaluating promotions down the priority list when the promotion is applied successfully.
       * @example false
       */
      stop?: boolean;
      /**
       * @description Boolean value that specifies whether this promotion can be used with other promotions. When set to false, only apply this promotion if there are no discounts applied already, and stop executing other promotions if this promotion applies successfully.
       * @default true
       * @example false
       */
      can_be_used_with_other_promotions?: boolean;
      /**
       * @description The ISO-4217-based transactional currency code to which the promotion applies OR * for all currencies.
       * @example USD
       */
      currency_code?: string;
      /** @description Notifications to display on the storefront based on the result of the evaluation for promotion eligibility. */
      notifications?: components["schemas"]["Notification"][];
      shipping_address?: components["schemas"]["AddressMatcher"];
      schedule?: components["schemas"]["AvailabilityByWeekDay"];
    };
    /**
     * Patch Coupon Promotion
     * @description A Partial **Coupon Promotion** that contains properties to patch.
     */
    PatchCouponPromotion: components["schemas"]["PromotionBase"] & {
      codes?: components["schemas"]["CouponCode"];
      /**
       * @description This field only has effect when `can_be_used_with_other_promotions` is `false`:
       * - When the property is set to `true`, the coupon will override the applied automatic promotions if it provides a greater discount.
       * - When the property is set to `fasle`, the coupon will not be applied if automatic promotions are already applied.
       * Trying to set the value of this field to `true` when `can_be_used_with_other_promotions` is `true` will yield a 422 error response.
       * @default false
       * @example false
       */
      coupon_overrides_automatic_when_offering_higher_discounts?: boolean;
    };
    /**
     * Draft Coupon Promotion
     * @description A draft **Coupon Promotion** to be created. A shopper must manually apply a *coupon promotion* to their cart.
     */
    DraftCouponPromotion: components["schemas"]["PromotionBase"] & {
      codes?: components["schemas"]["CouponCode"];
      /**
       * @description This field only has effect when `can_be_used_with_other_promotions` is `false`:
       * - When the property is set to `true`, the coupon will override the applied automatic promotions if it provides a greater discount.
       * - When the property is set to `fasle`, the coupon will not be applied if automatic promotions are already applied.
       * Trying to set the value of this field when `can_be_used_with_other_promotions` is `true` will yield a 422 error response.
       * @default false
       * @example false
       */
      coupon_overrides_automatic_when_offering_higher_discounts?: boolean;
      /**
       * @description The type of the promotion. Promotions applied automatically have a value of `AUTOMATIC` whereas promotions requiring a coupon have a value of `COUPON`.
       * @enum {string}
       */
      redemption_type: "COUPON";
    };
    /**
     * Saved Coupon Promotion
     * @description **Coupon Promotion** A shopper must manually apply a *coupon promotion* to their cart.
     */
    SavedCouponPromotion: WithRequired<components["schemas"]["PromotionBase"] & {
      /**
       * @description An auto-generated unique identifier for the discount rule.
       * @example 1
       */
      id?: number;
      created_from?: components["schemas"]["CreatedFrom"];
      codes?: components["schemas"]["CouponCode"];
      /**
       * @description This field only has effect when the `redemption_type` is `COUPON` and `can_be_used_with_other_promotions` is `false`:
       * - When the property is set to `true`, the coupon will override the applied automatic promotions if it provides a greater discount.
       * - When the property is set to `fasle`, the coupon will not be applied if automatic promotions are already applied.
       *
       * Trying to set the value of this field to `true` when the `redemption_type` is not `COUPON`, or when `can_be_used_with_other_promotions` is `true` will yield a 422 error response.
       * @default false
       * @example false
       */
      coupon_overrides_automatic_when_offering_higher_discounts?: boolean;
      /**
       * @description The type of the promotion. Promotions applied automatically have a value of `AUTOMATIC` whereas promotions requiring a coupon have a value of `COUPON`.
       * @enum {string}
       */
      redemption_type?: "COUPON";
      multiple_codes?: {
        /**
         * @default false
         * @example false
         */
        has_multiple_codes?: boolean;
      };
    }, "id" | "name" | "channels" | "created_from" | "customer" | "rules" | "notifications" | "stop" | "currency_code" | "redemption_type" | "current_uses" | "start_date" | "status" | "can_be_used_with_other_promotions" | "coupon_overrides_automatic_when_offering_higher_discounts">;
    /**
     * Patch Automatic Promotion
     * @description A Partial **Automatic Promotion** that contains properties to patch.
     */
    PatchAutomaticPromotion: components["schemas"]["PromotionBase"];
    /**
     * Draft Automatic Promotion
     * @description A draft **Automatic Promotion** to be created. The store applies *automatic promotions* to a shopperâ€™s cart once the promotion criteria are satisfied. The shopper cannot manually apply an *automatic promotion*.
     */
    DraftAutomaticPromotion: WithRequired<components["schemas"]["PromotionBase"] & {
      /**
       * @description The type of the promotion. Promotions applied automatically have a value of `AUTOMATIC` whereas promotions requiring a coupon have a value of `COUPON`.
       * @enum {string}
       */
      redemption_type?: "AUTOMATIC";
    }, "redemption_type" | "name" | "rules">;
    /**
     * Saved Automatic Promotion
     * @description The store applies *Automatic promotions* to a shopperâ€™s cart once the promotion criteria are satisfied. The shopper cannot manually apply an *automatic promotion*.
     */
    SavedAutomaticPromotion: WithRequired<components["schemas"]["PromotionBase"] & {
      /**
       * @description The type of the promotion. Promotions applied automatically have a value of `AUTOMATIC` whereas promotions requiring a coupon have a value of `COUPON`.
       * @enum {string}
       */
      redemption_type?: "AUTOMATIC";
      /**
       * @description An auto-generated unique identifier for the discount rule.
       * @example 1
       */
      id?: number;
      created_from?: components["schemas"]["CreatedFrom"];
    }, "id" | "name" | "channels" | "created_from" | "customer" | "rules" | "notifications" | "stop" | "currency_code" | "redemption_type" | "current_uses" | "start_date" | "status" | "can_be_used_with_other_promotions">;
    /**
     * @description Specifies the requirements which make the customer eligible for the promotion.
     *
     * Note:
     * - Only "group_ids" or "excluded_group_ids" should be specified (have non-empty array data), but not both.
     * - group_id zero (0) signifies guest customers or registered customers who are not assigned to any groups.
     */
    Customer: {
      /**
       * @description A list of customer group IDs that the promotion targets. Only customers in those groups are eligible for this promotion. When unspecified, or set to an empty array, this requirement is not effective, and all customers who satisfy the other requirements (minimum_order_count, excluded_group_ids) are eligible for the promotion.
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      group_ids?: number[];
      /** @description The minimum number of completed orders required of the customer. */
      minimum_order_count?: number;
      /**
       * @description A list of customer group IDs that the promotion will exclude. Only customers who are NOT in those groups are eligible for this promotion. When unspecified, or set to an empty array, this requirement will not have any effects, and all customers who satisfy the other requirements (group_ids, minimum_order_count) are eligible for the promotion.
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      excluded_group_ids?: number[];
      segments?: components["schemas"]["CustomerSegmentLimitation"];
    };
    /**
     * Rule
     * @description **Rule**
     * A Rule is the executable unit of the promotion. When a ruleÊ¼s condition is met, the API applies the discount defined in the specified action.
     */
    Rule: {
      action: components["schemas"]["Action"];
      /**
       * @description Setting this property to false enables the rule to run repeatedly (for example: 1 free product X for every product Y you purchase)
       * @default true
       */
      apply_once?: boolean;
      /** @description Boolean value that specifies whether to stop executing all the remaining rules down the priority list when the current rule is applied successfully. */
      stop?: boolean;
      condition?: components["schemas"]["Condition"];
    };
    /** @description **Condition** */
    Condition: components["schemas"]["CartCondition"] | components["schemas"]["AndCondition"];
    /**
     * AndCondition
     * @description **AndCondition**
     * Evaluates to true when all children are evaluated to true.
     */
    AndCondition: {
      /** @description Array of [Conditions](/docs/rest-management/promotions). */
      and?: components["schemas"]["CartCondition"][];
    };
    /**
     * Cart Condition
     * @description **Cart Condition**
     * Condition based on the content of the current cart.
     */
    CartCondition: {
      cart?: {
        items?: components["schemas"]["ItemMatcher"];
        minimum_spend?: components["schemas"]["Money"];
        /**
         * @description Minimum required quantity of the item in the cart for the condition to match. This field is *mandatory* when `items` are specified, but has *no effect* if `items` are not specified.
         * @example 1
         */
        minimum_quantity?: number;
      };
    };
    /**
     * Item Matcher
     * @description **ItemMatcher**
     * Lists which items to consider in the condition or action. If this is specified, you will need to also specify at least one of minimum_quantity or minimum_spend.
     */
    ItemMatcher: components["schemas"]["SimpleItemMatcher"] | components["schemas"]["NotItemMatcher"] | components["schemas"]["AndItemMatcher"] | components["schemas"]["OrItemMatcher"];
    /**
     * AndItemMatcher
     * @description **AndItemMatcher**
     * Evaluates to true when all children are evaluated to true.
     */
    AndItemMatcher: {
      /** @description Array of Item Matcher. */
      and?: components["schemas"]["ItemMatcher2"][];
    };
    /**
     * OrItemMatcher
     * @description **OrItemMatcher**
     * Evaluates to true when one of its children are evaluated to true.
     */
    OrItemMatcher: {
      /** @description Array of Item Matcher. */
      or?: components["schemas"]["ItemMatcher2"][];
    };
    /**
     * NotItemMatcher
     * @description **NotItemMatcher**
     * Evaluates to true when the child is evaluated to false.
     */
    NotItemMatcher: {
      not?: components["schemas"]["ItemMatcher2"];
    };
    /**
     * Item Matcher
     * @description **ItemMatcher**
     * Lists which items to consider in the condition or action. If this is specified, you will need to also specify at least one of minimum_quantity or minimum_spend.
     */
    ItemMatcher2: components["schemas"]["SimpleItemMatcher"] | components["schemas"]["NotItemMatcher2"] | components["schemas"]["AndItemMatcher2"] | components["schemas"]["OrItemMatcher2"];
    /**
     * AndItemMatcher
     * @description **AndItemMatcher**
     * Evaluates to true when all children are evaluated to true.
     */
    AndItemMatcher2: {
      /** @description Array of Item Matcher. */
      and?: components["schemas"]["ItemMatcher3"][];
    };
    /**
     * OrItemMatcher
     * @description **OrItemMatcher**
     * Evaluates to true when one of its children are evaluated to true.
     */
    OrItemMatcher2: {
      /** @description Array of Item Matcher. */
      or?: components["schemas"]["ItemMatcher3"][];
    };
    /**
     * NotItemMatcher
     * @description **NotItemMatcher**
     * Evaluates to true when the child is evaluated to false.
     */
    NotItemMatcher2: {
      not?: components["schemas"]["ItemMatcher3"];
    };
    /**
     * Item Matcher
     * @description **ItemMatcher**
     * Lists which items to consider in the condition or action. If this is specified, you will need to also specify at least one of minimum_quantity or minimum_spend.
     */
    ItemMatcher3: components["schemas"]["SimpleItemMatcher"] | components["schemas"]["NotItemMatcher3"] | components["schemas"]["AndItemMatcher3"] | components["schemas"]["OrItemMatcher3"];
    /**
     * AndItemMatcher
     * @description **AndItemMatcher**
     * Evaluates to true when all children are evaluated to true.
     */
    AndItemMatcher3: {
      /** @description Array of Item Matcher. */
      and?: components["schemas"]["SimpleItemMatcher"][];
    };
    /**
     * OrItemMatcher
     * @description **OrItemMatcher**
     * Evaluates to true when one of its children are evaluated to true.
     */
    OrItemMatcher3: {
      /** @description Array of Item Matcher. */
      or?: components["schemas"]["SimpleItemMatcher"][];
    };
    /**
     * NotItemMatcher
     * @description **NotItemMatcher**
     * Evaluates to true when the child is evaluated to false.
     */
    NotItemMatcher3: {
      not?: components["schemas"]["SimpleItemMatcher"];
    };
    /**
     * Simple Item Matcher
     * @description **Simple Item Matcher**
     */
    SimpleItemMatcher: components["schemas"]["BrandsItemMatcher"] | components["schemas"]["CategoriesItemMatcher"] | components["schemas"]["ProductsItemMatcher"] | components["schemas"]["VariantsItemMatcher"] | components["schemas"]["ProductOptionsItemMatcher"] | components["schemas"]["ProductCustomFieldMatcher"];
    /**
     * Brands Item Matcher
     * @description **BrandsItemMatcher**
     * Brands to which the items should belong.
     */
    BrandsItemMatcher: {
      /**
       * @description List of brand IDs.
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      brands?: number[];
    };
    /**
     * Categories Item Matcher
     * @description **CategoriesItemMatcher**
     * Categories to which the items should belong.
     */
    CategoriesItemMatcher: {
      /**
       * @description List of category IDs.
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      categories?: number[];
    };
    /**
     * Products Item Matcher
     * @description **Products Item Matcher**
     * Specific products which items should be from.
     */
    ProductsItemMatcher: {
      /**
       * @description List of product IDs.
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      products?: number[];
    };
    /**
     * Variants Item Matcher
     * @description **Variants Item Matcher**
     * Product variants which items should be from.
     */
    VariantsItemMatcher: {
      /**
       * @description List of variant IDs.
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      variants?: number[];
    };
    /**
     * Cart Value Action
     * @description **Cart Value Action**
     * Applies discount on the entire cart.
     */
    CartValueAction: {
      cart_value?: {
        discount: components["schemas"]["Discount"];
      };
    };
    /**
     * @description **Gift Item Action**
     * Give a gift item for free.
     */
    GiftItemAction: {
      gift_item?: {
        /** @description Quantity of gift item to give. */
        quantity: number;
        /** @description Product ID of the gift item. */
        product_id?: number;
        /** @description Variant ID of the gift item. */
        variant_id?: number;
      };
    };
    /**
     * Fixed Price Set Action
     * @description **Fixed Price Set Action**
     * Sets a fixed price for a list of items.
     */
    FixedPriceSetAction: {
      fixed_price_set?: {
        /** @description Quantity of items in the set that would receive the discount. */
        quantity: number;
        fixed_price: components["schemas"]["Money"];
        items?: components["schemas"]["ItemMatcher"];
        /**
         * @description If the shopper has multiple items in their cart that could be discounted by this action, strategy will determine which items are discounted, for example LEAST_EXPENSIVE will sort items in price ascending order and discount the cheapest item first.
         * @enum {string}
         */
        strategy?: "LEAST_EXPENSIVE" | "LEAST_EXPENSIVE_ONLY" | "MOST_EXPENSIVE" | "MOST_EXPENSIVE_ONLY";
        /** @description Enable this option to prevent items already on sale from being further discounted. */
        exclude_items_on_sale?: boolean;
        /**
         * @description Setting this value to false enables you to exclude items used to satisfy the condition to be discounted. By default, items that are used to satisfy the condition are eligible to receive the discount.
         * @default true
         */
        include_items_considered_by_condition?: boolean;
      };
    };
    /**
     * Cart Items Action
     * @description **Cart Items Action**
     * Applies discount on matching products in the cart.
     */
    CartItemsAction: {
      cart_items?: {
        discount: components["schemas"]["Discount"];
        /**
         * @description Set this value to true to distribute the discount as a total among matching items. By default, the discount applies to each item.
         * Example: If set to false, the discount is $10 and you have 2 eligible items for this discount in the cart, both items will be discounted by $10, with a total of $20 off the order.
         * If set to true, $10 will be distributed among the 2 items, weighted by their respective price. In a case where there are 2 of the same items, each item will be discounted by $5.
         */
        as_total?: boolean;
        items?: components["schemas"]["ItemMatcher"];
        /** @description Setting this value to true enables you to discount items that are used to satisfy the condition. By default items that are used to satisfy the condition are excluded from receiving the discount. For example, "Buy 1 Get 1 20% off." When the cart only contains 1 item, the discount wonâ€™t apply. */
        include_items_considered_by_condition?: boolean;
        /** @description Setting this value to true enables the option to prevent items already on sale from being further discounted. */
        exclude_items_on_sale?: boolean;
        /**
         * @description If the shopper has multiple items in their cart that could be discounted by this action, strategy will determine which items are discounted, for example LEAST_EXPENSIVE will sort items by their price in ascending order and discount the cheapest item first.
         * @enum {string}
         */
        strategy?: "LEAST_EXPENSIVE" | "LEAST_EXPENSIVE_ONLY" | "MOST_EXPENSIVE" | "MOST_EXPENSIVE_ONLY";
        /**
         * @description Specifies a quantity of matching items to discount. If no quantity is specified, an infinite number of items can be discounted.
         * @example 2
         */
        quantity?: number;
        /** @description The promotion will try to add a free item to the cart automatically, but if it cannot, it will discount a matching existing cart item by 100%. */
        add_free_item?: boolean;
      };
    };
    /**
     * Shipping Action
     * @description **Shipping Action**
     * Applies discount on shipping, optionally restricted to specific shipping zones.
     */
    ShippingAction: {
      shipping?: {
        /** @description Set this property to true to provide a separate free shipping method. Read-Only. */
        free_shipping?: boolean;
        zone_ids: "*" | number[];
      };
    };
    /**
     * Discount
     * @description **Discount**
     */
    Discount: components["schemas"]["FixedDiscount"] | components["schemas"]["PercentageDiscount"];
    /**
     * Percentage Discount
     * @description **Percentage Discount**
     */
    PercentageDiscount: {
      /** @description The amount of discount (percentage off) to apply. */
      percentage_amount?: string;
    };
    /**
     * Fixed Discount
     * @description **Fixed Discount**
     */
    FixedDiscount: {
      fixed_amount?: components["schemas"]["Money"];
    };
    /**
     * Money
     * @description **Money**
     * Represents a monetary value in the storeâ€™s default currency.
     * @example 12.95
     */
    Money: string;
    /**
     * Collection Meta
     * @description Contains data about paginating the response via cursors. If no pagination details are specified, then both properties will be present.  When a 'before' or 'after' cursor is provided, only the 'cursor_pagination' property will be present. When a 'page' parameter is provided, only the offset based 'pagination' property will be present.
     */
    OptionalCursorCollectionMeta: {
      pagination?: components["schemas"]["DeprecatedPagination"];
      cursor_pagination?: components["schemas"]["CursorPagination"];
    };
    /**
     * Collection Meta
     * @description Contains data about the response including pagination and collection totals.
     */
    CollectionMeta: {
      pagination: components["schemas"]["Pagination"];
    };
    /**
     * Pagination
     * @description Data about the response, including pagination and collection totals.
     */
    Pagination: {
      /** @description Total number of items in the result set. */
      total: number;
      /** @description Total number of items in the collection response. */
      count: number;
      /** @description The amount of items returned in the collection per page, controlled by the limit of items per page parameter. */
      per_page: number;
      /** @description The page you are currently on within the collection. */
      current_page: number;
      /** @description The total number of pages in the collection. */
      total_pages: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /** @description Link to the current page returned in the response. */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * Pagination
     * @deprecated
     * @description Data about the response, including pagination and collection totals. This property has been deprecated and cursor_pagination should be used instead.
     */
    DeprecatedPagination: {
      /** @description Total number of items in the result set. */
      total?: number;
      /** @description Total number of items in the collection response. */
      count?: number;
      /** @description The amount of items returned in the collection per page, controlled by the limit of items per page parameter. */
      per_page?: number;
      /** @description The page you are currently on within the collection. */
      current_page?: number;
      /** @description The total number of pages in the collection. */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /** @description Link to the current page returned in the response. */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * Cursor Pagination
     * @description Contains data about paginating the response via cursors.
     */
    CursorPagination: {
      /**
       * @description Total number of items in the result set.
       * @example 12
       */
      count: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit of items per page parameter.
       * @example 12
       */
      per_page: number;
      /**
       * @description The cursor to the first item in the result set. Can be used with the "before" query parameter to paginate backwards. This property is omitted when the result set is empty.
       *
       * @example eyJpZCI6IjIzNzU1NyJ9
       */
      start_cursor?: string;
      /**
       * @description The cursor to the last item in the result set. Can be used with the "after" query parameter to paginate forwards. This property is omitted when the result set is empty.
       *
       * @example eyJpZCI6IjIzNzU1NyJ9
       */
      end_cursor?: string;
      links: {
        /**
         * @description Link to the previous page returned in the response. This property is omitted when the result set is empty or on the first page.
         *
         * @example ?limit=5&before=eyJpZCI6IjIzNzU1NyJ9
         */
        previous?: string;
        /**
         * @description Link to the next page returned in the response. This property is omitted when the result set is empty.
         *
         * @example ?limit=5&after=eyJpZCI6IjIzNzU1NyJ9
         */
        next?: string;
      };
    };
    /** Error Response */
    ErrorResponse: {
      errors?: components["schemas"]["Error"][];
    };
    /** Error */
    Error: {
      status?: number;
      title?: string;
    };
    /**
     * 400 Error Response
     * @description The server cannot process the request because the syntax or data is invalid.
     */
    ErrorResponse400: {
      /** @description Bad request. */
      status?: string;
      /** @description The error title describing the particular error. */
      title?: string;
      /** @description Error payload for the BigCommerce API. */
      type?: string;
      /** @description Detailed summary describing the particular error. */
      detail?: string;
    };
    /**
     * 403 Error Response
     * @description The client is authenticated but does not have the necessary permissions to perform the requested action.
     */
    ErrorResponse403: {
      /** @description Forbidden. */
      status?: string;
      /** @description The error title describing the particular error. */
      title?: string;
      /** @description Error payload for the BigCommerce API. */
      error?: string;
    };
    /**
     * Notification
     * @description **Notification**
     * A notification displayed to the user based on the result of executing a promotion, for example, a "Congratulations! YouÊ¼ve received free shipping!" message when the shopper receives free shipping.
     */
    Notification: {
      /**
       * @description The notification content to be displayed to the user.
       * Data from the condition and action are available allowing the message to be customized.
       * @example Congratulations! YouÊ¼ve received a free %ACTION.FREE_PRODUCT%!
       */
      content: string;
      /** @enum {string} */
      type: "UPSELL" | "ELIGIBLE" | "APPLIED";
      /**
       * @description Specifies where the notification message will be displayed.
       * @example [
       *   "HOME_PAGE",
       *   "PRODUCT_PAGE",
       *   "CART_PAGE",
       *   "CHECKOUT_PAGE"
       * ]
       */
      locations: string[];
    };
    /**
     * Action
     * @description **Action**
     */
    Action: components["schemas"]["CartValueAction"] | components["schemas"]["CartItemsAction"] | components["schemas"]["GiftItemAction"] | components["schemas"]["FixedPriceSetAction"] | components["schemas"]["ShippingAction"];
    /**
     * Product Options Item Matcher
     * @description Match a product by product options.
     *
     * Currently the only supported type is `string_match` which performs a string comparison on the name and values.
     */
    ProductOptionsItemMatcher: {
      product_option?: {
        /** @example string_match */
        type: string;
        /** @example Color */
        name: string;
        values: string[];
      };
    };
    /**
     * Product Custom Field Item Matcher
     * @description Match a product with a custom field.
     *
     * You can define a maximum of 10 Product Custom Field Item Matchers within an Item Matcher.
     */
    ProductCustomFieldMatcher: {
      product_custom_field?: {
        /** @example ISBN-10 */
        name: string;
        values: string[];
      };
    };
    /** @description A `CouponCode` object encapsulates attributes of a coupon code. */
    CouponCode: {
      /**
       * @description An auto-generated unique identifier for the coupon code.
       * @example 1
       */
      id: number;
      /**
       * @description A unique code that can be used to manually apply a discount. Only letters, numbers, white spaces, underscores and hyphens are allowed.
       * @example TEST-COUPON-CODE
       */
      code: string;
      /**
       * @description A read-only count of the times this coupon code has been used.
       * @example 2
       */
      current_uses: number;
      /**
       * @description The maximum number of times you can use this coupon code. The default value is 0, which represents unlimited uses.
       * @example 10
       */
      max_uses?: number;
      /**
       * @description The maximum number of times a specific customer can use this coupon code. The default value is 0, which represents unlimited uses.
       * @example 5
       */
      max_uses_per_customer?: number;
      /**
       * Format: date-time
       * @description The date and time when this coupon code was created.
       * @example 2019-01-20T22:00:00.000Z
       */
      created: string;
    };
    /**
     * Bulk Action Response Meta
     * @description Contains data about the bulk action response including the number of total, failed and success.
     */
    BulkActionResponseMeta: {
      /** @description Total number of items in the bulk action. */
      total?: number;
      /** @description Number of items that processed successfully. */
      success?: number;
      /** @description Number of items that failed to process. */
      failed?: number;
    };
    /**
     * Bulk Action Response Error
     * @description Contains data about the error of the bulk action.
     */
    BulkActionResponseError: {
      /**
       * @description HTTP Response status.
       * @example 422
       */
      status?: number;
      /**
       * @description Title of the status
       * @example Some promotions failed to delete.
       */
      title?: string;
      /**
       * @description Explanation of the error type.
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      /**
       * @description List all per-item errors. Use an index of an item on a request to reference an error. The example shows the first and second item on a request that has caused an error.
       * @example {
       *   "0.id": "Invalid ID",
       *   "1.error": "Promotion cannot be deleted"
       * }
       */
      errors?: {
        [key: string]: unknown;
      };
    };
    /**
     * CountryAddressMatcher
     * @description Specifies the countries which the promotion targets.
     */
    CountryAddressMatcher: {
      /** @description List of Country Rules */
      countries: components["schemas"]["CountryRuleInfo"][];
    };
    /**
     * AddressMatcher
     * @description Specifies which addresses to consider.
     */
    AddressMatcher: components["schemas"]["CountryAddressMatcher"] | components["schemas"]["NotAddressMatcher"];
    /**
     * NotAddressMatcher
     * @description Evaluates to `true` when the child is evaluated to `false`.
     */
    NotAddressMatcher: {
      not: components["schemas"]["CountryAddressMatcher"];
    };
    /**
     * CountryRuleInfo
     * @description Country Rule
     */
    CountryRuleInfo: {
      /**
       * @description Specifies the country code, in ISO 3166-1 alpha-2 format.
       * @example US
       */
      iso2_country_code: string;
    };
    /**
     * AvailabilityByWeekDay
     * @description Specifies the availability by weekdays.
     */
    AvailabilityByWeekDay: {
      /**
       * @description Specifies the recurrence, in number of weeks, during which the promotion is available (every "x" weeks).
       * @example 2
       */
      week_frequency: number;
      /** @description Specifies the weekdays during which the promotion is available. */
      week_days: ("Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday")[];
      /**
       * Format: time
       * @description Specifies the time of day from which the promotion is available.
       * @example 01:20:00
       */
      daily_start_time: string;
      /**
       * Format: time
       * @description Specifies the time of day until which the promotion is available.
       * @example 23:59:00
       */
      daily_end_time: string;
    };
    /** CustomerSegmentLimitation */
    CustomerSegmentLimitation: components["schemas"]["CustomerSegmentIdLimitation"] | components["schemas"]["NotCustomerSegmentLimitation"] | components["schemas"]["AndCustomerSegmentLimitation"] | components["schemas"]["OrCustomerSegmentLimitation"];
    /** CustomerSegmentIdLimitation */
    CustomerSegmentIdLimitation: {
      /** @description An array of segment IDs. */
      id: string[];
    };
    /** AndCustomerSegmentLimitation */
    AndCustomerSegmentLimitation: {
      and: components["schemas"]["CustomerSegmentLimitation2"][];
    };
    /** OrCustomerSegmentLimitation */
    OrCustomerSegmentLimitation: {
      or: components["schemas"]["CustomerSegmentLimitation2"][];
    };
    /** NotCustomerSegmentLimitation */
    NotCustomerSegmentLimitation: {
      not: components["schemas"]["CustomerSegmentLimitation2"];
    };
    /** CustomerSegmentLimitation */
    CustomerSegmentLimitation2: components["schemas"]["CustomerSegmentIdLimitation"] | components["schemas"]["NotCustomerSegmentLimitation2"] | components["schemas"]["AndCustomerSegmentLimitation2"] | components["schemas"]["OrCustomerSegmentLimitation2"];
    /** AndCustomerSegmentLimitation */
    AndCustomerSegmentLimitation2: {
      and: components["schemas"]["CustomerSegmentLimitation3"][];
    };
    /** OrCustomerSegmentLimitation */
    OrCustomerSegmentLimitation2: {
      or: components["schemas"]["CustomerSegmentLimitation3"][];
    };
    /** NotCustomerSegmentLimitation */
    NotCustomerSegmentLimitation2: {
      not: components["schemas"]["CustomerSegmentLimitation3"];
    };
    /** CustomerSegmentLimitation */
    CustomerSegmentLimitation3: components["schemas"]["CustomerSegmentIdLimitation"] | components["schemas"]["NotCustomerSegmentLimitation3"] | components["schemas"]["AndCustomerSegmentLimitation3"] | components["schemas"]["OrCustomerSegmentLimitation3"];
    /** AndCustomerSegmentLimitation */
    AndCustomerSegmentLimitation3: {
      and: components["schemas"]["CustomerSegmentIdLimitation"][];
    };
    /** OrCustomerSegmentLimitation */
    OrCustomerSegmentLimitation3: {
      or: components["schemas"]["CustomerSegmentIdLimitation"][];
    };
    /** NotCustomerSegmentLimitation */
    NotCustomerSegmentLimitation3: {
      not: components["schemas"]["CustomerSegmentIdLimitation"];
    };
    /** Channel */
    Channel: {
      /** @example 1 */
      id: number;
    };
  };
  responses: {
    BulkDeleteResponse: {
      content: {
        "application/json": {
          errors?: components["schemas"]["BulkActionResponseError"][];
          meta?: components["schemas"]["BulkActionResponseMeta"];
        };
        "422 - Missing Parameter": unknown;
        "422 - Error Deleting": unknown;
      };
    };
    PromotionCodeResponse: {
      content: {
        "application/json": {
          data?: components["schemas"]["CouponCode"];
          /** @description Empty meta object, which may be used at a later time. */
          meta?: Record<string, never>;
        };
      };
    };
    PromotionCodesCollectionResponse: {
      content: {
        "application/json": {
          data?: components["schemas"]["CouponCode"][];
          meta?: components["schemas"]["OptionalCursorCollectionMeta"];
        };
      };
    };
    PromotionsCollectionResponse: {
      content: {
        "application/json": {
          data: (components["schemas"]["SavedAutomaticPromotion"] | components["schemas"]["SavedCouponPromotion"])[];
          meta: components["schemas"]["CollectionMeta"];
        };
      };
    };
    PromotionsResponse: {
      content: {
        "application/json": {
          data?: components["schemas"]["SavedCouponPromotion"] | components["schemas"]["SavedAutomaticPromotion"];
          /** @description Empty meta object, which may be used at a later time. */
          meta?: {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description The ID of the promotion in question. */
    IdPath: string;
    /** @description The ID of the coupon code to delete. */
    CodeIdPath: string;
    /** @description Filter items by `id`. */
    IdQuery?: number;
    /**
     * @description A comma-separated list of promotions to filter or target with this operation.
     *
     * Example: **?id:in=11,12,13,14**
     */
    IdInQuery: number[];
    /** @description Query parameter that specifies the page number in a paginated list of resources. */
    PageQuery?: number;
    /**
     * @deprecated
     * @description Query parameter that specifies the page number in a paginated list of resources. This field is deprecated and the 'before' and 'after' cursor parameters should be used instead.
     */
    DeprecatedPageQuery?: number;
    /** @description Query parameter that limits the number of items displayed per page in a paginated list of resources. When none is specified a default value of 50 is used. */
    LimitQuery?: number;
    /** @description Filter items by `name`. */
    NameQuery?: string;
    /** @description Filter items by both name or code. */
    Query?: string;
    /** @description Filter items by `code`. */
    CodeQuery?: string;
    /** @description Filter items by `currency_code`. */
    CurrencyCodeQuery?: string;
    /** @description Filter items by `redemption type` */
    RedemptionTypeQuery?: "automatic" | "coupon";
    /** @description Filter items by `status`. */
    StatusQuery?: string;
    /** @description Query parameter that specifies the field name to sort by. The default value is *id*. */
    SortQuery?: "id" | "name" | "priority" | "start_date";
    /** @description Query parameter that specifies the sorting direction. The default value is *asc*. */
    DirectionQuery?: "asc" | "desc";
    /** @description The ID of the associated promotion. */
    PromotionIdPath: string;
    /** @description A cursor that can be used for backwards pagination. Will fetch results before the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'after' query parameter. */
    BeforeCursorQuery?: string;
    /** @description A cursor that can be used for forwards pagination. Will fetch results after the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'before' query parameter. */
    AfterCursorQuery?: string;
    /** @description Filter promotions that target those `channel IDs`.  Example: **?channels=1,2**. Note: promotions that target all the channels are included in the filtering result. */
    ChannelQuery?: number[];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Promotions
   * @description Returns a list of *promotions*.
   *
   * The response includes the display name and other details about each promotion, and lists the promotions ordered by ID by default.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  getPromotions: {
    parameters: {
      query?: {
        id?: components["parameters"]["IdQuery"];
        name?: components["parameters"]["NameQuery"];
        code?: components["parameters"]["CodeQuery"];
        currency_code?: components["parameters"]["CurrencyCodeQuery"];
        redemption_type?: components["parameters"]["RedemptionTypeQuery"];
        status?: components["parameters"]["StatusQuery"];
        page?: components["parameters"]["PageQuery"];
        limit?: components["parameters"]["LimitQuery"];
        sort?: components["parameters"]["SortQuery"];
        direction?: components["parameters"]["DirectionQuery"];
        channels?: components["parameters"]["ChannelQuery"];
        query?: components["parameters"]["Query"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["PromotionsCollectionResponse"];
      /** @description Failure due to an invalid query parameter. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Promotion
   * @description Creates a *promotion*.
   * To learn more about how to create a *promotion*, read the [Promotions Overview](/docs/store-operations/promotions).
   * For examples grouped by use case, see the [promotions examples](/docs/store-operations/promotions/examples/brand).
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  createPromotion: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DraftCouponPromotion"] | components["schemas"]["DraftAutomaticPromotion"];
      };
    };
    responses: {
      201: components["responses"]["PromotionsResponse"];
      /** @description The request payload was invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse400"];
        };
      };
      /** @description The request payload was invalid. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse403"];
        };
      };
      /** @description The request payload was invalid. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Multiple Promotions
   * @description Deletes multiple promotions. Currently, batches are limited to 50 promotions.
   *
   * **Notes**
   * * "id:in" query param is required to delete promotions. If this parameter is not provided, or provided with the wrong data format, a 422 error code is returned.
   * * You cannot delete promotions that still have coupon codes attached.
   * * The default rate limit for this endpoint is 40 concurrent requests.
   */
  deletePromotions: {
    parameters: {
      query: {
        "id:in": components["parameters"]["IdInQuery"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description A 204 response. */
      204: {
        content: {
        };
      };
      422: components["responses"]["BulkDeleteResponse"];
    };
  };
  /**
   * Get Promotion
   * @description Returns a single *promotion*.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests
   */
  getPromotion: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        id: components["parameters"]["IdPath"];
      };
    };
    responses: {
      200: components["responses"]["PromotionsResponse"];
      /** @description The requested resource was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Promotion
   * @description Update a promotion.
   *
   * **Note:**
   * The default rate limit for this request is 40 concurrent requests.
   */
  updatePromotion: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        id: components["parameters"]["IdPath"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchCouponPromotion"] | components["schemas"]["PatchAutomaticPromotion"];
      };
    };
    responses: {
      200: components["responses"]["PromotionsResponse"];
      /** @description The requested resource could not be found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Promotion
   * @description Deletes a promotion.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  deletePromotion: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        id: components["parameters"]["IdPath"];
      };
    };
    responses: {
      /** @description The deletion was successful or the specified resource does not exist. */
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Coupon Codes
   * @description Get codes for a particular promotion.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  getPromotionCodes: {
    parameters: {
      query?: {
        before?: components["parameters"]["BeforeCursorQuery"];
        after?: components["parameters"]["AfterCursorQuery"];
        page?: components["parameters"]["DeprecatedPageQuery"];
        limit?: components["parameters"]["LimitQuery"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        promotion_id: components["parameters"]["PromotionIdPath"];
      };
    };
    responses: {
      200: components["responses"]["PromotionCodesCollectionResponse"];
    };
  };
  /**
   * Create A Coupon Code
   * @description Create a new code for the promotion.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  createPromotionCode: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        promotion_id: components["parameters"]["PromotionIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description A unique code that can be used to manually apply a discount. Only letters, numbers, white spaces, underscores, and hyphens are allowed. */
          code: string;
          /**
           * @description The maximum number of times you can use this coupon code. The default value is 0, which represents unlimited uses. The parent promotion's `max_uses` field overrides the coupon code's `max_uses` field.
           * @example 10
           */
          max_uses?: number;
          /**
           * @description The maximum number of times a specific customer can use this coupon code. The default value is 0, which represents unlimited uses.
           * @example 5
           */
          max_uses_per_customer?: number;
        };
      };
    };
    responses: {
      200: components["responses"]["PromotionCodeResponse"];
    };
  };
  /**
   * Delete Multiple Coupon Codes
   * @description Deletes multiple coupon codes relating to the given promotion. Currently, batches are limited to 50 coupon codes.
   *
   * **Notes**
   * * "id:in" query param is required to delete coupon codes. If not provided, or provided with the wrong data format, a 422 error code is returned.
   * * The default rate limit for this endpoint is 40 concurrent requests.
   */
  deleteCouponCodes: {
    parameters: {
      query: {
        "id:in": components["parameters"]["IdInQuery"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        promotion_id: components["parameters"]["PromotionIdPath"];
      };
    };
    responses: {
      /** @description A 204 response. */
      204: {
        content: {
        };
      };
      422: components["responses"]["BulkDeleteResponse"];
    };
  };
  /**
   * Delete A Coupon Code
   * @description Deletes a coupon code.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  deleteCouponCode: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        promotion_id: components["parameters"]["PromotionIdPath"];
        code_id: components["parameters"]["CodeIdPath"];
      };
    };
    responses: {
      /** @description The deletion was successful or the resource does not exist. */
      204: {
        content: {
        };
      };
    };
  };
}
