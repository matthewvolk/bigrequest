// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/inventory/locations": {
    /**
     * Get Locations
     * @description List locations. You can use optional filter parameters.
     */
    get: operations["getLocations"];
    /**
     * Update Locations
     * @description Update existing locations.
     */
    put: operations["updateLocations"];
    /**
     * Create Locations
     * @description Create new locations.
     */
    post: operations["createLocations"];
    /**
     * Delete Locations
     * @description Delete existing locations.
     *
     * You cannot delete locations that are shipping origins or have open order transactions. The location with a `location_id` of 1 is the storeʼs default shipping origin, and you cannot change the shipping origin.
     *
     * You can delete locations assigned to pickup methods.
     *
     * > Warning:
     * >
     * > Deleting locations that have inventory also deletes its stock.
     */
    delete: operations["deleteLocations"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/inventory/locations/{location_id}/metafields": {
    /**
     * Get Metafields
     * @description Retrieve metafields for a location.
     */
    get: operations["getLocationMetafields"];
    /**
     * Create a Metafield
     * @description Create a location metafield.
     */
    post: operations["createLocationMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/inventory/locations/{location_id}/metafields/{metafield_id}": {
    /**
     * Get a Metafield
     * @description Get a metafield by location.
     */
    get: operations["getLocationMetafield"];
    /**
     * Update a Metafield
     * @description Update a metafield.
     */
    put: operations["updateLocationMetafield"];
    /**
     * Delete a Metafield
     * @description Delete a metafield.
     */
    delete: operations["deleteLocationMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/inventory/locations/metafields": {
    /**
     * Get All Metafields
     * @description Get all location metafields.
     */
    get: operations["getLocationsMetafields"];
    /**
     * Update multiple Metafields
     * @description Create multiple metafields.
     */
    put: operations["updateLocationsMetafields"];
    /**
     * Create multiple Metafields
     * @description Create multiple metafields.
     */
    post: operations["createLocationsMetafields"];
    /**
     * Delete Multiple Metafields
     * @description Delete all location metafields.
     */
    delete: operations["deleteLocationsMetafields"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ErrorResponse: {
      /** @description The HTTP status code generated by the origin server for this occurrence of the problem. */
      status?: number;
      /** @description Human readable error message. */
      title?: string;
      /** @description URL identifying the error type. Dereferencing the URL leads to documentation about the error type. */
      type?: string;
      /** @description The detailed summary describing the particular error. */
      errors?: {
        [key: string]: unknown;
      };
    };
    Meta: {
      pagination?: {
        /**
         * @description The total number of items in the result set.
         * @example 2
         */
        total?: number;
        /**
         * @description The total number of items in the collection on current page.
         * @example 2
         */
        count?: number;
        /**
         * @description The number of items returned in the collection per page, controlled by the limit parameter.
         * @example 100
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /**
           * @description The link to the previous page is returned in the response.
           * @example ?limit=100&page=1
           */
          previous?: string;
          /**
           * @description A link to the current page is returned in the response.
           * @example ?limit=100&page=1
           */
          current?: string;
          /**
           * @description Link to the next page returned in the response.
           * @example ?limit=100&page=1
           */
          next?: string;
        };
      };
    };
    OperatingHoursForDay: {
      /**
       * @description Boolean variable that defines if the location is open or not.
       * @default false
       */
      open?: boolean;
      /**
       * Format: string
       * @description Opening time.
       * @example 08:00
       */
      opening?: string;
      /**
       * Format: string
       * @description Closing time.
       * @example 16:00
       */
      closing?: string;
    };
    /** @description Schedule with opening and closing hours for each day of the week. */
    OperatingHours: {
      sunday?: components["schemas"]["OperatingHoursForDay"];
      monday?: components["schemas"]["OperatingHoursForDay"];
      tuesday?: components["schemas"]["OperatingHoursForDay"];
      wednesday?: components["schemas"]["OperatingHoursForDay"];
      thursday?: components["schemas"]["OperatingHoursForDay"];
      friday?: components["schemas"]["OperatingHoursForDay"];
      saturday?: components["schemas"]["OperatingHoursForDay"];
    };
    BlackoutHours: {
        /** @example Thanksgiving */
        label: string;
        /**
         * Format: date
         * @example 2022-09-29
         */
        date: string;
        open: boolean;
        /**
         * Format: string
         * @default 00:00
         * @example 09:00
         */
        opening?: string;
        /**
         * Format: string
         * @default 00:00
         * @example 09:00
         */
        closing?: string;
        /** @default false */
        all_day?: boolean;
        /** @default false */
        annual?: boolean;
      }[];
    LocationResponse: {
      /**
       * @description Location immutable unique identifier.
       * @example 2
       */
      id?: number;
      /**
       * @description Location user-defined unique identifier.
       * @example BIGC-1
       */
      code?: string;
      /**
       * @description Location label.
       * @example Central store
       */
      label?: string;
      /**
       * @description Description of location.
       * @example Central shop of the world
       */
      description?: string;
      /**
       * @description Indicates if the third-party system is the source of truth for inventory values. If set to true, manually editing inventory in BCʼs control panel will be disabled.
       *
       * @default false
       */
      managed_by_external_source?: boolean;
      /**
       * @description Describe type of given location.
       * @default PHYSICAL
       * @enum {string}
       */
      type_id?: "PHYSICAL" | "VIRTUAL";
      /**
       * @description Indicator of accessibility of the location.
       * @default true
       */
      enabled?: boolean;
      operating_hours?: components["schemas"]["OperatingHours"];
      /**
       * @description Time zone of location.
       * @example Etc/GMT+12
       */
      time_zone?: string;
      /**
       * Format: date-time
       * @description Time when location was created.
       * @example 2022-05-30T12:18:02Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Time of last update of the location.
       * @example 2022-05-30T12:18:02Z
       */
      updated_at?: string;
      address?: {
        /**
         * @description Main address information.
         * @example Central Park
         */
        address1?: string;
        /** @description Additional address information. */
        address2?: string;
        /**
         * @description The city where the location is located.
         * @example New York City
         */
        city?: string;
        /**
         * @description The state where the location is located.
         * @example NY
         */
        state?: string;
        /**
         * @description Zip code of the location.
         * @example 11111
         */
        zip?: string;
        /**
         * Format: email
         * @description Email of the location.
         * @example test@example.com
         */
        email?: string;
        /**
         * @description Phone number of the location.
         * @example 800-555-0198
         */
        phone?: string;
        /** @description Object with latitude and longitude that points at the location. */
        geo_coordinates?: {
          /**
           * Format: float
           * @description Latitude.
           * @example 11
           */
          latitude?: number;
          /**
           * Format: float
           * @description Longitude.
           * @example 8
           */
          longitude?: number;
        };
        /**
         * @description ISO 3166-1 alpha-3 code.
         * @example US
         */
        country_code?: string;
      };
      /**
       * @description Indicator of accessibility of location on the storefront.
       * @default true
       */
      storefront_visibility?: boolean;
      special_hours?: {
          /** @example Thanksgiving */
          label?: string;
          /**
           * Format: date
           * @example 2022-09-29
           */
          date?: string;
          open?: boolean;
          /**
           * Format: string
           * @default 00:00
           * @example 09:00
           */
          opening?: string;
          /**
           * Format: string
           * @default 00:00
           * @example 09:00
           */
          closing?: string;
          /** @default false */
          all_day?: boolean;
          /** @default false */
          annual?: boolean;
        }[];
    };
    LocationsUpdateRequest: ({
        /**
         * @description Location immutable unique identifier.
         * @example 2
         */
        id: number;
        /**
         * @description Location user-defined unique identifier.
         * @example BIGC-2
         */
        code?: string;
        /**
         * @description Location label.
         * @example Central store
         */
        label?: string;
        /**
         * @description Description of location.
         * @example Central shop of the world
         */
        description?: string;
        /**
         * @description Indicates if the third-party system is the source of truth for inventory values. If set to true, manually editing inventory in BCʼs control panel will be disabled.
         *
         * @default false
         */
        managed_by_external_source?: boolean;
        /**
         * @description Describe type of given location.
         * @default PHYSICAL
         * @enum {string}
         */
        type_id?: "PHYSICAL" | "VIRTUAL";
        /**
         * @description Indicator of accessibility of the location.
         * @default true
         */
        enabled?: boolean;
        operating_hours?: components["schemas"]["OperatingHours"];
        /**
         * @description Time zone of location.
         * @example Etc/UTC
         */
        time_zone?: string;
        address?: {
          /**
           * @description Main address information.
           * @example 5th Ave
           */
          address1?: string;
          /** @description Additional address information. */
          address2?: string;
          /**
           * @description The city where the location is located.
           * @example New York City
           */
          city?: string;
          /**
           * @description The state where the location is located.
           * @example NY
           */
          state?: string;
          /**
           * @description Zip code of the location.
           * @example 12345
           */
          zip?: string;
          /**
           * Format: email
           * @description Email of the location.
           * @example test@example.com
           */
          email?: string;
          /**
           * @description Phone number of the location.
           * @example 800-555-0198
           */
          phone?: string;
          /** @description Object with latitude and longitude that points at the location. */
          geo_coordinates?: {
            /**
             * Format: float
             * @description Latitude.
             * @example 11
             */
            latitude: number;
            /**
             * Format: float
             * @description Longitude.
             * @example 11
             */
            longitude: number;
          };
          /**
           * @description ISO 3166-1 alpha-3 code.
           * @default US
           * @enum {string}
           */
          country_code: "US";
        };
        /**
         * @description Indicator of accessibility of location on the storefront.
         * @default true
         */
        storefront_visibility?: boolean;
        special_hours?: components["schemas"]["BlackoutHours"];
      })[];
    LocationsCreateRequest: ({
        /**
         * @description Location user-defined unique identifier.
         * @example BIGC-1
         */
        code?: string;
        /**
         * @description Location label.
         * @example Central store
         */
        label?: string;
        /**
         * @description Description of location. This field can be returned by the GraphQL Storefront API so that additional details can be exposed to customers on the storefront (customer-facing).
         * @example Central shop of the world
         */
        description?: string;
        /**
         * @description Indicates if the third-party system is the source of truth for inventory values. If set to true, manually editing inventory in BCʼs control panel will be disabled.
         *
         * @default false
         */
        managed_by_external_source?: boolean;
        /**
         * @description Describe type of given location.
         * @default PHYSICAL
         * @enum {string}
         */
        type_id?: "PHYSICAL" | "VIRTUAL";
        /** @default true */
        enabled?: boolean;
        operating_hours?: components["schemas"]["OperatingHours"];
        /**
         * @description Time zone of location. For a list of valid time zones, please view: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
         * @example Etc/UTC
         */
        time_zone?: string;
        /** @description Address is required if the locationʼs `type_id` is `PHYSICAL`. */
        address?: {
          /**
           * @description Main address information.
           * @example 5th Ave
           */
          address1: string;
          /** @description Additional address information. */
          address2?: string;
          /**
           * @description The city where the location is located.
           * @example New York
           */
          city: string;
          /**
           * Format: enum
           * @description The state where the location is located.
           * @example NY
           */
          state: string;
          /**
           * @description Zip code of the location.
           * @example 10021
           */
          zip: string;
          /**
           * Format: email
           * @description Email of the location.
           * @example test@example.com
           */
          email: string;
          /**
           * @description Phone number of the location.
           * @example 800-555-0198
           */
          phone?: string;
          /** @description Object with latitude and longitude that points at the location. */
          geo_coordinates: {
            /**
             * Format: float
             * @description Latitude.
             * @example 40.774378
             */
            latitude: number;
            /**
             * Format: float
             * @description Longitude.
             * @example -73.9653178
             */
            longitude: number;
          };
          /**
           * Format: enum
           * @description ISO 3166-1 alpha-3 code.
           * @example US
           */
          country_code: string;
        };
        /** @default true */
        storefront_visibility?: boolean;
        special_hours?: components["schemas"]["BlackoutHours"];
      })[];
    SimpleTransactionResponse: {
      /** @description Unique identifier of performed action. */
      transaction_id?: string;
    };
    /** @description Common metafield properties. */
    MetafieldBase: {
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       * @example status
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example upcoming
       */
      value?: string;
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example headquarters
       */
      namespace?: string;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /** @description Description for the metafields. */
      description?: string;
    };
    /** @description Allows app partners to write custom data to various resources in the API. */
    Metafield: {
      /**
       * @description Unique ID for the metafield.
       * @example 1
       */
      id?: number;
    } & components["schemas"]["MetafieldBase"] & {
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @enum {string}
       */
      resource_type?: "location";
      /** @description The unique identifier for the resource with which the metafield is associated. */
      resource_id?: number;
    } & {
      /**
       * Format: date-time
       * @description Date and time when the metafield was created.
       *
       * @example 2022-04-14T23:06:45+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       *
       * @example 2022-09-08T04:18:55+00:00
       */
      date_modified?: string;
      /**
       * @description Client ID for the metafieldʼs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse: {
      data?: components["schemas"]["Metafield"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_DELETE: {
      /**
       * @example [
       *   123
       * ]
       */
      data?: number[];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionDeleteResponseSuccess: {
      /**
       * @example [
       *   123,
       *   124,
       *   125
       * ]
       */
      data?: number[];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionPartialSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 1
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 2
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 3
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 0
       */
      failed?: number;
    };
    /**
     * @description Total number of items in the result set.
     *
     * @example 3
     */
    Total: number;
    /**
     * @description Total number of items that were successfully deleted.
     *
     * @example 1
     */
    Success: number;
    /**
     * @description Total number of items that failed to be deleted.
     *
     * @example 2
     */
    Failed: number;
    /** @description Error response payload for the BigCommerce API. */
    Error: {
      /**
       * @description The HTTP status code for the error.
       *
       * @example 422
       */
      status?: number;
      /**
       * @description The error title.
       *
       * @example Bulk operation has failed
       */
      title?: string;
      /**
       * @description The error type.
       *
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      errors?: components["schemas"]["ErrorDetail"];
    };
    /**
     * @description Error detail response payload for the BigCommerce API.
     *
     * @example {
     *   "1": "Unauthorized to delete",
     *   "2": "Metafield does not exist"
     * }
     */
    ErrorDetail: {
      [key: string]: unknown;
    };
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
      [key: string]: unknown;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Post: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Put: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description Unique identifier for a location. */
    LocationIdParam: number;
    /** @description Comma separated list of `location_id`. */
    LocationIdsParam?: number;
    /** @description Comma separated list of `location_code`. */
    LocationCodeFilterParam?: string;
    /** @description Filter whether the location is the default. */
    LocationIsDefaultParam?: boolean;
    /** @description Comma separated list of locations type codes. */
    LocationTypeIdParam?: string;
    /** @description Filter whether an external source manages location inventory levels. */
    LocationManagedByExternalSourceParam?: boolean;
    /** @description Filter by active locations flag; return both if not specified. */
    LocationIsActiveParam?: boolean;
    /** @description Filter by storefront_visibility flag; return both if not specified. */
    LocationStorefrontVisibilityParam?: boolean;
    /** @description Unique identifier for a metafield. */
    MetafieldIdParam: number;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam?: number;
    /** @description Filter based on a metafieldʼs key. */
    MetafieldKeyParam?: string;
    /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla 'key' query parameter. */
    MetafieldKeyInParam?: string[];
    /** @description Filter based on a metafieldʼs namespaces. */
    MetafieldNamespaceParam?: string;
    /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla 'namespace' query parameter. */
    MetafieldNamespaceInParam?: string[];
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam?: "asc" | "desc";
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    IncludeFieldsParamMetafields?: ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Locations
   * @description List locations. You can use optional filter parameters.
   */
  getLocations: {
    parameters: {
      query?: {
        "location_id:in"?: components["parameters"]["LocationIdsParam"];
        "location_code:in"?: components["parameters"]["LocationCodeFilterParam"];
        is_default?: components["parameters"]["LocationIsDefaultParam"];
        "type_id:in"?: components["parameters"]["LocationTypeIdParam"];
        managed_by_external_source?: components["parameters"]["LocationManagedByExternalSourceParam"];
        is_active?: components["parameters"]["LocationIsActiveParam"];
        storefront_visibility?: components["parameters"]["LocationStorefrontVisibilityParam"];
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["LocationResponse"][];
            meta?: components["schemas"]["Meta"];
          };
        };
      };
    };
  };
  /**
   * Update Locations
   * @description Update existing locations.
   */
  updateLocations: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LocationsUpdateRequest"];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleTransactionResponse"];
        };
      };
      /** @description Incorrect entity. Locations were not valid. This results from missing required fields, invalid data, or partial error. See the response for more details. */
      422: {
        content: {
          "application/problem+json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Locations
   * @description Create new locations.
   */
  createLocations: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LocationsCreateRequest"];
        "application/xml": Record<string, never>;
      };
    };
    responses: {
      /** @description Locations have been successfully created. */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleTransactionResponse"];
        };
      };
      /** @description Incorrect entity. Locations were not valid. This results from missing required fields, invalid data, or partial error. See the response for more details. */
      422: {
        content: {
          "application/problem+json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Locations
   * @description Delete existing locations.
   *
   * You cannot delete locations that are shipping origins or have open order transactions. The location with a `location_id` of 1 is the storeʼs default shipping origin, and you cannot change the shipping origin.
   *
   * You can delete locations assigned to pickup methods.
   *
   * > Warning:
   * >
   * > Deleting locations that have inventory also deletes its stock.
   */
  deleteLocations: {
    parameters: {
      query: {
        /** @description Comma separated list of `location_id`. */
        "location_id:in": number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description Request has been successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleTransactionResponse"];
        };
      };
      /** @description Request has been rejected due to resource not being found. */
      404: {
        content: {
          "application/problem+json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Incorrect entity. The location is not valid. This error is the result of missing required fields or  invalid data. See the response for more details. */
      422: {
        content: {
          "application/problem+json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Metafields
   * @description Retrieve metafields for a location.
   */
  getLocationMetafields: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        location_id: components["parameters"]["LocationIdParam"];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Metafield"][];
            meta?: {
              pagination?: {
                /** @description The total number of items in the result set. */
                total?: number;
                /** @description The total number of items in the collection on current page. */
                count?: number;
                /** @description The number of items returned in the collection per page, controlled by the limit parameter. */
                per_page?: number;
                /** @description The page you are currently on within the collection. */
                current_page?: number;
                /** @description The total number of pages in the collection. */
                total_pages?: number;
                /** @description Pagination links for parts of the whole collection. */
                links?: {
                  /**
                   * @description A link to the current page is returned in the response.
                   * @example ?limit=100&page=1
                   */
                  current?: string;
                };
              };
            };
          };
        };
      };
    };
  };
  /**
   * Create a Metafield
   * @description Create a location metafield.
   */
  createLocationMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        location_id: components["parameters"]["LocationIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MetafieldBase"];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Metafield"];
            meta?: {
              [key: string]: unknown;
            };
          };
        };
      };
      /** @description Bad Request. Metafield is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description The `Metafield` conflicted with another `Metafield`. This can result from duplicate unique key combinations of the appʼs client id, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          "application/json": {
            /** @description The HTTP status code generated by the origin server for this occurrence of the problem. */
            status?: number;
            /** @description Human readable error message. */
            title?: string;
            /** @description URL identifying the error type. Dereferencing the URL leads to documentation about the error type. */
            type?: string;
          };
        };
      };
      /** @description The `Metafield` was not valid. This is the result of missing required fields or invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a Metafield
   * @description Get a metafield by location.
   */
  getLocationMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        location_id: components["parameters"]["LocationIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Metafield"];
            meta?: {
              [key: string]: unknown;
            };
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a Metafield
   * @description Update a metafield.
   */
  updateLocationMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        location_id: components["parameters"]["LocationIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MetafieldBase"];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Metafield"];
            meta?: {
              [key: string]: unknown;
            };
          };
        };
      };
      /** @description Bad Request. Metafield is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
          "application/xml": {
            status?: number;
            title?: string;
            type?: string;
            errors?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Delete a Metafield
   * @description Delete a metafield.
   */
  deleteLocationMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        location_id: components["parameters"]["LocationIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
          "application/xml": {
            status?: number;
            title?: string;
            type?: string;
            errors?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Get All Metafields
   * @description Get all location metafields.
   */
  getLocationsMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        "key:in"?: components["parameters"]["MetafieldKeyInParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
        direction?: components["parameters"]["DirectionParam"];
        include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
      };
    };
    responses: {
      /** @description List of `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
    };
  };
  /**
   * Update multiple Metafields
   * @description Create multiple metafields.
   */
  updateLocationsMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Put"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            id: string;
          })[];
      };
    };
    responses: {
      /** @description List of updated `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Bad Request. Metafield is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Create multiple Metafields
   * @description Create multiple metafields.
   */
  createLocationsMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID of the location with which the metafield is associated.
             *
             * @example 42
             */
            resource_id: number;
          })[];
      };
    };
    responses: {
      /** @description List of created `Metafield` objects. # TODO */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Bad Request. Metafield is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Delete Multiple Metafields
   * @description Delete all location metafields.
   */
  deleteLocationsMetafields: {
    /** @description List of metafield IDs. */
    requestBody?: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Response object for metafields deletion with success. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
        };
      };
      /** @description Response object for metafields deletion with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
        };
      };
    };
  };
}
