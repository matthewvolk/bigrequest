// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/channels": {
    /**
     * Get All Channels
     * @description Returns a list of *Channels*.
     *
     * Will always return the default BigCommerce storefront with an ID of `1`. This storefront is created by default when you provision a BigCommerce store.
     */
    get: operations["getChannels"];
    /**
     * Create a Channel
     * @description Creates a *Channel*.
     */
    post: operations["createChannel"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/channels/{channel_id}": {
    /**
     * Get a Channel
     * @description Returns a *Channel*. Channel ID `1` returns the default BigCommerce storefront.
     */
    get: operations["getChannel"];
    /**
     * Update a Channel
     * @description Updates a *Channel*.
     *
     * ## Updatable Fields
     *
     * The following fields can be updated.
     * * `name`
     * * `external_id`
     * * `status`
     * * `is_listable_from_ui`
     * * `is_visible`
     * * `config_meta`
     *
     *
     * > #### Note
     * > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
     * > * `platform` and `type` cannot be updated after a channel is created.
     * > * A channel with status `deleted` or `terminated` cannot be updated.
     */
    put: operations["updateChannel"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
  };
  "/channels/{channel_id}/active-theme": {
    /**
     * Get a Channel Active Theme
     * @description Returns details of the theme active on the specified channel.
     * Does not support active Blueprint (legacy) themes.
     */
    get: operations["getChannelActiveTheme"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
  };
  "/channels/currency-assignments": {
    /**
     * Get All Channels Currency Assignments
     * @description Returns a list of currency assignments for all channels.
     */
    get: operations["getAllCurrencyAssignments"];
    /**
     * Update Multiple Channels Currency Assignments
     * @description Updates enabled currencies and default currency for multiple channels. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
     */
    put: operations["updateMultipleChannelsCurrencyAssignments"];
    /**
     * Create Multiple Channels Currency Assignments
     * @description Sets enabled currencies and default currency for multiple channels. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
     */
    post: operations["createMultipleChannelsCurrencyAssignments"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/channels/{channel_id}/currency-assignments": {
    /**
     * Get Channel Currency Assignments
     * @description Returns a list of currency assignments for a specific channel.
     */
    get: operations["getSingleChannelCurrencyAssignments"];
    /**
     * Update Channel Currency Assignments
     * @description Updates enabled currencies and default currency for a specific channel. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
     */
    put: operations["updateSingleChannelCurrencyAssignments"];
    /**
     * Create Channel Currency Assignments
     * @description Sets enabled currencies and default currency for a specific channel. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
     */
    post: operations["createSingleChannelCurrencyAssignments"];
    /**
     * Delete Channel Currency Assignments
     * @description Deletes currency assignments for a specific channel. Once done, this channel will inherit the store’s currency settings.
     */
    delete: operations["deleteSingleChannelCurrencyAssignments"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
  };
  "/channels/{channel_id}/listings": {
    /**
     * Get Channel Listings
     * @description Returns a list of all *Channel Listings* for a specific channel. Note that if the *Channel* is not found or there is no listing associated to the *Channel*, it will return a 200 response with empty data.
     */
    get: operations["getChannelListings"];
    /**
     * Update Channel Listings
     * @description Updates one or more *Channel Listings* for a specific channel.
     *
     * > #### Note
     * > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
     * > * If a new variant is provided, the API will append the variant to the list. If a variant already exists, the API will update the existing variant. Other variants that are not provided in the payload remains unchanged.
     * > * If `listing_id` does not exist, the API will return a 200 response with empty data.
     * > * `listing_id` is required and cannot be less than or equal to zero.
     * > * `product_id` cannot be updated after a channel listing is created.
     * > * `product_id` of a variant must match the `product_id` of the channel listing.
     */
    put: operations["updateChannelListings"];
    /**
     * Create Channel Listings
     * @description Creates one or more *Channel Listings* for a specific channel.
     */
    post: operations["createChannelListings"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
  };
  "/channels/{channel_id}/listings/{listing_id}": {
    /**
     * Get a Channel Listing
     * @description Returns a *Channel Listing* for a specific channel.
     */
    get: operations["getChannelListing"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
        listing_id: components["parameters"]["listing_id_path_param"];
      };
    };
  };
  "/channels/{channel_id}/site/checkout-url": {
    /**
     * Upsert a Siteʼs Checkout URL
     * @description Creates or updates (upserts) a siteʼs checkout URL
     */
    put: operations["updateCheckoutUrl"];
    /**
     * Delete a Siteʼs Checkout URL
     * @description Deletes a siteʼs checkout URL. After deletion, a shared checkout URL is used.
     */
    delete: operations["deleteCheckoutUrl"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
  };
  "/channels/{channel_id}/site": {
    /**
     * Get a Channel Site
     * @description Alias of `GET /sites?channel_id=channel_id`
     *
     * Returns site data for the specified channel.
     */
    get: operations["getChannelSite"];
    /**
     * Update a Channel Site
     * @description Updates a site for provided channel.
     */
    put: operations["updateChannelSite"];
    /**
     * Create a Channel Site
     * @description Alias of POST `/sites`. Creates a site for provided channel.
     */
    post: operations["createChannelSite"];
    /**
     * Delete a Channel Site
     * @description Deletes the Channelʼs site.
     */
    delete: operations["deleteChannelSite"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
  };
  "/channels/{channel_id}/channel-menus": {
    /**
     * Get Channel Menus
     * @description Returns list of Control Panel side navigation menus for a channel.
     */
    get: operations["getChannelMenus"];
    /**
     * Create Channel Menus
     * @description Creates or replaces list of control panel side navigation menus for a channel.
     */
    post: operations["createChannelMenus"];
    /**
     * Delete Channel Menus
     * @description Deletes control panel side navigation menus for a channel.
     */
    delete: operations["deleteChannelMenus"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
  };
  "/channels/{channel_id}/metafields": {
    /**
     * Get Channel Metafields
     * @description Returns a list of metafields on a channel. Optional filter parameters can be passed in.
     */
    get: operations["getChannelMetafields"];
    /**
     * Create a Channel Metafield
     * @description Creates a channel metafield.
     *
     * **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, channel, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    post: operations["createChannelMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
  };
  "/channels/{channel_id}/metafields/{metafield_id}": {
    /**
     * Get a Channel Metafield
     * @description Returns a single channel metafield.
     */
    get: operations["getChannelMetafield"];
    /**
     * Update a Channel Metafield
     * @description Updates a single channel metafield.
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a `403` error message.
     */
    put: operations["updateChannelMetafield"];
    /**
     * Delete a Channel Metafield
     * @description Deletes a single channel metafield.
     */
    delete: operations["deleteChannelMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
        metafield_id: string;
      };
    };
  };
  "/channels/metafields": {
    /**
     * Get All Channel Metafields
     * @description Get all channel metafields.
     */
    get: operations["getChannelsMetafields"];
    /**
     * Update multiple Metafields
     * @description Update multiple metafields.
     */
    put: operations["updateChannelsMetafields"];
    /**
     * Create multiple Metafields
     * @description Create multiple metafields.
     */
    post: operations["createChannelsMetafields"];
    /**
     * Delete All Metafields
     * @description Delete all channel metafields.
     */
    delete: operations["deleteChannelsMetafields"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Format: int64
     * @description The ID of the channel.
     */
    ChannelId: number;
    /** metafield_Base */
    metafield_Base: {
      /**
       * @description Unique ID of the *Metafield*.
       * @example 6
       */
      id?: number;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description
       * |-|-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       * @example Warehouse Locations
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Location
       */
      key?: string;
      /**
       * @description The value of the field.
       *
       * @example 4HG
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example Location in the warehouse
       */
      description?: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example product
       * @enum {string}
       */
      resource_type?: "category" | "brand" | "product" | "variant";
      /**
       * @description The ID for the resource with which the metafield is associated.
       *
       * @example 111
       */
      resource_id?: number;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated. Read-Only.
       *
       * @example 2018-05-07T20:14:17.000Z
       */
      date_modified?: string;
    };
    /** @description Common Metafield properties. */
    Metafield: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example order
       */
      description: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example cart
       * @enum {string}
       */
      resource_type: "brand" | "product" | "variant" | "category" | "cart" | "channel" | "location" | "order" | "customer";
      /**
       * @description The unique identifier for the resource with which the metafield is associated.
       *
       * @example 424242
       */
      resource_id: number;
      /** @description The unique identifier for the metafield. */
      id: number;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_created: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_modified: string;
      /**
       * @description Client ID for the metafieldʼs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse: {
      data?: components["schemas"]["Metafield"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_DELETE: {
      /**
       * @example [
       *   123
       * ]
       */
      data?: number[];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionDeleteResponseSuccess: {
      /**
       * @example [
       *   123,
       *   124,
       *   125
       * ]
       */
      data?: number[];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionPartialSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 1
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 2
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 3
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 0
       */
      failed?: number;
    };
    /**
     * @description Total number of items in the result set.
     *
     * @example 3
     */
    Total: number;
    /**
     * @description Total number of items that were successfully deleted.
     *
     * @example 1
     */
    Success: number;
    /**
     * @description Total number of items that failed to be deleted.
     *
     * @example 2
     */
    Failed: number;
    /** @description Error response payload for the BigCommerce API. */
    Error: {
      /**
       * Format: int32
       * @description The HTTP status code for the error.
       *
       * @example 422
       */
      status?: number;
      /**
       * @description The error title describing the particular error.
       *
       * @example Bulk operation has failed
       */
      title?: string;
      /**
       * @description The error type.
       *
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      errors?: components["schemas"]["ErrorDetail"];
    };
    /**
     * @description Error detail response payload for the BigCommerce API.
     *
     * @example {
     *   "1": "Unauthorized to delete",
     *   "2": "Metafield does not exist"
     * }
     */
    ErrorDetail: Record<string, never>;
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
      [key: string]: unknown;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Post: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** @description The model for a POST to create metafield. */
    MetafieldPost: components["schemas"]["MetafieldBase_Post"] & {
      /**
       * @description The ID for the resource with which the metafield is associated.
       *
       * @example 42
       */
      resource_id: number;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Put: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** @description The model for a PUT to create metafield. */
    MetafieldPut: components["schemas"]["MetafieldBase_Put"] & {
      /**
       * @description The ID of metafield to update.
       *
       * @example 42
       */
      id: number;
    };
    PutCheckoutUrl: {
      /**
       * Format: uri
       * @description Unique site checkout URL. Must be valid and a sub-domain of primary channel URL.
       * @example https://checkout.kittens.mybigcommerce.com
       */
      url?: string;
    };
    /**
     * Format: int64
     * @description The ID of the channel associated with this channel listing.
     */
    ChannelIdForListing: number;
    /**
     * Format: int64
     * @description The ID of the channel listing that has been created, returned, or updated. In a 422 error, you may receive a response that references the `group_id`. The `group_id` in the Invalid Listing ID example refers to the `listing_id`. Please use `listing_id` instead of `group_id` in the request payload.
     */
    ListingId: number;
    /**
     * Format: int64
     * @description The ID of the product associated with this channel listing.
     */
    ProductId: number;
    /**
     * Format: int64
     * @description The ID of the product variant associated with this channel listing.
     */
    VariantId: number;
    /** @description Associated ID within a system / platform outside of BC. */
    ExternalId: string;
    /** @description Indicates if a channel can create listings from the BigCommerce UI. Default value for this field is based on the channel type and platform combination if not specified on create. */
    IsListableFromUI: boolean;
    /** @description Indicates if a channel is visible within the BigCommerce merchant admin UI (control panel). If `false`, the channel will not show in Channel Manager nor in any channels dropdown throughout the UI. Default value for this field is `true` if not specified on create. */
    IsVisible: boolean;
    /**
     * @description The status of the channel; channel `type`, `platform`, and `status` must be a [valid combination](/docs/rest-management/channels#status). `terminated` is not valid for `PUT` or `POST` requests. `deleted` is not valid for `POST` requests.
     * @enum {string}
     */
    ChannelStatus: "active" | "prelaunch" | "inactive" | "connected" | "disconnected" | "archived" | "deleted" | "terminated";
    /** @description Name of the channel as it will appear in the store control panel. The only characters it can include are Latin alphabet letters, Arabic numerals, dashes, and underscores. */
    ChannelName: string;
    /**
     * @description The type of channel; channel `platform` and `type` must be a [valid combination](/docs/rest-management/channels#status).
     * @enum {string}
     */
    ChannelType: "pos" | "marketplace" | "storefront" | "marketing";
    /** @description The name of the platform for the channel; channel `platform` and `type` must be a [valid combination](/docs/rest-management/channels#status). */
    ChannelPlatform: string;
    /**
     * Format: date-time
     * @description Date on which the channel was first created.
     */
    ChannelDateCreated: string;
    /**
     * Format: date-time
     * @description Date on which the channel was most recently changed.
     */
    ChannelDateModified: string;
    /**
     * Format: url
     * @description Link to the platform icon.
     */
    IconUrl: string;
    /** @description Currencies that are enabled for the specified channel in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three character alphabetic format. */
    EnabledCurrencies: string[];
    /** @description Default currency for the channel in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three character alphabetic format. Will be used on storefront when other currencies cannot. */
    DefaultCurrency: string;
    /** @description Name of the product for this channel listing specifically. This is an optional field that can be used to override the product name in the catalog. */
    ChannelProductName: string;
    /** @description Name of the product variant for this channel listing specifically. This is an optional field that can be used to override the name of the product variant in the catalog. */
    ChannelProductVariantName: string;
    /** @description Description of the product for this channel listing specifically. This is an optional field that can be used to override the product description in the catalog. */
    ChannelProductDescription: string;
    /** @description Description of the product variant for this channel listing specifically. This is an optional field that can be used to override the description of the product variant in the catalog. */
    ChannelProductVariantDescription: string;
    /**
     * Format: date-time
     * @description Date on which the channel listing was first created.
     */
    ChannelListingDateCreated: string;
    /**
     * Format: date-time
     * @description Date on which the channel listing variant was first created.
     */
    ChannelListingVariantDateCreated: string;
    /**
     * Format: date-time
     * @description Date on which the channel listing was most recently changed.
     */
    ChannelListingDateModified: string;
    /**
     * Format: date-time
     * @description Date on which the channel listing variant was most recently changed.
     */
    ChannelListingVariantDateModified: string;
    /**
     * @description The state of the product assignment or channel listing.
     * @enum {string}
     */
    ListingState: "active" | "disabled" | "error" | "pending" | "pending_disable" | "pending_delete" | "partially_rejected" | "queued" | "rejected" | "submitted" | "deleted";
    /**
     * @description The state of the channel listing variant.
     * @enum {string}
     */
    VariantState: "active" | "disabled" | "error" | "pending" | "pending_disable" | "pending_delete" | "queued" | "rejected" | "submitted" | "deleted";
    /** @description Optional channel configuration object. */
    ChannelConfigMeta: {
      /** @description A [channel app](/docs/integrations/channels#channel-apps) config object for optionally configuring the channelʼs user interface in the control panel. */
      app?: {
        /** @description The unique `id` given to an app registered in [DevTools](https://devtools.bigcommerce.com/); used to create links to the app in channel manager. `app.id` is optional; however, if youʼre building an app that creates or manages a channel, we recommend including it to ensure the user interface in the control panel works properly. Select partners who are promoted in the Channel Manager must build an app, and include the app ID in the create channel request. [Learn how to find an Appʼs ID](/docs/integrations/apps/guide/id). */
        id?: number;
        /**
         * @deprecated
         * @description Sections are now deprecated under config_meta. The new /channel-menus endpoints should be used instead. If set, when the app is loaded within the control panel, the navigation `sections` will be directly embedded in the control panel navigation.
         */
        sections?: {
            /**
             * @deprecated
             * @description The title of the navigation section.
             * @example "Settings"
             */
            title?: string;
            /**
             * @deprecated
             * @description The value that will be passed to the appʼs iFrame in the URL and will allow the app to display the appropriate section within the app iFrame in the control panel.
             */
            query_path?: string;
          }[];
      };
    };
    /** @description Details about currency assignments for a specific channel. */
    CurrencyNotRequiredWithChannelId: {
      channel_id?: components["schemas"]["ChannelId"];
      enabled_currencies?: components["schemas"]["EnabledCurrencies"];
      default_currency?: components["schemas"]["DefaultCurrency"];
    };
    /** @description Details about currency assignments for a specific channel. */
    CurrencyRequiredWithChannelId: {
      channel_id: components["schemas"]["ChannelId"];
      enabled_currencies: components["schemas"]["EnabledCurrencies"];
      default_currency: components["schemas"]["DefaultCurrency"];
    };
    /** @description Details about currency assignments for a specific channel. */
    CurrencyRequiredWithoutChannelId: {
      enabled_currencies: components["schemas"]["EnabledCurrencies"];
      default_currency: components["schemas"]["DefaultCurrency"];
    };
    CreateChannelReq: {
      config_meta?: components["schemas"]["ChannelConfigMeta"];
      external_id?: components["schemas"]["ExternalId"];
      is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
      is_visible?: components["schemas"]["IsVisible"];
      status?: components["schemas"]["ChannelStatus"];
      name: components["schemas"]["ChannelName"];
      type: components["schemas"]["ChannelType"];
      platform: components["schemas"]["ChannelPlatform"];
    };
    UpdateChannelReq: {
      config_meta?: components["schemas"]["ChannelConfigMeta"];
      external_id?: components["schemas"]["ExternalId"];
      is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
      is_visible?: components["schemas"]["IsVisible"];
      name?: components["schemas"]["ChannelName"];
      status?: components["schemas"]["ChannelStatus"];
    };
    UpsertMultipleChannelsCurrencyAssignmentsReq: components["schemas"]["CurrencyRequiredWithChannelId"][];
    CreateMultipleListingsReq: components["schemas"]["UpsertListingWithoutListingIdReq"][];
    UpdateMultipleListingsReq: components["schemas"]["UpsertListingWithListingIdReq"][];
    /** @description Details about assigning a product to a specific channel. */
    UpsertListingWithoutListingIdReq: {
      product_id: components["schemas"]["ProductId"];
      external_id?: components["schemas"]["ExternalId"];
      state: components["schemas"]["ListingState"];
      name?: components["schemas"]["ChannelProductName"];
      description?: components["schemas"]["ChannelProductDescription"];
      variants: components["schemas"]["ChannelProductMultipleVariants"];
    };
    /** @description Details about assigning a product to a specific channel. */
    UpsertListingWithListingIdReq: {
      listing_id: components["schemas"]["ListingId"];
      product_id: components["schemas"]["ProductId"];
      external_id?: components["schemas"]["ExternalId"];
      state: components["schemas"]["ListingState"];
      name?: components["schemas"]["ChannelProductName"];
      description?: components["schemas"]["ChannelProductDescription"];
      variants: components["schemas"]["ChannelProductMultipleVariants"];
    };
    ChannelProductMultipleVariants: components["schemas"]["ChannelProductVariantPartial"][];
    /** @description Details about a variant of the product for this channel listing. */
    ChannelProductVariantPartial: {
      product_id: components["schemas"]["ProductId"];
      variant_id: components["schemas"]["VariantId"];
      external_id?: components["schemas"]["ExternalId"];
      state: components["schemas"]["VariantState"];
      name?: components["schemas"]["ChannelProductVariantName"];
      description?: components["schemas"]["ChannelProductVariantDescription"];
    };
    /** @description Details about a variant of the product for this channel listing. */
    ChannelProductVariantFull: {
      channel_id?: components["schemas"]["ChannelIdForListing"];
      product_id?: components["schemas"]["ProductId"];
      variant_id?: components["schemas"]["VariantId"];
      external_id?: components["schemas"]["ExternalId"];
      state?: components["schemas"]["VariantState"];
      name?: components["schemas"]["ChannelProductVariantName"];
      description?: components["schemas"]["ChannelProductVariantDescription"];
      date_created?: components["schemas"]["ChannelListingVariantDateCreated"];
      date_modified?: components["schemas"]["ChannelListingVariantDateModified"];
    };
    ChannelWithoutCurrencies: {
      config_meta?: components["schemas"]["ChannelConfigMeta"];
      id: components["schemas"]["ChannelId"];
      external_id?: components["schemas"]["ExternalId"];
      is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
      is_visible?: components["schemas"]["IsVisible"];
      status?: components["schemas"]["ChannelStatus"];
      name: components["schemas"]["ChannelName"];
      type?: components["schemas"]["ChannelType"];
      platform?: components["schemas"]["ChannelPlatform"];
      date_created?: components["schemas"]["ChannelDateCreated"];
      date_modified?: components["schemas"]["ChannelDateModified"];
      icon_url?: components["schemas"]["IconUrl"];
    };
    ChannelWithCurrencies: {
      config_meta?: components["schemas"]["ChannelConfigMeta"];
      id?: components["schemas"]["ChannelId"];
      external_id?: components["schemas"]["ExternalId"];
      is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
      is_visible?: components["schemas"]["IsVisible"];
      status?: components["schemas"]["ChannelStatus"];
      name?: components["schemas"]["ChannelName"];
      type?: components["schemas"]["ChannelType"];
      platform?: components["schemas"]["ChannelPlatform"];
      date_created?: components["schemas"]["ChannelDateCreated"];
      date_modified?: components["schemas"]["ChannelDateModified"];
      icon_url?: components["schemas"]["IconUrl"];
      currencies?: components["schemas"]["CurrencyNotRequiredWithChannelId"];
    };
    /** @description Details about the Channelʼs relationship to Themes. */
    ActiveTheme: {
      /** @description The UUID of the currently active Theme on the Channel. */
      active_theme_uuid?: string;
      /** @description The UUID of the currently active Theme Configuration on the Channel. */
      active_theme_configuration_uuid?: string;
      /** @description The UUID of the currently active Theme Version on the Channel. Needed to look up the available Custom Templates for the Theme. */
      active_theme_version_uuid?: string;
      /** @description The UUID of the most recently saved Theme Configuration. If this is different from the active Theme Configuration UUID, this indicates that some changes have been saved in the control panel Theme Editor that have not yet been published. */
      saved_theme_configuration_uuid?: string;
    };
    Listing: {
      channel_id?: components["schemas"]["ChannelIdForListing"];
      listing_id?: components["schemas"]["ListingId"];
      external_id?: components["schemas"]["ExternalId"];
      product_id?: components["schemas"]["ProductId"];
      state?: components["schemas"]["ListingState"];
      name?: components["schemas"]["ChannelProductName"];
      description?: components["schemas"]["ChannelProductDescription"];
      date_created?: components["schemas"]["ChannelListingDateCreated"];
      date_modified?: components["schemas"]["ChannelListingDateModified"];
      variants?: components["schemas"]["ChannelProductVariantFull"][];
    };
    /** @description List of channel-specific control panel menu navigation items and corresponding settings pages an app developer can choose to enable for the subject channel. Protected settings override any settings set in those UI sections at the storewide level. Learn more in the [Building Storefront Channels](/docs/integrations/channels/guide/storefronts#protected-ui-sections) tutorial. */
    BigCommerceProtectedAppSections: ("storefront_settings" | "social" | "carousel" | "domains" | "currencies" | "notifications")[];
    channel_menus_Post: {
      bigcommerce_protected_app_sections?: components["schemas"]["BigCommerceProtectedAppSections"];
      custom_app_sections?: components["schemas"]["CustomAppSections"];
    };
    CustomAppSections: {
        /** @description Text displayed to the merchant. */
        title?: string;
        /** @description Value used in the `section` query param. */
        query_path?: string;
      }[];
    /** @description Data about the response, including pagination. */
    MetaWithFullPagination: {
      pagination?: components["schemas"]["pagination_Full"];
    };
    /** @description Data about the response, including pagination. */
    MetaWithPartialPagination: {
      pagination?: components["schemas"]["pagination_Partial"];
    };
    /**
     * Empty meta response.
     * @description Response metadata.
     */
    EmptyMeta: {
      [key: string]: unknown;
    };
    /** @description Data about the pagination. */
    pagination_Full: {
      /** @description The maximum number of items per page. */
      per_page?: number;
      /** @description Total number of items in the result set. */
      total?: number;
      /** @description Total number of items in the collection response. */
      count?: number;
      /** @description The total number of pages in the collection. */
      total_pages?: number;
      /** @description The current page number. */
      current_page?: number;
      /** @description Pagination links for the previous, current, or next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /** @description Link to the current page returned in the response. */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /** @description Data about the pagination. */
    pagination_Partial: {
      /** @description Total number of items in the collection response. */
      count?: number;
      /** @description Total number of items in the result set. */
      total?: number;
      /** @description Pagination links for the previous, current, or next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /** @description Link to the current page returned in the response. */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
      /** @description The total number of pages in the collection. */
      total_pages?: number;
    };
    Site: {
      /** @description The ID of the site. */
      id?: number;
      /**
       * @description The fully qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
       * @example http://kittens.mybigcommerce.com/
       */
      url?: string;
      /** @description The channel to which this site is attached. Each site belongs to a single channel, and each channel can have either zero or more sites. */
      channel_id?: number;
      /**
       * Format: date-time
       * @description The date-time that this site was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
       * @example 2018-01-04T04:15:50.000Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date-time that this site was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
       * @example 2018-01-04T04:15:50.000Z
       */
      updated_at?: string;
      /**
       * @description Indicates if a private/dedicated SSL is installed on this site, or if itʼs using shared SSL.
       * @enum {string}
       */
      ssl_status?: "dedicated" | "shared";
      /** @description All URLs that belong to the site, including `primary`, `canonical`, and `checkout` URLs. */
      urls?: components["schemas"]["Url"][];
      /** @description Indicates whether the channel uses a custom checkout domain. When `false`, the checkout domain falls back to the default channel’s primary URL. */
      is_checkout_url_customized?: boolean;
    };
    Url: {
      /** @description URL of site */
      url?: string;
      /**
       * @description URL type
       * @enum {string}
       */
      type?: "primary" | "canonical" | "checkout";
      /**
       * Format: date-time
       * @description The date-time that this URL was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
       * @example 2018-01-04T04:15:50.000Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date-time that this URL was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
       * @example 2018-01-04T04:15:50.000Z
       */
      updated_at?: string;
    };
    /** site_Put */
    site_Put: {
      /** @description The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this. */
      url?: string;
    };
    /** site_Post */
    site_Post: {
      /**
       * @description The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
       * @example http://kittens.mybigcommerce.com/
       */
      url?: string;
      /** @description The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
      channel_id?: number;
    };
    /** site_Full */
    site_Full: {
      id?: number;
      /**
       * @description The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
       * @example http://kittens.mybigcommerce.com/
       */
      url?: string;
      /** @description The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
      channel_id?: number;
      /**
       * @description When was this site created? RFC 3339
       * @example 2018-01-04T04:15:50.000Z
       */
      created_at?: string;
      /**
       * @description When was this site defintion last updated? RFC 3339
       * @example 2018-01-04T04:15:50.000Z
       */
      updated_at?: string;
      /** @description (optional - if included) collection of routes defined for this site. Limited to 200 routes side loaded (query routes direction via `/routes` for bulk) */
      routes?: ({
          /** @description Unique ID for this route. Required when updating an existing route */
          id?: number;
          /**
           * @description What type of resource are we routing to?
           * @enum {string}
           */
          type?: "product" | "brand" | "category" | "page" | "blog" | "home" | "cart" | "checkout" | "search" | "account" | "login" | "returns" | "static";
          /**
           * @description (entity_id?) For the specified type, which resources should match this route? e.g For a route with the type: "product" and matching: "5" this route would be used for the product with the ID of 5.
           *
           * Depending on the type of resource, this may be an ID (matching a specific item), or a "*" wildcard matching all items of that type.
           * @example 5
           */
          matching?: string;
          /**
           * @description The route template that will be used to generate the URL for the requested resource.
           *
           * Supports several tokens:
           *
           * - {id} The ID of the requested item
           * - {slug} The slug for the requested item (if available). Note: the `slug` value may contain `/` slash
           * - {language} The language string that the client is using
           * @example /my-amazing-product
           */
          route?: string;
        })[];
    };
    /**
     * metafield_Post
     * @description Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand is 250. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    metafield_Post: {
      /**
       * @description Namespace for the metafield, for organizational purposes. This is set by the developer.
       * @example Warehouse Locations
       */
      namespace: string;
      /**
       * @description The name of the field.
       *
       * @example Location
       */
      key: string;
      /**
       * @description The value of the field.
       *
       * @example 4HG
       */
      value: string;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description
       * |-|-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Description for the metafield.
       *
       * @example Location in the warehouse
       */
      description?: string;
    };
    /**
     * metafield_Put
     * @description Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand 250. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    metafield_Put: {
      /**
       * @description Namespace for the metafield, for organizational purposes.
       * @example Warehouse Locations
       */
      namespace?: string;
      /**
       * @description The name of the field.
       *
       * @example Location
       */
      key?: string;
      /**
       * @description The value of the field.
       *
       * @example 4HG
       */
      value?: string;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description
       * |-|-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Description for the metafield.
       *
       * @example Location in the warehouse.
       */
      description?: string;
    };
  };
  responses: {
    multiple_channels_without_currencies_resp: {
      content: {
        "application/json": {
          data: components["schemas"]["ChannelWithoutCurrencies"][];
          meta: components["schemas"]["MetaWithFullPagination"];
        };
      };
    };
    single_channel_without_currencies_resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["ChannelWithoutCurrencies"];
          meta?: components["schemas"]["EmptyMeta"];
        };
      };
    };
    single_channel_with_currencies_resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["ChannelWithCurrencies"];
          meta?: components["schemas"]["EmptyMeta"];
        };
      };
    };
    channel_active_theme_resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["ActiveTheme"];
          meta?: components["schemas"]["EmptyMeta"];
        };
      };
    };
    multiple_channels_currency_assignments_resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["CurrencyNotRequiredWithChannelId"][];
          meta?: components["schemas"]["EmptyMeta"];
        };
      };
    };
    single_channel_currency_assignments_resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["CurrencyNotRequiredWithChannelId"];
          meta?: components["schemas"]["EmptyMeta"];
        };
      };
    };
    delete_currency_assignments_resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["ChannelId"];
          meta?: components["schemas"]["EmptyMeta"];
        };
      };
    };
    single_and_multiple_listings_resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["Listing"][];
          meta?: components["schemas"]["MetaWithPartialPagination"];
        };
      };
    };
    single_listing_resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["Listing"];
          meta?: components["schemas"]["EmptyMeta"];
        };
      };
    };
    site_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["Site"];
          meta?: components["schemas"]["EmptyMeta"];
        };
      };
    };
    channel_menus_Resp: {
      content: {
        "application/json": {
          data?: {
            bigcommerce_protected_app_sections?: components["schemas"]["BigCommerceProtectedAppSections"];
            custom_app_sections?: components["schemas"]["CustomAppSections"];
          };
          meta?: components["schemas"]["EmptyMeta"];
        };
      };
    };
    /** @description Invalid channel ID is provided. */
    invalid_channel_id_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Invalid value is provided to the query parameter(s). */
    invalid_filter_value_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description The request is missing one or more required fields or invalid data is submitted. Commonly, an invalid combination of `type` and `platform` was provided. */
    missing_or_invalid_channel_data_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description A *Channel* with the provided ID was not found. */
    channel_not_found_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description A *Channel Listing* with the provided channel ID and listing ID was not found. */
    listing_not_found_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Active Theme of the *Channel* was not found. */
    active_theme_not_found_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description A *Channel* with the provided ID was not found. */
    channel_entity_not_found_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description A *Channel* with the same combination of `name`, `platform`, and `type` already exists. */
    duplicate_channel_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description When an invalid value or invalid field is submitted, a 422 response will be sent. Note that attempt to update a deleted or terminated channel will also result in 422 response. */
    invalid_channel_update_field_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description The request is missing one or more required fields or invalid data is submitted. */
    missing_or_invalid_multiple_channels_currency_assignments_data_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description The request is missing one or more required fields or invalid data is submitted. */
    missing_or_invalid_single_channel_currency_assignments_data_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description The request is missing one or more required fields or invalid data is submitted. */
    missing_or_invalid_multiple_listings_data_for_post_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description The request is missing one or more required fields or invalid data is submitted. Note that the `group_id` in the Invalid Listing ID example refers to `listing_id`. Please use `listing_id` instead of `group_id` in the request payload. */
    missing_or_invalid_multiple_listings_data_for_put_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description When an invalid value or invalid query parameter is submitted, a 422 response will be sent. */
    invalid_filters_resp: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description OK */
    metafield_200: {
      content: {
        "application/json": {
          /**
           * @description Unique ID of the *Metafield*.
           * @example 6
           */
          id?: number;
          /**
           * @description Determines the visibility and writeability of the field by other API consumers.
           *
           * |Value|Description
           * |-|-|
           * |`app_only`|Private to the app that owns the field|
           * |`read`|Visible to other API consumers|
           * |`write`|Open for reading and writing by other API consumers|
           * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
           * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
           * @enum {string}
           */
          permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
          /**
           * @description Namespace for the metafield, for organizational purposes.
           * @example Warehouse Locations
           */
          namespace?: string;
          /**
           * @description The name of the field, for example: `location_id`, `color`.
           *
           * @example Location
           */
          key?: string;
          /**
           * @description The value of the field.
           *
           * @example 4HG
           */
          value?: string;
          /**
           * @description Description for the metafields.
           *
           * @example Location in the warehouse
           */
          description?: string;
          /**
           * @description The type of resource with which the metafield is associated.
           *
           * @example product
           * @enum {string}
           */
          resource_type?: "category" | "brand" | "product" | "variant";
          /**
           * @description The ID for the resource with which the metafield is associated.
           *
           * @example 111
           */
          resource_id?: number;
          /**
           * Format: date-time
           * @description Date and time of the metafieldʼs creation. Read-Only.
           *
           * @example 2018-05-07T20:14:17.000Z
           */
          date_created?: string;
          /**
           * Format: date-time
           * @description Date and time when the metafield was last updated. Read-Only.
           *
           * @example 2018-05-07T20:14:17.000Z
           */
          date_modified?: string;
        };
      };
    };
    /** @description Example response */
    metafields_200: {
      content: {
        "application/json": {
          data?: components["schemas"]["metafield_Base"][];
        } & {
          meta?: components["schemas"]["MetaWithFullPagination"];
        };
      };
    };
  };
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam?: number;
    /** @description The ID of the `Metafield`. */
    MetafieldIdParam: number;
    /** @description Filter based on a metafieldʼs key. */
    MetafieldKeyParam?: string;
    /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
    MetafieldKeyInParam?: string[];
    /** @description Filter based on a metafieldʼs namespace. */
    MetafieldNamespaceParam?: string;
    /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
    MetafieldNamespaceInParam?: string[];
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam?: "asc" | "desc";
    /** @description Channels subresources that can be included in the response. */
    include?: "currencies";
    /** @description Filter items based on whether the channel is currently available for integration. Setting this query parameter to `true` will return channels with the status of `prelaunch`, `active` , `inactive`, and `connected`. Setting this query parameter to `false` will return channels with the status of `disconnected`, `archived`, `deleted`, and `terminated`. */
    available?: boolean;
    /** @description Filter items by a comma-separated list of statuses. */
    status_in?: ("prelaunch" | "active" | "inactive" | "connected" | "disconnected" | "archived" | "deleted" | "terminated")[];
    /** @description Filter items by a comma-separated list of types. */
    type_in?: ("marketplace" | "marketing" | "pos" | "storefront")[];
    /** @description Filter items by a comma-separated list of platforms. For a list of supported platforms, see [Platform](/docs/rest-management/channels#platform). */
    platform_in?: string[];
    /** @description Filter items by date_created. For example, `date_created=2019-09-04T00:00:00`, `date_created=2019-09-04`, or `date_created=1567573200` */
    date_created?: string;
    /** @description Filter items by minimum date_created. For example, `date_created:min=2019-09-04T00:00:00`, `date_created:min=2019-09-04`, or `date_created:min=1567573200` */
    date_created_min?: string;
    /** @description Filter items by maximum date_created. For example, `date_created:max=2019-09-04T00:00:00`, `date_created:max=2019-09-04`, or `date_created:max=1567573200` */
    date_created_max?: string;
    /** @description Filter items by date_modified. For example, `date_modified=2019-09-04T00:00:00`, `date_modified=2019-09-04`, or `date_modified=1567573200` */
    date_modified?: string;
    /** @description Filter items by minimum date_modified. For example, `date_modified:min=2019-09-04T00:00:00`, `date_modified:min=2019-09-04`, or `date_modified:min=1567573200` */
    date_modified_min?: string;
    /** @description Filter items by maximum date_modified. For example, `date_modified:max=2019-09-04T00:00:00`, `date_modified:max=2019-09-04`, or `date_modified:max=1567573200` */
    date_modified_max?: string;
    /** @description Controls the number of items per page for paginated responses. */
    limit?: number;
    /** @description Specifies the page number for a paginated response. */
    page?: number;
    /** @description Specifies the prior listing ID in a limited (paginated) list of listings. */
    after?: number;
    /** @description Filter items by a comma-separated list of product IDs. */
    product_id_in?: number[];
    /** @description The ID of a channel. */
    channel_id_path_param: number;
    /** @description The ID of a channel listing. */
    listing_id_path_param: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Channels
   * @description Returns a list of *Channels*.
   *
   * Will always return the default BigCommerce storefront with an ID of `1`. This storefront is created by default when you provision a BigCommerce store.
   */
  getChannels: {
    parameters: {
      query?: {
        include?: components["parameters"]["include"];
        available?: components["parameters"]["available"];
        "status:in"?: components["parameters"]["status_in"];
        "type:in"?: components["parameters"]["type_in"];
        "platform:in"?: components["parameters"]["platform_in"];
        date_created?: components["parameters"]["date_created"];
        "date_created:min"?: components["parameters"]["date_created_min"];
        "date_created:max"?: components["parameters"]["date_created_max"];
        date_modified?: components["parameters"]["date_modified"];
        "date_modified:min"?: components["parameters"]["date_modified_min"];
        "date_modified:max"?: components["parameters"]["date_modified_max"];
        limit?: components["parameters"]["limit"];
        page?: components["parameters"]["page"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["multiple_channels_without_currencies_resp"];
      422: components["responses"]["invalid_filter_value_resp"];
    };
  };
  /**
   * Create a Channel
   * @description Creates a *Channel*.
   */
  createChannel: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChannelReq"];
      };
    };
    responses: {
      200: components["responses"]["single_channel_without_currencies_resp"];
      422: components["responses"]["missing_or_invalid_channel_data_resp"];
    };
  };
  /**
   * Get a Channel
   * @description Returns a *Channel*. Channel ID `1` returns the default BigCommerce storefront.
   */
  getChannel: {
    parameters: {
      query?: {
        include?: components["parameters"]["include"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: components["responses"]["single_channel_with_currencies_resp"];
      404: components["responses"]["channel_not_found_resp"];
    };
  };
  /**
   * Update a Channel
   * @description Updates a *Channel*.
   *
   * ## Updatable Fields
   *
   * The following fields can be updated.
   * * `name`
   * * `external_id`
   * * `status`
   * * `is_listable_from_ui`
   * * `is_visible`
   * * `config_meta`
   *
   *
   * > #### Note
   * > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
   * > * `platform` and `type` cannot be updated after a channel is created.
   * > * A channel with status `deleted` or `terminated` cannot be updated.
   */
  updateChannel: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateChannelReq"];
      };
    };
    responses: {
      200: components["responses"]["single_channel_without_currencies_resp"];
      404: components["responses"]["channel_entity_not_found_resp"];
      409: components["responses"]["duplicate_channel_resp"];
      422: components["responses"]["invalid_channel_update_field_resp"];
    };
  };
  /**
   * Get a Channel Active Theme
   * @description Returns details of the theme active on the specified channel.
   * Does not support active Blueprint (legacy) themes.
   */
  getChannelActiveTheme: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: components["responses"]["channel_active_theme_resp"];
      404: components["responses"]["active_theme_not_found_resp"];
    };
  };
  /**
   * Get All Channels Currency Assignments
   * @description Returns a list of currency assignments for all channels.
   */
  getAllCurrencyAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["multiple_channels_currency_assignments_resp"];
    };
  };
  /**
   * Update Multiple Channels Currency Assignments
   * @description Updates enabled currencies and default currency for multiple channels. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
   */
  updateMultipleChannelsCurrencyAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpsertMultipleChannelsCurrencyAssignmentsReq"];
      };
    };
    responses: {
      200: components["responses"]["multiple_channels_currency_assignments_resp"];
      422: components["responses"]["missing_or_invalid_multiple_channels_currency_assignments_data_resp"];
    };
  };
  /**
   * Create Multiple Channels Currency Assignments
   * @description Sets enabled currencies and default currency for multiple channels. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
   */
  createMultipleChannelsCurrencyAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpsertMultipleChannelsCurrencyAssignmentsReq"];
      };
    };
    responses: {
      200: components["responses"]["multiple_channels_currency_assignments_resp"];
      422: components["responses"]["missing_or_invalid_multiple_channels_currency_assignments_data_resp"];
    };
  };
  /**
   * Get Channel Currency Assignments
   * @description Returns a list of currency assignments for a specific channel.
   */
  getSingleChannelCurrencyAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: components["responses"]["single_channel_currency_assignments_resp"];
      404: components["responses"]["channel_not_found_resp"];
    };
  };
  /**
   * Update Channel Currency Assignments
   * @description Updates enabled currencies and default currency for a specific channel. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
   */
  updateSingleChannelCurrencyAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrencyRequiredWithoutChannelId"];
      };
    };
    responses: {
      200: components["responses"]["single_channel_currency_assignments_resp"];
      422: components["responses"]["missing_or_invalid_single_channel_currency_assignments_data_resp"];
    };
  };
  /**
   * Create Channel Currency Assignments
   * @description Sets enabled currencies and default currency for a specific channel. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
   */
  createSingleChannelCurrencyAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrencyRequiredWithoutChannelId"];
      };
    };
    responses: {
      200: components["responses"]["single_channel_currency_assignments_resp"];
      422: components["responses"]["missing_or_invalid_single_channel_currency_assignments_data_resp"];
    };
  };
  /**
   * Delete Channel Currency Assignments
   * @description Deletes currency assignments for a specific channel. Once done, this channel will inherit the store’s currency settings.
   */
  deleteSingleChannelCurrencyAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: components["responses"]["delete_currency_assignments_resp"];
      404: components["responses"]["channel_not_found_resp"];
    };
  };
  /**
   * Get Channel Listings
   * @description Returns a list of all *Channel Listings* for a specific channel. Note that if the *Channel* is not found or there is no listing associated to the *Channel*, it will return a 200 response with empty data.
   */
  getChannelListings: {
    parameters: {
      query?: {
        limit?: components["parameters"]["limit"];
        after?: components["parameters"]["after"];
        "product_id:in"?: components["parameters"]["product_id_in"];
        date_created?: components["parameters"]["date_created"];
        "date_created:min"?: components["parameters"]["date_created_min"];
        "date_created:max"?: components["parameters"]["date_created_max"];
        date_modified?: components["parameters"]["date_modified"];
        "date_modified:min"?: components["parameters"]["date_modified_min"];
        "date_modified:max"?: components["parameters"]["date_modified_max"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: components["responses"]["single_and_multiple_listings_resp"];
      400: components["responses"]["invalid_channel_id_resp"];
      422: components["responses"]["invalid_filters_resp"];
    };
  };
  /**
   * Update Channel Listings
   * @description Updates one or more *Channel Listings* for a specific channel.
   *
   * > #### Note
   * > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
   * > * If a new variant is provided, the API will append the variant to the list. If a variant already exists, the API will update the existing variant. Other variants that are not provided in the payload remains unchanged.
   * > * If `listing_id` does not exist, the API will return a 200 response with empty data.
   * > * `listing_id` is required and cannot be less than or equal to zero.
   * > * `product_id` cannot be updated after a channel listing is created.
   * > * `product_id` of a variant must match the `product_id` of the channel listing.
   */
  updateChannelListings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMultipleListingsReq"];
      };
    };
    responses: {
      200: components["responses"]["single_and_multiple_listings_resp"];
      422: components["responses"]["missing_or_invalid_multiple_listings_data_for_put_resp"];
    };
  };
  /**
   * Create Channel Listings
   * @description Creates one or more *Channel Listings* for a specific channel.
   */
  createChannelListings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMultipleListingsReq"];
      };
    };
    responses: {
      200: components["responses"]["single_and_multiple_listings_resp"];
      422: components["responses"]["missing_or_invalid_multiple_listings_data_for_post_resp"];
    };
  };
  /**
   * Get a Channel Listing
   * @description Returns a *Channel Listing* for a specific channel.
   */
  getChannelListing: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
        listing_id: components["parameters"]["listing_id_path_param"];
      };
    };
    responses: {
      200: components["responses"]["single_listing_resp"];
      404: components["responses"]["listing_not_found_resp"];
    };
  };
  /**
   * Upsert a Siteʼs Checkout URL
   * @description Creates or updates (upserts) a siteʼs checkout URL
   */
  updateCheckoutUrl: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PutCheckoutUrl"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Site"];
          "Example 1": unknown;
        };
      };
      /** @description Unprocessable Entity. Your checkout and storefront must be within the same main domain like `example.com` and `subdomain.example.com` */
      422: {
        content: {
          "application/json": {
            /** @default 422 */
            status?: number;
            /** @example Incorrect checkout url https://checkout.example.com. Your checkout and storefront must be within the same main domain like “main.com” and “subdomain.main.com */
            title?: string;
            /** @default https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes */
            type?: string;
            errors?: Record<string, never>;
          };
        };
      };
    };
  };
  /**
   * Delete a Siteʼs Checkout URL
   * @description Deletes a siteʼs checkout URL. After deletion, a shared checkout URL is used.
   */
  deleteCheckoutUrl: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      /** @description OK. `data` and `meta` are empty objects. */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
            meta?: components["schemas"]["EmptyMeta"];
          };
        };
      };
    };
  };
  /**
   * Get a Channel Site
   * @description Alias of `GET /sites?channel_id=channel_id`
   *
   * Returns site data for the specified channel.
   */
  getChannelSite: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: components["responses"]["site_Resp"];
    };
  };
  /**
   * Update a Channel Site
   * @description Updates a site for provided channel.
   */
  updateChannelSite: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["site_Put"];
      };
    };
    responses: {
      200: components["responses"]["site_Resp"];
    };
  };
  /**
   * Create a Channel Site
   * @description Alias of POST `/sites`. Creates a site for provided channel.
   */
  createChannelSite: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["site_Post"];
      };
    };
    responses: {
      200: components["responses"]["site_Resp"];
    };
  };
  /**
   * Delete a Channel Site
   * @description Deletes the Channelʼs site.
   */
  deleteChannelSite: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Get Channel Menus
   * @description Returns list of Control Panel side navigation menus for a channel.
   */
  getChannelMenus: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: components["responses"]["channel_menus_Resp"];
    };
  };
  /**
   * Create Channel Menus
   * @description Creates or replaces list of control panel side navigation menus for a channel.
   */
  createChannelMenus: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["channel_menus_Post"];
      };
    };
    responses: {
      200: components["responses"]["channel_menus_Resp"];
    };
  };
  /**
   * Delete Channel Menus
   * @description Deletes control panel side navigation menus for a channel.
   */
  deleteChannelMenus: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: number;
            meta?: components["schemas"]["EmptyMeta"];
          };
        };
      };
    };
  };
  /**
   * Get Channel Metafields
   * @description Returns a list of metafields on a channel. Optional filter parameters can be passed in.
   */
  getChannelMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        direction?: components["parameters"]["DirectionParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    responses: {
      200: components["responses"]["metafield_200"];
    };
  };
  /**
   * Create a Channel Metafield
   * @description Creates a channel metafield.
   *
   * **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, channel, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  createChannelMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["metafield_Post"];
      };
    };
    responses: {
      200: components["responses"]["metafield_200"];
    };
  };
  /**
   * Get a Channel Metafield
   * @description Returns a single channel metafield.
   */
  getChannelMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
        metafield_id: string;
      };
    };
    responses: {
      200: components["responses"]["metafield_200"];
    };
  };
  /**
   * Update a Channel Metafield
   * @description Updates a single channel metafield.
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a `403` error message.
   */
  updateChannelMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
        metafield_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["metafield_Put"];
      };
    };
    responses: {
      200: components["responses"]["metafield_200"];
    };
  };
  /**
   * Delete a Channel Metafield
   * @description Deletes a single channel metafield.
   */
  deleteChannelMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        channel_id: components["parameters"]["channel_id_path_param"];
        metafield_id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get All Channel Metafields
   * @description Get all channel metafields.
   */
  getChannelsMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        "key:in"?: components["parameters"]["MetafieldKeyInParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
        direction?: components["parameters"]["DirectionParam"];
      };
    };
    responses: {
      /** @description List of `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update multiple Metafields
   * @description Update multiple metafields.
   */
  updateChannelsMetafields: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MetafieldPut"][];
      };
    };
    responses: {
      /** @description List of updated `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Create multiple Metafields
   * @description Create multiple metafields.
   */
  createChannelsMetafields: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MetafieldPost"][];
      };
    };
    responses: {
      /** @description List of created `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Delete All Metafields
   * @description Delete all channel metafields.
   */
  deleteChannelsMetafields: {
    /** @description List of metafield IDs. */
    requestBody?: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Response object for metafields deletion with success. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
        };
      };
      /** @description Response object for metafields deletion with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
        };
      };
    };
  };
}
