// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/checkouts/{checkoutId}": {
    /**
     * Get a Checkout
     * @description Returns a *Checkout*.
     *
     * The cart ID and checkout ID are the same.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    get: operations["getCheckout"];
    /**
     * Update Customer Messages
     * @description Updates *Checkout* customer messages.
     *
     * **Limits**
     *
     * * 2000 character limit
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    put: operations["updateCheckout"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
  };
  "/checkouts/{checkoutId}/carts/{cartId}/items/{itemId}": {
    /**
     * Update a Line Item
     * @description Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.
     *
     * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/docs/rest-storefront/carts/cart-items#add-cart-line-items) endpoint or the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront).
     *
     * > #### Notes
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    put: operations["updateCheckoutLineItem"];
    /**
     * Delete a Line Item
     * @description Deletes a *Line Item* from the *Cart*.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    delete: operations["deleteCheckoutLineItem"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        cartId: components["parameters"]["CartIdPath"];
        itemId: components["parameters"]["ItemIdPath"];
      };
    };
  };
  "/checkouts/{checkoutId}/billing-address": {
    /**
     * Add Checkout Billing Address
     * @description Adds a billing address to an existing *Checkout*.
     *
     * **Required Fields**
     * * country_code
     *
     *
     * > #### Note
     * > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically.
     * > * Sending `email` property as a payload in POST request triggers the abandoned cart notification process.
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    post: operations["addCheckoutBillingAddress"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
  };
  "/checkouts/{checkoutId}/billing-address/{addressId}": {
    /**
     * Update Checkout Billing Address
     * @description Updates an existing billing address on *Checkout*.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    put: operations["updateCheckoutBillingAddress"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        addressId: components["parameters"]["AddressIdPath"];
      };
    };
  };
  "/checkouts/{checkoutId}/consignments": {
    /**
     * Create a Consignment
     * @description Adds a new *Consignment* to *Checkout*.
     *
     * Perform the following two steps to define the fulfillment of the items in the cart.
     *
     * ### For shipping consignments:
     *
     *   1. Add a new Consignment to Checkout.
     *
     *       * Send a `POST` request to `/consignments` with each shipping address, line item IDs, and quantities. Each address can have its own line item IDs.
     *       * Provide a full valid customer address before placing the order. If provided, the order placement will succeed.
     *       * As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on the items, the address, and the shipping location. This will return `availableShippingOptions` in the response.
     *
     *       * Required Fields:
     *         * `shipping_address` (deprecated) or `address`
     *         * `lineItems`
     *
     *   2. Update the Consignment with Shipping Options using the [REST Storefront API](/docs/rest-storefront/checkouts/checkout-consignments#update-a-consignment), the [REST Management API](/docs/rest-management/checkouts/checkout-consignments#update-checkout-consignment) or the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront).
     *
     * ### For pickup consignments:
     *
     *   Create a new consignment object.
     *
     *       - Send a `POST` request to `/consignments` with line item IDs and quantities.
     *       - Provide a `pickupMethodId`. This is the `id` of the Pickup Method provided in the response body of the Storefront Pickup Options API.
     *       - Required Fields:
     *           * `pickupOption`
     *           * `lineItems`
     *
     * To learn more about creating a Checkout Consignment, see the [Carts and Checkouts Tutorial](/docs/storefront/cart-checkout/guide/rest-storefront).
     *
     * > #### Notes
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    post: operations["createCheckoutConsignment"];
    parameters: {
      query?: {
        include?: components["parameters"]["IncludeShippingDefault"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
  };
  "/checkouts/{checkoutId}/consignments/{consignmentId}": {
    /**
     * Update a Consignment
     * @description Updates an existing consignment. An update is either one of the following:
     *
     * 1. Updates the consignment address and/or line items.
     * 2. Selects a specific fulfillment option.
     *
     * ### Update the consignment address and line items
     * For this type of update, the payload is the same as when creating a new consignment.         Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from the POST `/consignment` response.
     *
     * **Note:**
     * Updating a consignment could invalidate the value for `selectedShippingOption` and `selectedPickupOption`.
     *
     * ### Select a specific fulfillment option
     * Before placing an order, each consignment must have a `selectedShippingOption` or a `selectedPickupOption`.
     *
     * If the consignment already has a pick-up option selected and a shipping option is provided, the pick-up option will be deselected and the shipping option will be selected instead (and vice versa). The `PUT` request will fail if it contains a shipping option ID and a pickup option ID.
     *
     * Required Fields:
     * * `shippingOptionId` or `pickupOptionId`
     * * `lineItems`
     *
     * To learn more about creating a Checkout Consignment see [Checkout Consignment API](/docs/storefront/cart-checkout/guide/consignments).
     *
     * > #### Notes
     * > * You cannot pass both an `address` and a `shippingOptionId` because the shipping option may not be available for the new address
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    put: operations["updateCheckoutConsignment"];
    /**
     * Delete a Consignment
     * @description Removes an existing *Consignment* from *Checkout*.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    delete: operations["deleteCheckoutConsignment"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        consignmentId: components["parameters"]["ConsignmentIdPath"];
      };
    };
  };
  "/checkouts/{checkoutId}/gift-certificates": {
    /**
     * Add Gift Certificate to Checkout
     * @description Adds a *Gift Certificate Code* to *Checkout*.
     *
     * > #### Note
     * > * *Gift Certificates* are treated as a payment methods.
     * > * You are not able to purchase a gift certificate with a gift certificate.
     * > * The rate limit is 20/hour (only for unique gift-certificate codes).
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    post: operations["addCheckoutGiftCertificate"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
  };
  "/checkouts/{checkoutId}/gift-certificates/{giftCertificateCode}": {
    /**
     * Delete Gift Certificate
     * @description Deletes an existing *Gift Certificate*.
     *
     * This removes the *Gift Certificate* payment method.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    delete: operations["deleteCheckoutGiftCertificate"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        giftCertificateCode: components["parameters"]["GiftCertificateCodePath"];
      };
    };
  };
  "/checkouts/{checkoutId}/coupons": {
    /**
     * Add Coupon to Checkout
     * @description Adds a *Coupon Code* to *Checkout*.
     *
     * **Required Fields**
     * * couponCode
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    post: operations["addCheckoutCoupon"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
  };
  "/checkouts/{checkoutId}/coupons/{couponCode}": {
    /**
     * Delete Checkout Coupon
     * @description Deletes a *Coupon Code* from *Checkout*.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    delete: operations["deleteCheckoutCoupon"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        couponCode: components["parameters"]["CouponCodePath"];
      };
    };
  };
  "/checkouts/{checkoutId}/store-credit": {
    /**
     * Add Store Credit
     * @description Applies any available store credit to a checkout. As on the storefront, all available store credit will be used (up to the value of the order) and no amount need be specified.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    post: operations["addCheckoutStoreCredit"];
    /**
     * Remove Store Credit
     * @description Removes store credit from a checkout.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    delete: operations["removeCheckoutStoreCredit"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
  };
  "/checkouts/{checkoutId}/spam-protection": {
    /**
     * Checkout Spam Protection
     * @description Verifies if checkout is created by human.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
     */
    post: operations["checkoutSpamProtection"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** SpamProtectionRequest */
    SpamProtectionRequest: {
      token?: string;
    };
    /** checkout_Full */
    checkout_Full: {
      billingAddress?: components["schemas"]["address_Base"];
      cart?: components["schemas"]["checkoutCart"];
      /** @description Channel ID. */
      channelId?: number;
      consignments?: components["schemas"]["consignment_Full"][];
      /** @description Coupons applied at the checkout level. */
      coupons?: components["schemas"]["CheckoutCoupon"][];
      /** @description Fees applied at the checkout level. */
      fees?: components["schemas"]["CheckoutFee"][];
      /** @description Time when the cart was created. */
      createdTime?: string;
      customer?: components["schemas"]["Customer"];
      /** @description Shopperʼs message provided as details for the order to be created from this cart */
      customerMessage?: string;
      /** @description Applied gift certificate (as a payment method). */
      giftCertificates?: components["schemas"]["checkoutGiftCertificates"][];
      /** @description Gift wrapping cost for all items, including or excluding tax. */
      giftWrappingCostTotal?: number;
      /**
       * Format: float
       * @description The total payable amount, before applying any store credit or gift certificate.
       */
      grandTotal?: number;
      /**
       * Format: float
       * @description Handling cost for all consignments including or excluding tax.
       */
      handlingCostTotal?: number;
      /** Format: uuid */
      id?: string;
      /** @description `true` value indicates StoreCredit has been applied. */
      isStoreCreditApplied?: boolean;
      orderId?: string | null;
      /** @description `grandTotal` subtract the store-credit amount */
      outstandingBalance?: number;
      payments?: ({
          /** @description Payment provider ID. */
          providerId?: string;
          /** @description Payment gateway ID. */
          gatewayId?: string | null;
          /**
           * @description Type of payment provider.
           * @enum {string}
           */
          providerType?: "PAYMENT_TYPE_HOSTED";
          /** @description Details regarding which checkout steps a shopper has completed. */
          detail?: ("FINALIZE" | "INITIALIZE" | "ACKNOWLEDGE")[];
        })[];
      promotions?: ({
          /** @enum {string} */
          type?: "promotion" | "upsell" | "eligible" | "applied";
          /** @description Text displayed on the storefront for the promotion. */
          text?: string;
        })[];
      /** @description The shipping cost before discounts are applied. */
      shippingCostBeforeDiscount?: number;
      /**
       * Format: float
       * @description Shipping cost before any discounts are applied.
       */
      shippingCostTotal?: number;
      shouldExecuteSpamCheck?: boolean;
      /**
       * Format: float
       * @description Subtotal of the checkout before applying item-level discounts. Tax inclusive based on the store settings.
       */
      subtotal?: number;
      taxes?: components["schemas"]["checkoutTax"][];
      /** Format: float */
      taxTotal?: number;
      /** @description Time when the cart was last updated. */
      updatedTime?: string;
      /**
       * @description The current version of the checkout increments with each successful update. You can use it to enable optimistic concurrency control for subsequent updates.
       * @example 1
       */
      version?: number;
    };
    /** Cart Coupon */
    CartCoupon: {
      /** @description The coupon ID. */
      id?: number;
      /** @description the coupon code */
      code: string;
      /** @description The coupon name displayed on the storefront. */
      displayName?: string;
      /**
       * @description Key name to identify the type of coupon.
       * @enum {string}
       */
      couponType?: "per_item_discount" | "percentage_discount" | "per_total_discount" | "shipping_discount" | "free_shipping" | "promotion";
      /**
       * Format: double
       * @description The discounted amount applied within a given context.
       */
      discountedAmount?: number;
    };
    /** Checkout Coupon */
    CheckoutCoupon: {
      /** @description The coupon ID. */
      id?: number;
      /** @description the coupon code */
      code: string;
      /** @description The coupon name displayed on the storefront. */
      displayName?: string;
      /**
       * @description |Type `int`|Type Name|
       * |-|-|
       * |`0`|`per_item_discount`|
       * |`1`|`percentage_discount`|
       * |`2`|`per_total_discount`|
       * |`3`|`shipping_discount`|
       * |`4`|`free_shipping`|
       * |`5`|`promotion`|
       */
      couponType?: number;
      /**
       * Format: double
       * @description The discounted amount applied within a given context.
       */
      discountedAmount?: number;
    };
    /** Checkout Fee */
    CheckoutFee: {
      /**
       * Format: uuid
       * @description The fee ID.
       * @example 497f6eca-6276-4993-bfeb-53cbbbba6f08
       */
      id?: string;
      /**
       * @description The type of the fee.
       * @enum {string}
       */
      type?: "custom_fee";
      /**
       * @description Name of the fee.
       * @example AAINS
       */
      name?: string;
      /**
       * @description Display name of the fee targeting customers/shoppers.
       * @example Package Protection Insurance
       */
      displayName?: string;
      /**
       * @description Cost of the fee (include or exclude tax dependent on tax settings, same as shipping cost).
       * @example 10
       */
      cost?: number;
      /**
       * @description The source of the request.
       * @example AA
       */
      source?: string;
      /**
       * @description The tax class ID.
       * @example 1
       */
      taxClassId?: number;
    };
    /** @description Customer details. */
    Customer: {
      addresses?: {
          id?: number;
          firstName?: string;
          lastName?: string;
          company?: string;
          address1?: string;
          address2?: string;
          city?: string;
          /** @description State or province. */
          stateOrProvince?: string;
          stateOrProvinceCode?: string;
          /** @description [ISO 3166-1 alpha-2 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for the country. */
          countryCode?: string;
          postalCode?: string;
          phone?: string;
          /** @description Address type. */
          type?: string;
          customFields?: components["schemas"]["customFields"][];
        }[];
      customerGroup?: {
        /** @description ID of the customer group. */
        id?: number;
        /** @description Name of the customer group. */
        name?: string;
      };
      /** @description Customer email. */
      email?: string;
      /** @description Customer's first name. */
      firstName?: string;
      /** @description Customer's full name. */
      fullName?: string;
      /** @description Customer ID. */
      id?: number;
      /** @description Whether the shopper is a guest or a logged-in customer. */
      isGuest?: boolean;
      /** @description Customer's last name. */
      lastName?: string;
      shouldEncourageSignIn?: boolean;
      /** @description The amount of store credit a customer has. */
      storeCredit?: number;
    };
    /**
     * contactEntity
     * @description Model for sender and receiver objects.
     */
    contactEntity: {
      name?: string;
      email?: string;
    };
    /** address_Full */
    address_Full: components["schemas"]["address_Base"] & {
      id?: string;
      /** @description Indicates whether we should add this address to the customer address book. */
      shouldSaveAddress?: boolean;
    };
    /** address_Base */
    address_Base: {
      address1?: string;
      address2?: string;
      city?: string;
      company?: string;
      /** @description Country name. */
      country?: string;
      /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
      countryCode: string;
      customFields?: components["schemas"]["customFields"][];
      email?: string;
      firstName?: string;
      lastName?: string;
      /** @description Represents state or province. */
      stateOrProvince?: string;
      stateOrProvinceCode?: string;
      phone?: string;
      postalCode?: string;
    };
    /**
     * customFields
     * @description When doing a PUT or POST to the `fieldValue` with a pick list, the input must be a number. The response will be a string.
     */
    customFields: {
      fieldId?: string;
      /** @description This can also be an array for fields that need to support list of values; for example, a set of checkboxes. When doing a PUT or POST to the `fieldValue` with a pick list, the input must be a number. The response will be a string. */
      fieldValue?: string;
    };
    /** Billing address request */
    BillingAddressRequest: components["schemas"]["address_Base"] & {
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    /**
     * consignment_Full
     * @description This allows us to have multiple shipping addresses. Where there is only one shipping address, this array will contain only one value, with all the items.
     */
    consignment_Full: {
      address?: components["schemas"]["address_Full"];
      /** @description This is available only when "include=consignments.availableShippingOptions" is present in the URL. */
      availableShippingOptions?: components["schemas"]["consignmentAvailableShippingOptions"][];
      /** @description List of consignment discounts applied through coupons. */
      couponDiscounts?: {
          /** Format: double */
          amount?: number;
          /** @description Coupon code that applied this discount. */
          code?: string;
        }[];
      /** @description List of consignment discounts applied through cart level discounts. */
      discounts?: {
          /** @description Discount rule ID that applied this discount. */
          id?: string;
        }[];
      /**
       * Format: double
       * @description The handling cost of shipping for this consignment.
       */
      handlingCost?: number;
      id?: string;
      selectedPickupOption?: components["schemas"]["PickupOption"];
      /** Selected Shipping Option */
      selectedShippingOption?: {
        /** @description Read only. */
        description?: string;
        id?: string;
        /** @description Specifies the type of shipping option; for example, flat rate, UPS, etc. */
        type?: string;
        imageUrl?: string;
        /** Format: double */
        cost?: number;
        /** @description An estimate of the arrival time. */
        transitTime?: string;
        /** @description Read only. Field used for Shipping Provider API. */
        additionalDescription?: string;
      };
      /**
       * @deprecated
       * @description Use the `address` field instead.
       */
      shippingAddress?: Record<string, never>;
      /**
       * Format: double
       * @description The shipping cost for this consignment.
       */
      shippingCost?: number;
      lineItemIds?: string[];
    };
    /** consignmentAvailableShippingOptions */
    consignmentAvailableShippingOptions: components["schemas"]["consignmentShippingOption_Base"] & {
      /** @description Is this shipping method the recommended shipping option or not. */
      isRecommended?: boolean;
      additionalDescription?: string;
    };
    /** checkoutTax */
    checkoutTax: {
      /** @description Name of the tax. */
      name?: string;
      /** Format: double */
      amount?: number;
    };
    /** checkout_Put */
    checkout_Put: {
      customerMessage?: string;
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    /** cartLineItemPut */
    cartLineItemPut: {
      /** Format: double */
      quantity?: number;
      /** Format: double */
      productId?: number;
      /** Format: double */
      variantId?: number;
      giftWrapping?: components["schemas"]["cartLineItemGiftWrapping_Put"];
    };
    /** cartLineItemGiftCertificate_Put */
    cartLineItemGiftCertificate_Put: {
      /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
      theme: string;
      /** Format: double */
      amount: number;
      sender: components["schemas"]["contactEntity"];
      recipient: components["schemas"]["contactEntity"];
      /** @description Message shown to recipient, as provided by sender. */
      message?: string;
      /** Format: double */
      quantity: number;
    };
    /**
     * Gift Wrapping Request Data
     * @description if passing null, it will remove the current gift wrapping for the item
     */
    cartLineItemGiftWrapping_Put: {
      /**
       * @description Boolean value that specifies whether items whether items should be wrapped together or wrapped individually.
       * @example true
       */
      wrapTogether: boolean;
      /**
       * @description Details for the gift wrapping option selected. This can be specified for each line item or together based on wrapTogether value.
       * If wrapTogether is false, each element in the wrapDetails array determines each item's specific wrapping.
       * (e.g if this line item has 6 quantity, you can pass at maximum 6 elements for the array to spefified each one's wrapping)
       * If wrapTogether is true, we will only use 1st element in the wrapDetails array to determine what to be wrapped
       */
      wrapDetails: {
          /**
           * @description Identifier of the gift wrapping option selected.
           * @example 0
           */
          id: number;
          /**
           * @description Custom gift message.
           * @example Happy Birthday
           */
          message?: string;
        }[];
    } | null;
    /** Create Consignment Request */
    CreateConsignmentRequest: {
      shippingAddress?: Record<string, never>;
      /** Address Properties */
      address?: {
        firstName?: string;
        lastName?: string;
        email?: string;
        company?: string;
        address1?: string;
        address2?: string;
        city?: string;
        /** @description Represents state or province. */
        stateOrProvince?: string;
        stateOrProvinceCode?: string;
        /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
        countryCode: string;
        postalCode?: string;
        phone?: string;
        customFields?: {
            fieldId?: string;
            fieldValue?: string;
          }[];
        /** @description Indicates whether we should add this address to the customer address book. */
        shouldSaveAddress?: boolean;
      };
      lineItems?: {
          /** @description The ID of a line item. */
          itemId: string;
          /**
           * Format: int32
           * @description The quantity of the line item.
           */
          quantity: number;
        }[];
      shippingOptionId?: string;
      pickupOption?: {
        pickupMethodId?: number;
      };
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    /** Delete Coupon Request */
    DeleteCouponCodeRequest: {
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    /** Delete Consignment Request */
    DeleteConsignmentRequest: {
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    /** Gift Certificate Request */
    GiftCertificateRequest: {
      giftCertificateCode?: string;
    };
    /** cart_Put */
    cart_Put: {
      lineItem?: components["schemas"]["cartLineItemPut"];
      giftCertificate?: components["schemas"]["cartLineItemGiftCertificate_Put"];
    };
    /**
     * Update Consignment Request
     * @description One or more of these three fields is mandatory. You can update address and line items in one request. You have to update shipping option ID or pickup option ID in a separate request since changing the address or line items can invalidate the previously available shipping options.
     */
    NewUpdateConsignment: {
      shippingAddress?: Record<string, never>;
      /** Address Properties */
      address?: {
        firstName?: string;
        lastName?: string;
        email?: string;
        company?: string;
        address1?: string;
        address2?: string;
        city?: string;
        /** @description Represents state or province. */
        stateOrProvince?: string;
        stateOrProvinceCode?: string;
        /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
        countryCode: string;
        postalCode?: string;
        phone?: string;
        customFields?: {
            fieldId?: string;
            fieldValue?: string;
          }[];
        /** @description Indicates whether we should add this address to the customer address book. */
        shouldSaveAddress?: boolean;
      };
      lineItems?: {
          /** @description The ID of a line item. */
          itemId: string;
          /**
           * Format: int32
           * @description The quantity of a line item.
           */
          quantity: number;
        }[];
      shippingOptionId?: string;
      pickupOption?: {
        pickupMethodId?: number;
      };
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    /**
     * checkoutCart
     * @description A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data.
     */
    checkoutCart: {
      /**
       * Format: double
       * @description Cost of cart’s contents, before applying discounts.
       */
      baseAmount?: number;
      /**
       * Format: double
       * @description Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes, where applicable.
       */
      cartAmount?: number;
      /** @description Time when the cart was created. */
      createdTime?: string;
      coupons?: components["schemas"]["CartCoupon"][];
      /**
       * Currency
       * @description The currency in which prices are displayed; the store default currency.
       */
      currency?: {
        /** @description ISO-4217 currency code. (See: https://www.iso.org/iso-4217-currency-codes.html.) */
        code?: string;
        /**
         * Format: double
         * @description The number of decimal places for the currency. For example, the USD currency has two decimal places.
         */
        decimalPlaces?: number;
        /** @description The currency name. */
        name?: string;
        /** @description The currency symbol. */
        symbol?: string;
      };
      /**
       * Format: int32
       * @description ID of the customer to which the cart belongs.
       */
      customerId?: number;
      /**
       * Format: double
       * @description Order-based discounted amount only - Excludes coupon discounts and product-based discounts.
       */
      discountAmount?: number;
      discounts?: {
          /** @description Discount ID. */
          id?: number;
          /**
           * Format: double
           * @description The discounted amount applied within a given context.
           */
          discountedAmount?: number;
        }[];
      /** @description The cartʼs email. This is the same email that is used in the billing address. */
      email?: string;
      /**
       * Format: uuid
       * @description Cart ID, provided after creating a cart with a POST.
       */
      id?: string;
      /** @description Boolean representing whether tax information is included. */
      isTaxIncluded?: boolean;
      /** Line Items */
      lineItems?: {
        customItems?: {
            /** @description ID of the custom item. */
            id?: string;
            /** @description The net item price before discounts and coupons. BigCommerce derives an item's list price from the product default price or, if applicable, the sale price configured in the admin panel. */
            listPrice?: string;
            /** @description Item name. */
            name?: string;
            quantity?: string;
            /** @description Custom item SKU. */
            sku?: string;
          }[];
        digitalItems: components["schemas"]["lineItemPhysicalDigital"][];
        giftCertificates?: {
            /**
             * Format: double
             * @description Value must be between $1.00 and $1,000.00.
             */
            amount: number;
            /** @description Gift certificate identifier */
            id?: string;
            /** @description Limited to 200 characters. */
            message?: string;
            /** @description The name of the purchased gift certificate; for example, `$20 Gift Certificate`. */
            name?: string;
            /** Contact Entity */
            recipient: {
              name?: string;
              email?: string;
            };
            /** Contact Entity */
            sender: {
              name?: string;
              email?: string;
            };
            taxable?: boolean;
            /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
            theme: string;
            /** @description Explicitly specifying the gift certificate type. */
            type?: string;
          }[];
        physicalItems: components["schemas"]["lineItemPhysicalDigital"][];
      };
      /**
       * @description Shopper's locale.
       * @example en
       */
      locale?: string;
      /** @description Time when the cart was last updated. */
      updatedTime?: string;
      /** @description Cart version. */
      version?: number;
    };
    lineItemPhysicalDigital: {
      /** @description If the item was added automatically by a promotion, such as a coupon or buy one, get one. */
      addedByPromotion?: boolean;
      categoryNames?: string[];
      /** @description The itemʼs comparison price */
      comparisonPrice?: number;
      /**
       * Format: double
       * @description The total value of all coupons applied to this item.
       */
      couponAmount?: number;
      /** @description A list of discounts applied to this item, as an array of AppliedDiscount objects. */
      discounts?: {
          /** @description Discount ID. */
          id?: number;
          /**
           * Format: double
           * @description The discounted amount applied within a given context.
           */
          discountedAmount?: number;
        }[];
      /**
       * Format: double
       * @description The total value of all discounts applied to this item (excluding coupon).
       */
      discountAmount?: number;
      /** @description The itemʼs comparison price multiplied by the quantity. */
      extendedComparisonPrice?: number;
      /**
       * Format: double
       * @description The itemʼs list price multiplied by the quantity.
       */
      extendedListPrice?: number;
      /**
       * Format: double
       * @description The itemʼs sale price multiplied by the quantity.
       */
      extendedSalePrice?: number;
      /** Gift Wrapping */
      giftWrapping?: {
        name?: string;
        message?: string;
        /** Format: double */
        amount?: number;
      };
      /** @description The line-item ID. */
      id?: string;
      /** @description A publicly-accessible URL for an image of this item. */
      imageUrl?: string;
      isMutable?: boolean;
      /** @description Whether this item requires shipping to a physical address. */
      isShippingRequired?: boolean;
      /** @description Whether the item is taxable. */
      isTaxable?: boolean;
      /**
       * Format: double
       * @description The net item price before discounts and coupons. BigCommerce derives an item's list price from the product default price or, if applicable, the sale price configured in the admin panel.
       */
      listPrice?: number;
      /** @description The itemʼs product name. */
      name?: string;
      options?: {
          /** @description Option name. */
          name?: string;
          /** @description Option ID. */
          nameId?: number;
          /** @description Option value. */
          value?: string;
          /** @description Option value ID. */
          valueId?: string;
        }[];
      /** @description The item’s original price is the same as the product’s default price. */
      originalPrice?: number;
      /** @description The product is part of a bundle such as a product pick list, then the parentId or the main product ID will populate. */
      parentId?: string;
      /** @description ID of the product. */
      productId?: number;
      /** @description SKU of the variant. */
      sku?: string;
      /**
       * Format: double
       * @description Quantity of this item.
       */
      quantity: number;
      /**
       * Format: double
       * @description The itemʼs price after all discounts are applied. The final price before tax calculation.
       */
      salePrice?: number;
      /** @description the product type - physical or digital */
      type?: string;
      /** @description The product URL. */
      url?: string;
      /** @description ID of the variant. */
      variantId?: number;
    };
    /**
     * checkoutGiftCertificates
     * @description Applied gift certificate (as a payment method).
     */
    checkoutGiftCertificates: {
      /** Format: double */
      balance?: number;
      code?: string;
      /** Format: date */
      purchaseDate?: string;
      /** Format: double */
      remaining?: number;
      /** Format: double */
      used?: number;
    };
    /** consignmentShippingOption_Base */
    consignmentShippingOption_Base: {
      /** Format: double */
      cost?: number;
      /** @description Read only. */
      description?: string;
      id?: string;
      imageUrl?: string;
      /** @description An estimate of the arrival time. */
      transitTime?: string;
      /** @description Specifies the type of shipping option; for example, flat rate, UPS, etc. */
      type?: string;
    };
    /**
     * Pickup Option
     * @description An option that represents a location where customers can pick up items.
     */
    PickupOption: {
      pickupMethodId?: number;
    };
  };
  responses: {
    /** @description Cart conflict */
    CartConflictErrorResponse: {
      content: {
        "application/json": {
          status?: number;
          title?: string;
          type?: string;
        };
      };
    };
  };
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description The ID of the subject checkout. Identical to the cart ID. */
    CheckoutIdPath: string;
    /** @description The ID of the cart associated with this checkout. Identical to the checkout ID. */
    CartIdPath: string;
    /** @description The ID of an item being purchased. */
    ItemIdPath: string;
    /** @description The ID of the subject address. */
    AddressIdPath: number;
    /** @description The ID of the subject consignment. */
    ConsignmentIdPath: string;
    /** @description The code of the subject gift certificate. */
    GiftCertificateCodePath: string;
    /** @description The code of the subject coupon. */
    CouponCodePath: string;
    /**
     * @description * `cart.lineItems.physicalItems.options` - physical options
     * * `cart.lineItems.digitalItems.options` - digital options
     * * `cart.lineItems.physicalItems.categoryNames` - physical categories
     * * `cart.lineItems.digitalItems.categoryNames` - digital categories
     * * `cart.lineItems.customItems.categoryNames` - custom categories
     * * `customer` - customer
     * * `customer.customerGroup` - customer group
     * * `payments` - payments
     * * `promotions` - promotions
     * * `consignments.availableShippingOptions` - shipping options
     * * `consignments.availablePickupOptions` - pickup options
     */
    IncludeShippingDefault?: ("cart.lineItems.physicalItems.options" | "cart.lineItems.digitalItems.options" | "cart.lineItems.physicalItems.categoryNames" | "cart.lineItems.digitalItems.categoryNames" | "cart.lineItems.customItems.categoryNames" | "customer" | "customer.customerGroup" | "payments" | "promotions" | "consignments.availableShippingOptions" | "consignments.availablePickupOptions")[];
    /**
     * @description * `cart.lineItems.physicalItems.options` - physical options
     * * `cart.lineItems.digitalItems.options` - digital options
     * * `cart.lineItems.physicalItems.categoryNames` - physical categories
     * * `cart.lineItems.digitalItems.categoryNames` - digital categories
     * * `cart.lineItems.customItems.categoryNames` - custom categories
     * * `customer` - customer
     * * `customer.customerGroup` - customer group
     * * `payments` - payments
     * * `promotions` - promotions
     * * `consignments.availableShippingOptions` - shipping options
     * * `consignments.availablePickupOptions` - pickup options
     */
    IncludeShippingPickupDefault?: ("cart.lineItems.physicalItems.options" | "cart.lineItems.digitalItems.options" | "cart.lineItems.physicalItems.categoryNames" | "cart.lineItems.digitalItems.categoryNames" | "cart.lineItems.customItems.categoryNames" | "customer" | "customer.customerGroup" | "payments" | "promotions" | "consignments.availableShippingOptions" | "consignments.availablePickupOptions")[];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get a Checkout
   * @description Returns a *Checkout*.
   *
   * The cart ID and checkout ID are the same.
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  getCheckout: {
    parameters: {
      query?: {
        include?: components["parameters"]["IncludeShippingDefault"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      /** @description When a problem arises, returns a generic response. */
      400: {
        content: {
          "application/json": {
            errors?: {
                /** Format: int32 */
                status?: number;
                title?: string;
                type?: string;
                detail?: string;
              }[];
          };
        };
      };
    };
  };
  /**
   * Update Customer Messages
   * @description Updates *Checkout* customer messages.
   *
   * **Limits**
   *
   * * 2000 character limit
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  updateCheckout: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["checkout_Put"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      409: components["responses"]["CartConflictErrorResponse"];
    };
  };
  /**
   * Update a Line Item
   * @description Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.
   *
   * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/docs/rest-storefront/carts/cart-items#add-cart-line-items) endpoint or the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront).
   *
   * > #### Notes
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  updateCheckoutLineItem: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        cartId: components["parameters"]["CartIdPath"];
        itemId: components["parameters"]["ItemIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["cart_Put"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
    };
  };
  /**
   * Delete a Line Item
   * @description Deletes a *Line Item* from the *Cart*.
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  deleteCheckoutLineItem: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        cartId: components["parameters"]["CartIdPath"];
        itemId: components["parameters"]["ItemIdPath"];
      };
    };
    responses: {
      /** @description NOTE: Discounted line items are re-evaluated on cart actions and may be automatically added back to your cart with a new line item ID to satisfy promotional requirements. */
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
    };
  };
  /**
   * Add Checkout Billing Address
   * @description Adds a billing address to an existing *Checkout*.
   *
   * **Required Fields**
   * * country_code
   *
   *
   * > #### Note
   * > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically.
   * > * Sending `email` property as a payload in POST request triggers the abandoned cart notification process.
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  addCheckoutBillingAddress: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillingAddressRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      /** @description The email trying to be set for the guest is associated with an account. The customer must sign in. */
      403: {
        content: {
        };
      };
      409: components["responses"]["CartConflictErrorResponse"];
      /** @description Unable to determine if provided email is associated with an account. The customer must sign in. */
      429: {
        content: {
        };
      };
    };
  };
  /**
   * Update Checkout Billing Address
   * @description Updates an existing billing address on *Checkout*.
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  updateCheckoutBillingAddress: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        addressId: components["parameters"]["AddressIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillingAddressRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      /** @description The email trying to be set for the guest is associated with an account. The customer must sign in. */
      403: {
        content: {
        };
      };
      409: components["responses"]["CartConflictErrorResponse"];
      /** @description Unable to determine if provided email is associated with an account. The customer must sign in. */
      429: {
        content: {
        };
      };
    };
  };
  /**
   * Create a Consignment
   * @description Adds a new *Consignment* to *Checkout*.
   *
   * Perform the following two steps to define the fulfillment of the items in the cart.
   *
   * ### For shipping consignments:
   *
   *   1. Add a new Consignment to Checkout.
   *
   *       * Send a `POST` request to `/consignments` with each shipping address, line item IDs, and quantities. Each address can have its own line item IDs.
   *       * Provide a full valid customer address before placing the order. If provided, the order placement will succeed.
   *       * As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on the items, the address, and the shipping location. This will return `availableShippingOptions` in the response.
   *
   *       * Required Fields:
   *         * `shipping_address` (deprecated) or `address`
   *         * `lineItems`
   *
   *   2. Update the Consignment with Shipping Options using the [REST Storefront API](/docs/rest-storefront/checkouts/checkout-consignments#update-a-consignment), the [REST Management API](/docs/rest-management/checkouts/checkout-consignments#update-checkout-consignment) or the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront).
   *
   * ### For pickup consignments:
   *
   *   Create a new consignment object.
   *
   *       - Send a `POST` request to `/consignments` with line item IDs and quantities.
   *       - Provide a `pickupMethodId`. This is the `id` of the Pickup Method provided in the response body of the Storefront Pickup Options API.
   *       - Required Fields:
   *           * `pickupOption`
   *           * `lineItems`
   *
   * To learn more about creating a Checkout Consignment, see the [Carts and Checkouts Tutorial](/docs/storefront/cart-checkout/guide/rest-storefront).
   *
   * > #### Notes
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  createCheckoutConsignment: {
    parameters: {
      query?: {
        include?: components["parameters"]["IncludeShippingDefault"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateConsignmentRequest"][];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      409: components["responses"]["CartConflictErrorResponse"];
    };
  };
  /**
   * Update a Consignment
   * @description Updates an existing consignment. An update is either one of the following:
   *
   * 1. Updates the consignment address and/or line items.
   * 2. Selects a specific fulfillment option.
   *
   * ### Update the consignment address and line items
   * For this type of update, the payload is the same as when creating a new consignment.         Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from the POST `/consignment` response.
   *
   * **Note:**
   * Updating a consignment could invalidate the value for `selectedShippingOption` and `selectedPickupOption`.
   *
   * ### Select a specific fulfillment option
   * Before placing an order, each consignment must have a `selectedShippingOption` or a `selectedPickupOption`.
   *
   * If the consignment already has a pick-up option selected and a shipping option is provided, the pick-up option will be deselected and the shipping option will be selected instead (and vice versa). The `PUT` request will fail if it contains a shipping option ID and a pickup option ID.
   *
   * Required Fields:
   * * `shippingOptionId` or `pickupOptionId`
   * * `lineItems`
   *
   * To learn more about creating a Checkout Consignment see [Checkout Consignment API](/docs/storefront/cart-checkout/guide/consignments).
   *
   * > #### Notes
   * > * You cannot pass both an `address` and a `shippingOptionId` because the shipping option may not be available for the new address
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  updateCheckoutConsignment: {
    parameters: {
      query?: {
        include?: components["parameters"]["IncludeShippingPickupDefault"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        consignmentId: components["parameters"]["ConsignmentIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewUpdateConsignment"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      409: components["responses"]["CartConflictErrorResponse"];
    };
  };
  /**
   * Delete a Consignment
   * @description Removes an existing *Consignment* from *Checkout*.
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  deleteCheckoutConsignment: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        consignmentId: components["parameters"]["ConsignmentIdPath"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeleteConsignmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      409: components["responses"]["CartConflictErrorResponse"];
    };
  };
  /**
   * Add Gift Certificate to Checkout
   * @description Adds a *Gift Certificate Code* to *Checkout*.
   *
   * > #### Note
   * > * *Gift Certificates* are treated as a payment methods.
   * > * You are not able to purchase a gift certificate with a gift certificate.
   * > * The rate limit is 20/hour (only for unique gift-certificate codes).
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  addCheckoutGiftCertificate: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GiftCertificateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      /** @description Gift certificate code not found */
      404: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Delete Gift Certificate
   * @description Deletes an existing *Gift Certificate*.
   *
   * This removes the *Gift Certificate* payment method.
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  deleteCheckoutGiftCertificate: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        giftCertificateCode: components["parameters"]["GiftCertificateCodePath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
    };
  };
  /**
   * Add Coupon to Checkout
   * @description Adds a *Coupon Code* to *Checkout*.
   *
   * **Required Fields**
   * * couponCode
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  addCheckoutCoupon: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          couponCode?: string;
          /**
           * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
           * @example 1
           */
          version?: number;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      409: components["responses"]["CartConflictErrorResponse"];
    };
  };
  /**
   * Delete Checkout Coupon
   * @description Deletes a *Coupon Code* from *Checkout*.
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  deleteCheckoutCoupon: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
        couponCode: components["parameters"]["CouponCodePath"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DeleteCouponCodeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
      409: components["responses"]["CartConflictErrorResponse"];
    };
  };
  /**
   * Add Store Credit
   * @description Applies any available store credit to a checkout. As on the storefront, all available store credit will be used (up to the value of the order) and no amount need be specified.
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  addCheckoutStoreCredit: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
    };
  };
  /**
   * Remove Store Credit
   * @description Removes store credit from a checkout.
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  removeCheckoutStoreCredit: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
    };
  };
  /**
   * Checkout Spam Protection
   * @description Verifies if checkout is created by human.
   *
   * > #### Note
   * > * Substitute your storefront domain for `yourstore.example.com`.
   * > * The Send a Test Request feature is not currently supported for this endpoint.
   * > * This endpoint requires using Stencil CLI, a local session, and a csrf token to work.
   */
  checkoutSpamProtection: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        checkoutId: components["parameters"]["CheckoutIdPath"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpamProtectionRequest"];
      };
    };
    responses: {
      /** @description Returns Checkout Object. */
      200: {
        content: {
          "application/json": components["schemas"]["checkout_Full"];
        };
      };
    };
  };
}
