// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/catalog/products": {
    /**
     * Get All Products
     * @description Returns a list of **Products**. Optional filter parameters can be passed in.
     */
    get: operations["getProducts"];
    /**
     * Update Products (Batch)
     * @description Updates products in batches. Batches are limited to 10 products.
     *
     * **Required Fields**
     * * `id` - product `id` is required for batch updates to products.
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     */
    put: operations["updateProducts"];
    /**
     * Create a Product
     * @description Creates a *Product*. Only one product can be created at a time; however, you can create multiple product variants using the `variants` array.
     *
     * **Required Fields:**
     * - `name`
     * - `type`
     * - `weight`
     * - `price`
     *
     * **Read-Only Fields**
     * - `id`
     * - `date_created`
     * - `date_modified`
     * - `calculated_price`
     * - `base_variant_id`
     *
     * **Limits**
     * - 250 characters product name length.
     * - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
     *
     * **Usage Notes**
     * * You can create multiple product variants using the `variants` array.
     * * This endpoint accepts a `video` array. To create a product video that accepts a `video` object, see [Create a Product Video](/docs/rest-catalog/products/videos#create-a-product-video) for information.
     */
    post: operations["createProduct"];
    /**
     * Delete Products
     * @description To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
     *
     * > #### Note
     * > The maximum number of products you can delete at one time is 250.
     *
     * **Example**:
     * To delete products with IDs 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
     */
    delete: operations["deleteProducts"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/catalog/products/{product_id}": {
    /**
     * Get a Product
     * @description Returns a single *Product*. Optional parameters can be passed in.
     */
    get: operations["getProduct"];
    /**
     * Update a Product
     * @description Updates a *Product*.
     *
     * **Limits**
     * - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
     *
     * **Read-Only Fields**
     * - id
     * - date_created
     * - date_modified
     * - calculated_price
     * - base_variant_id
     */
    put: operations["updateProduct"];
    /**
     * Delete a Product
     * @description Deletes a *Product*.
     */
    delete: operations["deleteProduct"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/images": {
    /**
     * Get All Product Images
     * @description Returns a list of *Product Images*. Optional parameters can be passed in.
     */
    get: operations["getProductImages"];
    /**
     * Create a Product Image
     * @description Creates a *Product Image*.
     *
     *  **Required Fields**
     * - `image_file`, or
     * - `image_url`
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - For file uploads, use the `multipart/form-data` media type. See [Adding product images](/docs/store-operations/catalog#adding-product-images) for more information.
     * - You can create only one image at a time. A product can have up to 1000 images.
     * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
     * - Each image file or image uploaded by URL can be up to 8 MB.
     */
    post: operations["createProductImage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/images/{image_id}": {
    /**
     * Get a Product Image
     * @description Returns a single *Product Image*. Optional parameters can be passed in.
     */
    get: operations["getProductImage"];
    /**
     * Update a Product Image
     * @description Updates a *Product Image*.
     *
     * **Usage Notes**
     * - `image_url` - `255` character limit
     * - Each image file or image uploaded by URL can be up to 8 MB.
     * - For file uploads, send a POST request using the `multipart/form-data` media type
     */
    put: operations["updateProductImage"];
    /**
     * Delete a Product Image
     * @description Deletes a *Product Image*.
     */
    delete: operations["deleteProductImage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        image_id: components["parameters"]["ImageIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/videos": {
    /**
     * Get All Product Videos
     * @description Returns a list of *Product Videos*. Optional parameters can be passed in.
     */
    get: operations["getProductVideos"];
    /**
     * Create a Product Video
     * @description Creates a *Product Video*.
     *
     * **Required Fields**
     * * video_id
     *
     * **Read-Only Fields**
     * * id
     *
     * Publicly accessible URLs are valid parameters.
     *
     * The Catalog API integrates with third-party YouTube, and you must load videos through YouTube.
     * The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
     */
    post: operations["createProductVideo"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/videos/{id}": {
    /**
     * Get a Product Video
     * @description Returns a single *Product Video*. Optional parameters can be passed in.
     */
    get: operations["getProductVideo"];
    /**
     * Update a Product Video
     * @description Updates a *Product Video.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     *
     * The Catalog API integrates with third-party YouTube, and you must load videos through YouTube.
     * The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
     */
    put: operations["updateProductVideo"];
    /**
     * Delete a Product Video
     * @description Deletes a *Product Video*.
     */
    delete: operations["deleteProductVideo"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        id: components["parameters"]["VideoIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/complex-rules": {
    /**
     * Get Complex Rules
     * @description Returns a list of all product *Complex Rules*. Optional parameters may be passed in.
     */
    get: operations["getProductComplexRules"];
    /**
     * Create a Complex Rule
     * @description Creates a product *Complex Rule*.
     *
     * **Required Fields**
     * - modifier_id
     * - modifier_value_id
     * - variant_id
     *
     * **Read-Only Fields**
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    post: operations["createProductComplexRule"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/complex-rules/{complex_rule_id}": {
    /**
     * Get a Product Complex Rule
     * @description Returns a single *Complex Rule*. Optional parameters can be passed in.
     */
    get: operations["getProductComplexRule"];
    /**
     * Update a Product Complex Rule
     * @description Updates a *Complex Rule*.
     *
     * **Required Fields**:
     * - none
     *
     * **Read-Only Fields**:
     * - complex_rule_id
     * - conditions_id
     * - rule_id
     * - combination_id
     * - id
     */
    put: operations["updateProductComplexRule"];
    /**
     * Delete a Product Complex Rule
     * @description Deletes a product *Complex Rule*.
     */
    delete: operations["deleteProductComplexRule"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/custom-fields": {
    /**
     * Get Product Custom Fields
     * @description Returns a list of product *Custom Fields*. You can pass in optional parameters.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    get: operations["getProductCustomFields"];
    /**
     * Create a Product Custom Field
     * @description Creates a *Custom Field*.
     *
     * **Required Fields:**
     * - name
     * - value
     *
     * **Name-Value Pair Uniqueness**
     * - Every name-value pair must be unique inside a product.
     *
     * **Read-Only:**
     * - id
     *
     * **Limits**
     * - 200 custom fields per product limit.
     * - 250 characters per custom field limit.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    post: operations["createProductCustomField"];
    parameters: {
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/custom-fields/{custom_field_id}": {
    /**
     * Get a Product Custom Field
     * @description Returns a *Custom Field*.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    get: operations["getProductCustomField"];
    /**
     * Update a Product Custom Field
     * @description Updates a *Custom Field*.
     *
     * **Required Fields**
     * - none
     *
     * **Name-Value Pair Uniqueness**
     * - Every name-value pair must be unique inside a product.
     *
     * **Read-Only**
     * - id
     *
     *  **Limits**
     * - 200 custom fields per product limit.
     * - 250 characters per custom field limit.
     * - 40 concurrent requests default rate limit.
     */
    put: operations["updateProductCustomField"];
    /**
     * Delete a Product Custom Field
     * @description Deletes a product *Custom Field*.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    delete: operations["deleteProductCustomField"];
    parameters: {
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        custom_field_id: components["parameters"]["CustomFieldIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/bulk-pricing-rules": {
    /**
     * Create a Bulk Pricing Rule
     * @description Creates a *Bulk Pricing Rule*.
     */
    post: operations["createBulkPricingRule"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}": {
    /**
     * Get a Bulk Pricing Rule
     * @description Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in.
     */
    get: operations["getBulkPricingRule"];
    /**
     * Update a Bulk Pricing Rule
     * @description Updates a *Bulk Pricing Rule*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * - id
     */
    put: operations["updateBulkPricingRule"];
    /**
     * Delete a Bulk Pricing Rule
     * @description Deletes a *Bulk Pricing Rule*.
     */
    delete: operations["deleteBulkPricingRule"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/metafields": {
    /**
     * Get Product Metafields
     * @description Returns a list of *Product Metafields*. Optional parameters can be passed in.
     */
    get: operations["getProductMetafields"];
    /**
     * Create a Product Metafield
     * @description Creates a *Product Metafield*.
     *
     * **Required Fields:**
     * * permission_set
     * * namespace
     * * key
     * * value
     *
     * **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    post: operations["createProductMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/metafields/{metafield_id}": {
    /**
     * Get a Product Metafield
     * @description Returns a single *Product Metafield*. Optional parameters can be passed in.
     */
    get: operations["getProductMetafield"];
    /**
     * Update a Product Metafield
     * @description Updates a *Product Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified using the API account that created the metafield:
     * 	* `namespace`
     * 	* `key`
     * 	* `permission_set`
     * 	* `value`
     *
     * **Usage Notes**
     * * Attempting to modify the `namespace`, `key`, `permission_set`, or `value` field using an API account different from the one used to create those metafields will result in a `403` error message.
     */
    put: operations["updateProductMetafield"];
    /**
     * Delete a Product Metafield
     * @description Deletes a *Product Metafield*.
     */
    delete: operations["deleteProductMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/reviews": {
    /**
     * Get Product Reviews
     * @description Returns a list of all *Product Reviews*. Optional parameters can be passed in.
     */
    get: operations["getProductReviews"];
    /**
     * Create a Product Review
     * @description Creates a *Product Review*.
     *
     * **Required Fields**
     * - title
     * - date_reviewed
     *
     * **Read-Only Fields**
     * * id
     */
    post: operations["createProductReview"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
  };
  "/catalog/products/{product_id}/reviews/{review_id}": {
    /**
     * Get a Product Review
     * @description Returns a single *Product Review*. Optional parameters maybe passed in.
     */
    get: operations["getProductReview"];
    /**
     * Update a Product Review
     * @description Updates a *Product Review*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    put: operations["updateProductReview"];
    /**
     * Delete a Product Review
     * @description Deletes a *Product Review*.
     */
    delete: operations["deleteProductReview"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        review_id: components["parameters"]["ReviewIdParam"];
      };
    };
  };
  "/catalog/products/channel-assignments": {
    /**
     * Get Products Channel Assignments
     * @description Returns a list of products channel assignments.
     */
    get: operations["getProductsChannelAssignments"];
    /**
     * Create Products Channel Assignments
     * @description Creates products channel assignments.
     */
    put: operations["createProductsChannelAssignments"];
    /**
     * Delete Products Channel Assignments
     * @description Delete products channel assignments. A filter must be supplied.
     */
    delete: operations["deleteProductsChannelAssignments"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/catalog/products/category-assignments": {
    /**
     * Get Products Category Assignments
     * @description Returns a list of products category assignments.
     */
    get: operations["getProductsCategoryAssignments"];
    /**
     * Create Products Category Assignments
     * @description Creates products category assignments.
     */
    put: operations["createProductsCategoryAssignments"];
    /**
     * Delete Products Category Assignments
     * @description Deletes products category assignments. A filter must be supplied.
     */
    delete: operations["deleteProductsCategoryAssignments"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/catalog/summary": {
    /**
     * Get a Catalog Summary
     * @description Returns a lightweight inventory summary from the BigCommerce Catalog.
     *
     * The inventory summary includes:
     * * "inventory_count"
     * * "variant_count"
     * * "inventory_value"
     * * "highest_variant_price"
     * * "average_variant_price"
     * * "lowest_variant_price"
     * * "oldest_variant_date"
     * * "newest_variant_date"
     * * "primary_category_id"
     * * "primary_category_name"
     */
    get: operations["getCatalogSummary"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/catalog/products/metafields": {
    /**
     * Get All Product Metafields
     * @description Get all product metafields.
     */
    get: operations["getProductsMetafields"];
    /**
     * Update multiple Metafields
     * @description Update multiple metafields.
     */
    put: operations["updateProductsMetafields"];
    /**
     * Create multiple Metafields
     * @description Create multiple metafields.
     */
    post: operations["createProductsMetafields"];
    /**
     * Delete Multiple Metafields
     * @description Delete all product metafields.
     */
    delete: operations["deleteProductsMetafields"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    modifierCondition: {
      /**
       * @description Use the [get all product modifiers](/docs/rest-catalog/product-modifiers#get-all-product-modifiers) endpoint to determine the `option_values` `id`. The `option_values` `id` is the `modifier_value_id`.
       * @example 55
       */
      modifier_id?: number;
      /**
       * @description Use the [get all product modifiers](/docs/rest-catalog/product-modifiers#get-all-product-modifiers) endpoint to determine the `option_values` `option_id`. The `option_values` `option_id` is the same as the `modifier_id`.
       * @example 256
       */
      modifier_value_id?: number;
    };
    variantCondition: {
      /**
       * @description Use the [get all product variants](/docs/rest-catalog/product-variants#get-all-product-variants) endpoint to determine the variant `id`.
       * @example 1
       */
      variant_id?: number;
    };
    conditionsRequest: (components["schemas"]["modifierCondition"] | components["schemas"]["variantCondition"])[];
    /**
     * productModifier_Base
     * @description Common Modifier properties.
     */
    productModifier_Base: {
      /**
       * @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
       *
       * @enum {string}
       */
      type: "date" | "checkbox" | "file" | "text" | "multi_line_text" | "numbers_only_text" | "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
      /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
      required: boolean;
      /** @description The order the modifiers display on the product detail page. */
      sort_order?: number;
      config?: components["schemas"]["config_Full"];
      /** @description The name of the option shown on the storefront. */
      display_name?: string;
    };
    /**
     * productModifier_Full
     * @description Product Modifier
     */
    productModifier_Full: components["schemas"]["productModifier_Base"] & {
      /**
       * @description The unique numeric ID of the modifier; increments sequentially.
       *
       * @example 12
       */
      id?: number;
      /**
       * @description The unique numeric ID of the product to which the option belongs.
       *
       * @example 77
       */
      product_id?: number;
      /**
       * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
       *
       * @example Add-a-$5-Donation1535039590-191
       */
      name?: string;
      option_values?: components["schemas"]["productModifierOptionValue_Full"][];
    };
    /**
     * productModifierOptionValue_Base
     * @description Common Product Modifer `option_value` properties.
     */
    productModifierOptionValue_Base: {
      /**
       * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
       *
       * @example false
       */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /**
       * @description The order in which the value will be displayed on the product page. Required in a /POST.
       *
       * @example 0
       */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
      value_data?: unknown;
      adjusters?: components["schemas"]["adjusters_Full"];
    };
    /**
     * productModifierOptionValue_Full
     * @description Product Modifer `option_value`.
     */
    productModifierOptionValue_Full: components["schemas"]["productModifierOptionValue_Base"] & {
      /** @description The unique numeric ID of the value; increments sequentially. */
      id?: number;
      option_id?: number;
    };
    /**
     * productOption_Base
     * @description Common Option properties.
     */
    productOption_Base: {
      /**
       * @description The unique numerical ID of the option, increments sequentially.
       *
       * @example 55
       */
      id?: number | null;
      /**
       * @description The unique numerical ID of the product to which the option belongs.
       *
       * @example 4
       */
      product_id?: number;
      /**
       * @description The name of the option shown on the storefront.
       *
       * @example Add-a-$5-Donation1535042499-187
       */
      display_name?: string;
      /**
       * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
       *
       * @enum {string}
       */
      type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
      config?: components["schemas"]["productOptionConfig_Full"];
      /**
       * @description Order in which the option is displayed on the storefront.
       * @example 1
       */
      sort_order?: number;
      option_values?: components["schemas"]["productOptionOptionValue_Full"][];
    };
    /**
     * productVariant_Base
     * @description Common Variant properties.
     */
    productVariant_Base: {
      /**
       * Format: double
       * @description The cost price of the variant. Not affected by Price List prices.
       */
      cost_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
       */
      price?: number | null;
      /**
       * Format: double
       * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
       */
      sale_price?: number | null;
      /**
       * Format: double
       * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
       */
      retail_price?: number | null;
      /** @description Minimum Advertised Price. */
      map_price?: number;
      /**
       * Format: double
       * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
       */
      weight?: number | null;
      /**
       * Format: double
       * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
       */
      width?: number | null;
      /**
       * Format: double
       * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
       */
      height?: number | null;
      /**
       * Format: double
       * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
       */
      depth?: number | null;
      /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
      is_free_shipping?: boolean;
      /**
       * Format: double
       * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number | null;
      /** @description If `true`, this variant will not be purchasable on the storefront. */
      purchasing_disabled?: boolean;
      /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
      purchasing_disabled_message?: string;
      /**
       * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
       *
       * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
       */
      image_url?: string;
      /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string;
      /**
       * @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
       *
       * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
       *
       * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
       *
       * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
       */
      inventory_level?: number | null;
      /** @description When the variant hits this inventory level, it is considered low stock. */
      inventory_warning_level?: number | null;
      /** @description Identifies where in a warehouse the variant is located. */
      bin_picking_number?: string | null;
      /** @description The Manufacturer Part Number (MPN) for the variant. */
      mpn?: string;
      /** @example 012345678905 */
      gtin?: string;
    };
    /** productVariant_Full */
    productVariant_Full: WithRequired<components["schemas"]["productVariant_Base"] & {
      /** @description Product ID */
      product_id?: number;
      /** @description Variant ID */
      id?: number;
      sku?: string;
      /** @example 70 */
      sku_id?: number;
      /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the productʼs base variant. */
      option_values?: components["schemas"]["productVariantOptionValue_Full"][];
      /**
       * Format: double
       * @description The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
       */
      calculated_price?: number;
      calculated_weight?: number;
    }, "sku" | "id" | "product_id">;
    /**
     * productVariant_Put_Product
     * @description The model for a PUT to update variants on a product.
     */
    productVariant_Put_Product: {
      /**
       * Format: double
       * @description The cost price of the variant. Not affected by Price List prices.
       */
      cost_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
       */
      price?: number | null;
      /**
       * Format: double
       * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
       */
      sale_price?: number | null;
      /**
       * Format: double
       * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
       */
      retail_price?: number | null;
      /**
       * Format: double
       * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
       */
      weight?: number | null;
      /**
       * Format: double
       * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
       */
      width?: number | null;
      /**
       * Format: double
       * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
       */
      height?: number | null;
      /**
       * Format: double
       * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
       */
      depth?: number | null;
      /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero. */
      is_free_shipping?: boolean;
      /**
       * Format: double
       * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number | null;
      /** @description If `true`, this variant will not be purchasable on the storefront. */
      purchasing_disabled?: boolean;
      /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
      purchasing_disabled_message?: string;
      /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string;
      /**
       * @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
       *
       * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
       *
       * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
       *
       * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
       */
      inventory_level?: number | null;
      /** @description When the variant hits this inventory level, it is considered low stock. */
      inventory_warning_level?: number | null;
      /** @description Identifies where in a warehouse the variant is located. */
      bin_picking_number?: string | null;
      /** @description Product ID */
      product_id: number;
      /** @description Variant ID */
      id: number;
      sku?: string;
    };
    /** productVariantOptionValue_Full */
    productVariantOptionValue_Full: WithRequired<{
      /** @description The option_value ID. */
      id?: number;
      /**
       * @description The label of the option value.
       *
       * @example Beige
       */
      label?: string;
      /**
       * @description The option ID.
       * @example 151
       */
      option_id?: number;
      /**
       * @description The name of the option.
       *
       * @example Color
       */
      option_display_name?: string;
    }, "option_display_name" | "label">;
    /**
     * productVariantOptionValue_Base
     * @description Common Product Variant Option properties.
     */
    productVariantOptionValue_Base: {
      /**
       * @description `option_value` ID.
       * @example 146
       */
      id?: number;
      /**
       * @description `option` ID.
       * @example 151
       */
      option_id?: number;
    };
    /**
     * productOptionOptionValue_Base
     * @description Common Product Option `option_value` properties.
     */
    productOptionOptionValue_Base: {
      /**
       * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
       *
       * @example false
       */
      is_default?: boolean;
      /**
       * @description The text display identifying the value on the storefront. Required in a /POST.
       *
       * @example Green
       */
      label: string;
      /**
       * @description The order in which the value will be displayed on the product page. Required in a /POST.
       *
       * @example 0
       */
      sort_order: number;
      /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
      value_data?: unknown;
    };
    /**
     * productOptionOptionValue_Full
     * @description Product Option `option_value`.
     */
    productOptionOptionValue_Full: components["schemas"]["productOptionOptionValue_Base"] & {
      /** @description The unique numeric ID of the value; increments sequentially. */
      id?: number;
    };
    /**
     * productImage_Base
     * @description Common ProductImage properties.
     */
    productImage_Base: {
      /**
       * @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
       *
       * Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file.
       */
      image_file?: string;
      /** @description Flag for identifying whether the image is used as the productʼs thumbnail. */
      is_thumbnail?: boolean;
      /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered. */
      sort_order?: number;
      /** @description The description for the image. */
      description?: string;
    };
    /**
     * productImage_Put
     * @description The model for a PUT to update applicable Product Image fields.
     */
    productImage_Put: {
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image. */
      url_zoom?: string;
      /** @description The standard URL for this image. By default, this is used for product-page images. */
      url_standard?: string;
      /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
      url_thumbnail?: string;
      /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
      url_tiny?: string;
    } & components["schemas"]["productImage_Base"];
    /**
     * productVideo_Base
     * @description The model for a POST to create a video on a product.
     */
    productVideo_Base: {
      /**
       * @description The title for the video. If left blank, this will be filled in according to data on a host site.
       *
       * @example Writing Great Documentation
       */
      title?: string;
      /**
       * @description The description for the video. If left blank, this will be filled in according to data on a host site.
       *
       * @example A video about documenation
       */
      description?: string;
      /**
       * @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
       *
       * @example 1
       */
      sort_order?: number;
      /**
       * @description The video type (a short name of a host site).
       *
       * @enum {string}
       */
      type?: "youtube";
      /**
       * @description The ID of the video on a host site.
       * @example z3fRu9pkuXE
       */
      video_id?: string;
    };
    /**
     * productVideo_Full
     * @description A product video model.
     */
    productVideo_Full: components["schemas"]["productVideo_Base"] & {
      /** @description The unique numeric ID of the product video; increments sequentially. */
      id?: number;
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description Length of the video. This will be filled in according to data on a host site. */
      length?: string;
    };
    /**
     * product_Put
     * @description The model for a PUT to update a product.
     */
    product_Put: Record<string, never> & components["schemas"]["product_Base"];
    /**
     * metafield_Base
     * @description Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 250. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    metafield_Base: {
      /**
       * @description The name of the field, for example: `location_id`, `color`. Required for POST.
       *
       * @example Location
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`. Required for POST.
       *
       * @example 4HG
       */
      value: string;
      /**
       * @description Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
       *
       * @example Warehouse Locations
       */
      namespace: string;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description
       * |-|-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Description for the metafields.
       *
       * @example Location in the warehouse
       */
      description?: string;
    };
    /**
     * complexRule_Base
     * @description Common ComplexRule properties.
     */
    complexRule_Base: {
      /**
       * @description The unique numeric ID of the rule; increments sequentially.
       * Read-Only
       * @example 5
       */
      id?: number;
      /**
       * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
       *
       * @example 67
       */
      product_id?: number | null;
      /**
       * @description The priority to give this rule when making adjustments to the product properties.
       *
       * @example 0
       */
      sort_order?: number;
      /**
       * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
       *
       * @example true
       */
      enabled?: boolean;
      /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
      stop?: boolean;
      /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
      purchasing_disabled?: boolean;
      /**
       * @description Message displayed on the storefront when a rule disables the purchasing of a product.
       *
       * @example This product is not available at this time.
       */
      purchasing_disabled_message?: string;
      /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
      purchasing_hidden?: boolean;
      /**
       * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
       *
       * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
       */
      image_url?: string;
      price_adjuster?: components["schemas"]["adjuster_Full"];
      weight_adjuster?: components["schemas"]["adjuster_Full"];
      conditions?: components["schemas"]["complexRuleConditionBase"][];
    };
    /**
     * productCustomField_Base
     * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
     */
    productCustomField_Base: {
      /**
       * @description The unique numeric ID of the custom field; increments sequentially.
       * Read-Only
       * @example 6
       */
      id?: number;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example ISBN
       */
      name: string;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example 1234567890123
       */
      value: string;
    };
    /**
     * productCustomField_Put
     * @description The model for a PUT to update a custom field on a product.
     */
    productCustomField_Put: {
      /**
       * @description The unique numeric ID of the custom field; increments sequentially. Required to update existing custom field in /PUT request.
       * Read-Only
       * @example 6
       */
      id?: number;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example ISBN
       */
      name: string;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
       *
       * @example 1234567890123
       */
      value: string;
    };
    /**
     * complexRuleConditionBase
     * @description Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`’s, or else reference a `modifier_value_id` and a `variant_id`.
     */
    complexRuleConditionBase: {
      /**
       * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
       *
       * @example 3
       */
      id?: number | null;
      /**
       * @description The unique numeric ID of the rule with which the condition is associated.
       * Read-Only
       * @example 4
       */
      rule_id?: number | null;
      /**
       * @description The unique numeric ID of the modifier with which the rule condition is associated.
       * Required in /POST.
       * @example 55
       */
      modifier_id: number | null;
      /**
       * @description The unique numeric ID of the modifier value with which the rule condition is associated.
       * Required in /POST.
       * @example 256
       */
      modifier_value_id: number | null;
      /**
       * @description The unique numeric ID of the variant with which the rule condition is associated.
       * Required in /POST.
       * @example 1
       */
      variant_id: number | null;
      /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
      combination_id?: number;
    };
    /**
     * customUrl_Full
     * @description The custom URL for the product on the storefront. If not provided in the POST request, the URL will be autogenerated from the product name.
     */
    customUrl_Full: {
      /** @description Product URL on the storefront. */
      url?: string;
      /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
      is_customized?: boolean;
      /** @description Optional field. This field automatically creates a dynamic 301 redirect when a product URL change occurs with a PUT request. Existing dynamic redirects will automatically update to a new URL to avoid a loop. */
      create_redirect?: boolean;
    };
    /** bulkPricingRule_Full */
    bulkPricingRule_Full: {
      /**
       * @description The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero. For `fixed` rules, the minimum quantity canʼt be less than two.
       * Required in /POST.
       *
       * @example 10
       */
      quantity_min: number;
      /**
       * @description The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
       * Required in /POST.
       * @example 50
       */
      quantity_max: number;
      /**
       * @description The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
       * Required in /POST.
       * @example price
       * @enum {string}
       */
      type: "price" | "percent" | "fixed";
      /**
       * @description You can express the adjustment type as either a fixed dollar amount or a percentage. Send a number; the response will return a number for `price` and `fixed` adjustments.
       * Divide the adjustment percentage by 100 and send the result in string format. For example, represent 10% as “.10”. The response will return a float value for both `price` and `percentage` adjustments.
       * Required in /POST.
       */
      amount: number | string;
    };
    /**
     * productOptionConfig_Full
     * @description The values for option config can vary based on the Modifier created.
     */
    productOptionConfig_Full: {
      /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      default_value?: string;
      /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
      checked_by_default?: boolean;
      /** @description (checkbox) Label displayed for the checkbox option. */
      checkbox_label?: string;
      /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
      date_limited?: boolean;
      /**
       * @description (date) The type of limit that is allowed to be entered on a date option.
       *
       * @example range
       * @enum {string}
       */
      date_limit_mode?: "earliest" | "range" | "latest";
      /**
       * Format: date
       * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_earliest_value?: string;
      /**
       * Format: date
       * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_latest_value?: string;
      /**
       * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
       *
       * @example specific
       * @enum {string}
       */
      file_types_mode?: "specific" | "all";
      /**
       * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      file_types_supported?: string[];
      /** @description (file) A list of other file types allowed with the file upload option. */
      file_types_other?: string[];
      /**
       * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
       *
       * @example 5
       */
      file_max_size?: number;
      /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      text_characters_limited?: boolean;
      /**
       * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
       *
       * @example 1
       */
      text_min_length?: number;
      /**
       * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
       *
       * @example 55
       */
      text_max_length?: number;
      /**
       * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
       *
       * @example true
       */
      text_lines_limited?: boolean;
      /**
       * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
       *
       * @example 4
       */
      text_max_lines?: number;
      /**
       * @description (numbers_only_text) Flag to limit the value of a number option.
       *
       * @example true
       */
      number_limited?: boolean;
      /**
       * @description (numbers_only_text) The type of limit on values entered for a number option.
       *
       * @example lowest
       * @enum {string}
       */
      number_limit_mode?: "lowest" | "highest" | "range";
      /**
       * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
       *
       * @example 100
       */
      number_lowest_value?: number;
      /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      number_highest_value?: number;
      /**
       * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
       *
       * @example false
       */
      number_integers_only?: boolean;
      /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      product_list_adjusts_inventory?: boolean;
      /** @description (product_list, product_list_with_images) Flag to add the optional productʼs price to the main productʼs price. */
      product_list_adjusts_pricing?: boolean;
      /**
       * @description (product_list, product_list_with_images) How to factor the optional productʼs weight and package dimensions into the shipping quote. Values: `none` - donʼt adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
       *
       * @example weight
       * @enum {string}
       */
      product_list_shipping_calc?: "none" | "weight" | "package";
    };
    /**
     * adjuster_Full
     * @description Adjuster for Complex Rules.
     */
    adjuster_Full: {
      /**
       * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
       *
       * @enum {string|null}
       */
      adjuster?: "relative" | "percentage" | null;
      /**
       * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
       *
       * @example 5
       */
      adjuster_value?: number;
    };
    /**
     * metaCollection_Full
     * @description Data about the response, including pagination and collection totals.
     */
    metaCollection_Full: {
      pagination?: components["schemas"]["pagination_Full"];
    };
    /**
     * pagination_Full
     * @description Data about the response, including pagination and collection totals.
     */
    pagination_Full: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    metaEmpty_Full: {
      [key: string]: unknown;
    };
    /**
     * error_Base
     * @description Error payload for the BigCommerce API.
     */
    error_Base: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /** errorMultiStatus */
    errorMultiStatus: {
      /** @description The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) of the failure or partial success. */
      status?: number;
      /** @description A summary of the failure or partial success. */
      title?: string;
      /** @description A BigCommerce-defined error signifier. */
      type?: string;
      errors?: components["schemas"]["DetailedErrors"];
    };
    /**
     * DetailedErrors
     * @description Each key-value pair describes a failure or partial success case.
     */
    DetailedErrors: {
      [key: string]: unknown;
    };
    /** product_Full */
    product_Full: {
      /** @description ID of the product. Read-Only. */
      id?: number;
    } & components["schemas"]["product_Base_response"] & {
      /**
       * Format: date-time
       * @description The date on which the product was created.
       *
       * @example 2018-08-15T14:49:05+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description The date on which the product was modified.
       *
       * @example 2018-08-24T14:41:00+00:00
       */
      date_modified?: string;
      /** @description The unique identifier of the base variant associated with a simple product. This value is `null` for complex products. */
      base_variant_id?: number;
      /**
       * Format: float
       * @description The calculated_price is derived from the default price and sale price of the product. It is equal to the sale price if set or the default price if there is not a sale price present. Depending on your store settings and customer group, or channel-specific pricing, this value may or may not be equal to the price seen on the storefront.
       */
      calculated_price?: number;
      options?: components["schemas"]["productOption_Base"][];
      modifiers?: components["schemas"]["productModifier_Full"][];
      /** @description Minimum Advertised Price. */
      map_price?: number;
      /** @description Indicates that the product is in an Option Set (legacy V2 concept). */
      option_set_id?: number;
      /** @description Legacy template setting which controls if the option set shows up to the side of or below the product image and description. */
      option_set_display?: string;
    };
    /**
     * productImage_Full
     * @description Common ProductImage properties.
     */
    productImage_Full: components["schemas"]["productImage_Base"] & {
      /** @description The unique numeric ID of the image; increments sequentially. */
      id?: number;
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image. */
      url_zoom?: string;
      /** @description The standard URL for this image. By default, this is used for product-page images. */
      url_standard?: string;
      /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
      url_thumbnail?: string;
      /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
      url_tiny?: string;
      /**
       * Format: date-time
       * @description The date on which the product image was modified.
       */
      date_modified?: string;
    };
    /**
     * primaryImage_Full
     * @description Common PrimaryImage properties.
     */
    primaryImage_Full: {
      /** @description The unique numeric ID of the image; increments sequentially. */
      id?: number;
      /** @description The unique numeric identifier for the product with which the image is associated. */
      product_id?: number;
      /** @description Flag for identifying whether the image is used as the productʼs thumbnail. */
      is_thumbnail?: boolean;
      /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered. */
      sort_order?: number;
      /** @description The description for the image. */
      description?: string;
      /**
       * @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
       *
       * Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file.
       */
      image_file?: string;
      /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image. */
      url_zoom?: string;
      /** @description The standard URL for this image. By default, this is used for product-page images. */
      url_standard?: string;
      /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
      url_thumbnail?: string;
      /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
      url_tiny?: string;
      /**
       * Format: date-time
       * @description The date on which the product image was modified.
       */
      date_modified?: string;
    };
    /**
     * product_Put_Collection
     * @description The model for batch updating products.
     */
    product_Put_Collection: ({
        /** @description Unique ID of the *Product*. Read-Only. */
        id: number;
      } & components["schemas"]["product_Base"])[];
    /**
     * config_Full
     * @description The values for option config can vary based on the Modifier created.
     */
    config_Full: {
      /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
      default_value?: string;
      /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
      checked_by_default?: boolean;
      /** @description (checkbox) Label displayed for the checkbox option. */
      checkbox_label?: string;
      /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
      date_limited?: boolean;
      /**
       * @description (date) The type of limit that is allowed to be entered on a date option.
       *
       * @example range
       * @enum {string}
       */
      date_limit_mode?: "earliest" | "range" | "latest";
      /**
       * Format: date
       * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_earliest_value?: string;
      /**
       * Format: date
       * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
       */
      date_latest_value?: string;
      /**
       * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
       *
       * @example specific
       * @enum {string}
       */
      file_types_mode?: "specific" | "all";
      /**
       * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
       *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
       *   `other` - Allows file types defined in the `file_types_other` array.
       */
      file_types_supported?: string[];
      /** @description (file) A list of other file types allowed with the file upload option. */
      file_types_other?: string[];
      /**
       * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
       *
       * @example 5
       */
      file_max_size?: number;
      /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
      text_characters_limited?: boolean;
      /**
       * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
       *
       * @example 1
       */
      text_min_length?: number;
      /**
       * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
       *
       * @example 55
       */
      text_max_length?: number;
      /**
       * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
       *
       * @example true
       */
      text_lines_limited?: boolean;
      /**
       * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
       *
       * @example 4
       */
      text_max_lines?: number;
      /**
       * @description (numbers_only_text) Flag to limit the value of a number option.
       *
       * @example true
       */
      number_limited?: boolean;
      /**
       * @description (numbers_only_text) The type of limit on values entered for a number option.
       *
       * @example lowest
       * @enum {string}
       */
      number_limit_mode?: "lowest" | "highest" | "range";
      /**
       * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
       *
       * @example 100
       */
      number_lowest_value?: number;
      /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
      number_highest_value?: number;
      /**
       * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
       *
       * @example false
       */
      number_integers_only?: boolean;
      /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
      product_list_adjusts_inventory?: boolean;
      /** @description (product_list, product_list_with_images) Flag to add the optional productʼs price to the main productʼs price. */
      product_list_adjusts_pricing?: boolean;
      /**
       * @description (product_list, product_list_with_images) How to factor the optional productʼs weight and package dimensions into the shipping quote. Values: `none` - donʼt adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
       *
       * @example weight
       * @enum {string}
       */
      product_list_shipping_calc?: "none" | "weight" | "package";
    };
    /** adjusters_Full */
    adjusters_Full: {
      price?: components["schemas"]["adjuster_Full"];
      weight?: components["schemas"]["adjuster_Full"];
      /**
       * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
       *
       * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
       */
      image_url?: string;
      purchasing_disabled?: {
        /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
        status?: boolean;
        /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
        message?: string;
      };
    };
    /**
     * product_Base
     * @description Shared `Product` properties used in:
     * * `POST`
     * * `PUT`
     */
    product_Base: {
      /**
       * @description A unique product name.
       *
       * @example Smith Journal 13
       */
      name: string;
      /**
       * @description The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
       *
       * @example physical
       * @enum {string}
       */
      type: "physical" | "digital";
      /**
       * @description A unique user-defined alphanumeric product code/stock keeping unit (SKU).
       *
       * @example SM-13
       */
      sku?: string;
      /**
       * @description The product description, which can include HTML formatting.
       *
       * @example <p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>
       */
      description?: string;
      /**
       * Format: float
       * @description Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store
       */
      weight: number;
      /**
       * Format: float
       * @description Width of the product, which can be used when calculating shipping costs.
       */
      width?: number;
      /**
       * Format: float
       * @description Depth of the product, which can be used when calculating shipping costs.
       */
      depth?: number;
      /**
       * Format: float
       * @description Height of the product, which can be used when calculating shipping costs.
       */
      height?: number;
      /**
       * Format: float
       * @description The price of the product. The price should include or exclude tax, based on the store settings.
       */
      price: number;
      /**
       * Format: float
       * @description The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
       */
      cost_price?: number;
      /**
       * Format: float
       * @description The retail cost of the product. If entered, the retail cost price will be shown on the product page.
       */
      retail_price?: number;
      /**
       * Format: float
       * @description If entered, the sale price will be used instead of value in the price field when calculating the productʼs cost.
       */
      sale_price?: number;
      /** @description Minimum Advertised Price */
      map_price?: number;
      /** @description The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.) */
      tax_class_id?: number;
      /** @description Tax Codes, such as AvaTax System Tax Codes, identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to a tax provider integration, such as BigCommerceʼs Avalara Premium, can calculate sales taxes more accurately. Stores without a tax provider will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see the tax providerʼs documentation. */
      product_tax_code?: string;
      /** @description An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values. */
      categories?: number[];
      /** @description You can add a product to an existing brand during a product /PUT or /POST. Use either the `brand_id` or the `brand_name` field. The response body can include `brand_id`. */
      brand_id?: number;
      /**
       * @description You can create the brand during a product PUT or POST request. If the brand already exists, the product /PUT or /POST request adds the product to the brand. If not, the product /PUT or /POST request creates the brand and then adds the product to the brand. Brand name is not case-sensitive; "Common Good" and "Common good" are the same. Use either the `brand_id` or the `brand_name` field. The response body does not include `brand_name`.
       * @example Common Good
       */
      brand_name?: string;
      /**
       * @description Current inventory level of the product. You must track inventory by _product_ for this to take effect (see the `inventory_tracking` field). The Catalog API returns the inventory for only the default location.
       *
       * The inventory for a product cannot exceed 2,147,483,647 in the catalog. If you exceed the limit, the store sets the inventory level to the limit.
       *
       * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
       */
      inventory_level?: number;
      /** @description Inventory warning level for the product. When the productʼs inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect. */
      inventory_warning_level?: number;
      /**
       * @description The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
       *
       * @enum {string}
       */
      inventory_tracking?: "none" | "product" | "variant";
      /**
       * Format: float
       * @description A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number;
      /** @description Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero. */
      is_free_shipping?: boolean;
      /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view. */
      is_visible?: boolean;
      /** @description Flag to determine whether the product should be included in the `featured products` panel when viewing the store. */
      is_featured?: boolean;
      /** @description An array of IDs for the related products. */
      related_products?: number[];
      /** @description Warranty information displayed on the product page. Can include HTML formatting. */
      warranty?: string;
      /** @description The BIN picking number for the product. */
      bin_picking_number?: string;
      /** @description The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations). */
      layout_file?: string;
      /** @description The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string;
      /** @description A comma-separated list of keywords that can be used to locate the product when searching the store. */
      search_keywords?: string;
      /** @description Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.' */
      availability_description?: string;
      /**
       * @description Availability of the product. (Corresponds to the productʼs [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
       *
       * @enum {string}
       */
      availability?: "available" | "disabled" | "preorder";
      /**
       * @description Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
       *
       * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
       *
       * @enum {string}
       */
      gift_wrapping_options_type?: "any" | "none" | "list";
      /**
       * @description A list of gift-wrapping option IDs.
       *
       * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
       */
      gift_wrapping_options_list?: number[];
      /** @description Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results. */
      sort_order?: number;
      /**
       * @description The product condition. Will be shown on the product page if the `is_condition_shown` fieldʼs value is `true`. Possible values: `New`, `Used`, `Refurbished`.
       *
       * @enum {string}
       */
      condition?: "New" | "Used" | "Refurbished";
      /** @description Flag used to determine whether the product condition is shown to the customer on the product page. */
      is_condition_shown?: boolean;
      /** @description The minimum quantity an order must contain, to be eligible to purchase this product. */
      order_quantity_minimum?: number;
      /** @description The maximum quantity an order can contain when purchasing the product. */
      order_quantity_maximum?: number;
      /** @description Custom title for the product page. If not defined, the product name will be used as the meta title. */
      page_title?: string;
      /** @description Custom meta keywords for the product page. If not defined, the storeʼs default keywords will be used. */
      meta_keywords?: string[];
      /** @description Custom meta description for the product page. If not defined, the storeʼs default meta description will be used. */
      meta_description?: string;
      /**
       * @deprecated
       * @description The number of times the product has been viewed.
       */
      view_count?: number;
      /**
       * Format: date-time
       * @description Pre-order release date. See the `availability` field for details on setting a productʼs availability to accept pre-orders.
       */
      preorder_release_date?: string | null;
      /** @description Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date. */
      preorder_message?: string;
      /**
       * @description If set to true then on the preorder release date the preorder status will automatically be removed.
       * If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
       * control panel or using the API. Using the API set `availability` to `available`.
       */
      is_preorder_only?: boolean;
      /** @description False by default, indicating that this productʼs price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.) */
      is_price_hidden?: boolean;
      /** @description By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.) */
      price_hidden_label?: string;
      custom_url?: components["schemas"]["customUrl_Full"];
      /**
       * @description Type of product, defaults to `product`.
       *
       * @enum {string}
       */
      open_graph_type?: "product" | "album" | "book" | "drink" | "food" | "game" | "movie" | "song" | "tv_show";
      /** @description Title of the product, if not specified the product name will be used instead. */
      open_graph_title?: string;
      /** @description Description to use for the product, if not specified then the meta_description will be used instead. */
      open_graph_description?: string;
      /** @description Flag to determine if product description or open graph description is used. */
      open_graph_use_meta_description?: boolean;
      /** @description Flag to determine if product name or open graph name is used. */
      open_graph_use_product_name?: boolean;
      /** @description Flag to determine if product image or open graph image is used. */
      open_graph_use_image?: boolean;
      /** @description Global Trade Item Number */
      gtin?: string;
      /** @description Manufacturer Part Number */
      mpn?: string;
      /** @description the date when the Product had been imported */
      date_last_imported?: string;
      /**
       * @description The total (cumulative) rating for the product.
       *
       * @example 3
       */
      reviews_rating_sum?: number;
      /**
       * @description The number of times the product has been rated.
       *
       * @example 4
       */
      reviews_count?: number;
      /**
       * @description The total quantity of this product sold.
       *
       * @example 80
       */
      total_sold?: number;
      /** @description 200 maximum custom fields per product. 255 maximum characters per custom field. The default rate limit for this endpoint is 40 concurrent requests. */
      custom_fields?: components["schemas"]["productCustomField_Put"][];
      bulk_pricing_rules?: ({
          /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
          id: number;
        } & components["schemas"]["bulkPricingRule_Full"])[];
      images?: components["schemas"]["productImage_Full"][];
      /**
       * @description The Catalog API integrates with third-party YouTube.
       * The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
       */
      videos?: components["schemas"]["productVideo_Full"][];
      variants?: components["schemas"]["productVariant_Full"][];
    };
    /**
     * product_Base_response
     * @description Base Product response
     */
    product_Base_response: {
      /**
       * @description A unique product name.
       *
       * @example Smith Journal 13
       */
      name?: string;
      /**
       * @description The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
       *
       * @example physical
       * @enum {string}
       */
      type?: "physical" | "digital";
      /**
       * @description A unique user-defined alphanumeric product code/stock keeping unit (SKU).
       *
       * @example SM-13
       */
      sku?: string;
      /**
       * @description The product description, which can include HTML formatting.
       *
       * @example <p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>
       */
      description?: string;
      /**
       * Format: float
       * @description Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store
       */
      weight?: number;
      /**
       * Format: float
       * @description Width of the product, which can be used when calculating shipping costs.
       */
      width?: number;
      /**
       * Format: float
       * @description Depth of the product, which can be used when calculating shipping costs.
       */
      depth?: number;
      /**
       * Format: float
       * @description Height of the product, which can be used when calculating shipping costs.
       */
      height?: number;
      /**
       * Format: float
       * @description The price of the product. The price should include or exclude tax, based on the store settings.
       */
      price?: number;
      /**
       * Format: float
       * @description The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
       */
      cost_price?: number;
      /**
       * Format: float
       * @description The retail cost of the product. If entered, the retail cost price will be shown on the product page.
       */
      retail_price?: number;
      /**
       * Format: float
       * @description If entered, the sale price will be used instead of value in the price field when calculating the productʼs cost.
       */
      sale_price?: number;
      /** @description Minimum Advertised Price */
      map_price?: number;
      /** @description The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.) */
      tax_class_id?: number;
      /** @description Tax Codes, such as AvaTax System Tax Codes, identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to a tax provider integration, such as BigCommerceʼs Avalara Premium, can calculate sales taxes more accurately. Stores without a tax provider will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see the tax providerʼs documentation. */
      product_tax_code?: string;
      /** @description An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values. */
      categories?: number[];
      /** @description You can add a product to an existing brand during a product /PUT or /POST use the `brand_id` field. The response body can include `brand_id'. */
      brand_id?: number;
      /**
       * @description Current inventory level of the product. You must track inventory by _product_ for this to take effect (see the `inventory_tracking` field). The Catalog API returns the inventory for only the default location.
       *
       * The inventory for a product cannot exceed 2,147,483,647 in the catalog. If you exceed the limit, the store sets the inventory level to the limit.
       *
       * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
       */
      inventory_level?: number;
      /** @description Inventory warning level for the product. When the productʼs inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect. */
      inventory_warning_level?: number;
      /**
       * @description The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
       *
       * @enum {string}
       */
      inventory_tracking?: "none" | "product" | "variant";
      /**
       * Format: float
       * @description A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
       */
      fixed_cost_shipping_price?: number;
      /** @description Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero. */
      is_free_shipping?: boolean;
      /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view. */
      is_visible?: boolean;
      /** @description Flag to determine whether the product should be included in the `featured products` panel when viewing the store. */
      is_featured?: boolean;
      /** @description An array of IDs for the related products. */
      related_products?: number[];
      /** @description Warranty information displayed on the product page. Can include HTML formatting. */
      warranty?: string;
      /** @description The BIN picking number for the product. */
      bin_picking_number?: string;
      /** @description The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations). */
      layout_file?: string;
      /** @description The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations. */
      upc?: string;
      /** @description A comma-separated list of keywords that can be used to locate the product when searching the store. */
      search_keywords?: string;
      /** @description Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.' */
      availability_description?: string;
      /**
       * @description Availability of the product. (Corresponds to the productʼs [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
       *
       * @enum {string}
       */
      availability?: "available" | "disabled" | "preorder";
      /**
       * @description Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
       *
       * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
       *
       * @enum {string}
       */
      gift_wrapping_options_type?: "any" | "none" | "list";
      /**
       * @description A list of gift-wrapping option IDs.
       *
       * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
       */
      gift_wrapping_options_list?: number[];
      /** @description Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results. */
      sort_order?: number;
      /**
       * @description The product condition. Will be shown on the product page if the `is_condition_shown` fieldʼs value is `true`. Possible values: `New`, `Used`, `Refurbished`.
       *
       * @enum {string}
       */
      condition?: "New" | "Used" | "Refurbished";
      /** @description Flag used to determine whether the product condition is shown to the customer on the product page. */
      is_condition_shown?: boolean;
      /** @description The minimum quantity an order must contain, to be eligible to purchase this product. */
      order_quantity_minimum?: number;
      /** @description The maximum quantity an order can contain when purchasing the product. */
      order_quantity_maximum?: number;
      /** @description Custom title for the product page. If not defined, the product name will be used as the meta title. */
      page_title?: string;
      /** @description Custom meta keywords for the product page. If not defined, the storeʼs default keywords will be used. */
      meta_keywords?: string[];
      /** @description Custom meta description for the product page. If not defined, the storeʼs default meta description will be used. */
      meta_description?: string;
      /**
       * @deprecated
       * @description The number of times the product has been viewed.
       */
      view_count?: number;
      /**
       * Format: date-time
       * @description Pre-order release date. See the `availability` field for details on setting a productʼs availability to accept pre-orders.
       */
      preorder_release_date?: string | null;
      /** @description Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date. */
      preorder_message?: string;
      /**
       * @description If set to true then on the preorder release date the preorder status will automatically be removed.
       * If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
       * control panel or using the API. Using the API set `availability` to `available`.
       */
      is_preorder_only?: boolean;
      /** @description False by default, indicating that this productʼs price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.) */
      is_price_hidden?: boolean;
      /** @description By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.) */
      price_hidden_label?: string;
      custom_url?: components["schemas"]["customUrl_Full"];
      /**
       * @description Type of product, defaults to `product`.
       *
       * @enum {string}
       */
      open_graph_type?: "product" | "album" | "book" | "drink" | "food" | "game" | "movie" | "song" | "tv_show";
      /** @description Title of the product, if not specified the product name will be used instead. */
      open_graph_title?: string;
      /** @description Description to use for the product, if not specified then the meta_description will be used instead. */
      open_graph_description?: string;
      /** @description Flag to determine if product description or open graph description is used. */
      open_graph_use_meta_description?: boolean;
      /** @description Flag to determine if product name or open graph name is used. */
      open_graph_use_product_name?: boolean;
      /** @description Flag to determine if product image or open graph image is used. */
      open_graph_use_image?: boolean;
      /** @description Global Trade Item Number */
      gtin?: string;
      /** @description Manufacturer Part Number */
      mpn?: string;
      /** @description the date when the Product had been imported */
      date_last_imported?: string;
      /**
       * @description The total (cumulative) rating for the product.
       *
       * @example 3
       */
      reviews_rating_sum?: number;
      /**
       * @description The number of times the product has been rated.
       *
       * @example 4
       */
      reviews_count?: number;
      /**
       * @description The total quantity of this product sold.
       *
       * @example 80
       */
      total_sold?: number;
      /** @description 200 maximum custom fields per product. 255 maximum characters per custom field. The default rate limit for this endpoint is 40 concurrent requests. */
      custom_fields?: components["schemas"]["productCustomField_Put"][];
      bulk_pricing_rules?: ({
          /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
          id: number;
        } & components["schemas"]["bulkPricingRule_Full"])[];
      images?: components["schemas"]["productImage_Full"][];
      primary_image?: components["schemas"]["primaryImage_Full"];
      /**
       * @description The Catalog API integrates with third-party YouTube.
       * The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
       */
      videos?: components["schemas"]["productVideo_Full"][];
      variants?: components["schemas"]["productVariant_Full"][];
    };
    /** metafield_Full */
    metafield_Full: {
      /**
       * @description Unique ID of the *Metafield*. Read-Only.
       * @example 6
       */
      id?: number;
    } & components["schemas"]["metafield_Base"] & ({
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example product
       * @enum {string}
       */
      resource_type?: "category" | "brand" | "product" | "variant";
      /**
       * @description The ID of the resource with which the metafield is associated.
       *
       * @example 111
       */
      resource_id?: number;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation. Read-Only.
       *
       * @example 2018-05-07T20:14:17+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated. Read-Only.
       *
       * @example 2018-05-07T20:14:17+00:00
       */
      date_modified?: string;
      /** @description ID of metafield's creator */
      owner_client_id?: string;
    });
    /** errorResponse_409 */
    errorResponse_409: {
      code?: number;
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    } & {
      errors?: components["schemas"]["DetailedErrors"];
    };
    /** errorResponse_422 */
    errorResponse_422: {
      code?: number;
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    } & {
      errors?: components["schemas"]["DetailedErrors"];
    };
    MetaPaginationObject: {
      pagination?: {
        /** @example 246 */
        total?: number;
        /** @example 5 */
        count?: number;
        /** @example 5 */
        per_page?: number;
        /** @example 1 */
        current_page?: number;
        /** @example 50 */
        total_pages?: number;
        links?: {
          /** @example ?limit=50&page=1 */
          previous?: string;
          /** @example ?limit=50&page=1 */
          current?: string;
          /** @example ?limit=50&page=2 */
          next?: string;
        };
      };
    };
    /** @description Error payload for the BigCommerce API. */
    BaseError: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    ProductChannelAssignment: {
      product_id?: number;
      channel_id?: number;
    };
    ProductCategoryAssignment: {
      product_id?: number;
      category_id?: number;
    };
    beta5DetailedErrors: {
      [key: string]: unknown;
    };
    beta5ErrorResponse: components["schemas"]["BaseError"] & {
      errors?: components["schemas"]["beta5DetailedErrors"];
    };
    /** @description Common Metafield properties. */
    Metafield: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example order
       */
      description: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example cart
       * @enum {string}
       */
      resource_type: "brand" | "product" | "variant" | "category" | "cart" | "channel" | "location" | "order" | "customer";
      /**
       * @description The unique identifier for the resource with which the metafield is associated.
       *
       * @example 424242
       */
      resource_id: number;
      /** @description The unique identifier for the metafield. */
      id: number;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_created: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_modified: string;
      /**
       * @description Client ID for the metafieldʼs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse: {
      data?: components["schemas"]["Metafield"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_DELETE: {
      /**
       * @example [
       *   123
       * ]
       */
      data?: number[];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionDeleteResponseSuccess: {
      /**
       * @example [
       *   123,
       *   124,
       *   125
       * ]
       */
      data?: number[];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionPartialSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 1
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 2
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 3
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 0
       */
      failed?: number;
    };
    /**
     * @description Total number of items in the result set.
     *
     * @example 3
     */
    Total: number;
    /**
     * @description Total number of items that were successfully deleted.
     *
     * @example 1
     */
    Success: number;
    /**
     * @description Total number of items that failed to be deleted.
     *
     * @example 2
     */
    Failed: number;
    /** @description Error response payload for the BigCommerce API. */
    Error: {
      /**
       * @description The HTTP status code for the error.
       *
       * @example 422
       */
      status?: number;
      /**
       * @description The error title.
       *
       * @example Bulk operation has failed
       */
      title?: string;
      /**
       * @description The error type.
       *
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      errors?: components["schemas"]["ErrorDetail"];
    };
    /**
     * @description Error detail response payload for the BigCommerce API.
     *
     * @example {
     *   "1": "Unauthorized to delete",
     *   "2": "Metafield does not exist"
     * }
     */
    ErrorDetail: {
      [key: string]: unknown;
    };
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
      [key: string]: unknown;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Post: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Put: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /**
     * Product Custom Field Data
     * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
     */
    customFieldData: {
      /**
       * @description The unique numeric ID of the custom field increments sequentially. Read-Only.
       * @example 6
       */
      id?: number;
      /**
       * @description The name of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
       *
       * @example ISBN
       */
      name?: string;
      /**
       * @description The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
       *
       * @example 1234567890123
       */
      value?: string;
    };
    /**
     * Custom Field Post
     * @description Payload for POST request to create custom fields associated with a product.
     */
    customFieldPost: {
      /**
       * @description The name of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
       *
       * @example ISBN
       */
      name: string;
      /**
       * @description The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
       *
       * @example 1234567890123
       */
      value: string;
    };
    /**
     * Custom Field Put
     * @description Payload for PUT request to update custom fields associated with a product.
     */
    customFieldPut: {
      /**
       * @description The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
       *
       * @example ISBN
       */
      name?: string;
      /**
       * @description The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
       *
       * @example 1234567890123
       */
      value?: string;
    };
    /**
     * metaCollectionFull
     * @description Data about the response, including pagination and collection totals.
     */
    metaCollectionFull: {
      /** @description Data about the response, including pagination and collection totals. */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 2
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 3
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /**
           * @description Link to the previous page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=2&limit=50
           */
          current?: string;
          /**
           * @description Link to the next page returned in the response.
           *
           * @example ?page=3&limit=50
           */
          next?: string;
        };
      };
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    metaEmptyFull: {
      [key: string]: unknown;
    };
    /** Error Response */
    GeneralErrorWithErrors: {
      /** @description The HTTP status code. */
      status: number;
      /** @description The error title describes the particular error. */
      title: string;
      type: string;
      /** Detailed Errors */
      errors: {
        [key: string]: unknown;
      };
    };
    /** Error Response */
    GeneralError: {
      /** @description The HTTP status code. */
      status: number;
      /** @description The error title describes the particular error. */
      title: string;
      type: string;
      /** @description The custom code of the error. */
      code?: number;
    };
    /** Error Response */
    MethodNotAllowedError: {
      /**
       * @description The HTTP status code.
       * @example 405
       */
      status: number;
      /** @description The error title describes the particular error. */
      title: string;
      type: string;
      /**
       * Detailed Errors
       * @description The detailed title describes the particular error.
       */
      detail: string;
    };
  };
  responses: {
    /** @description General Error. */
    GeneralError: {
      content: {
        "application/json": components["schemas"]["GeneralError"];
      };
    };
    /** @description General Error */
    GeneralErrorWithErrors: {
      content: {
        "application/json": components["schemas"]["GeneralErrorWithErrors"];
      };
    };
    /** @description 401 Unauthorized */
    UnauthorizedError: {
      content: {
        "plain/text": string;
      };
    };
    /** @description 405 Method Not Allowed */
    MethodNotAllowedError: {
      content: {
        "application/json": components["schemas"]["MethodNotAllowedError"];
      };
    };
    /** @description 415 Unsupported Media Type */
    UnsupportedMediaTypeError: {
      content: {
        "text/html": string;
      };
    };
    /** @description Gets array of Custom fields. */
    CustomFieldsResponse: {
      content: {
        "application/json": {
          data?: components["schemas"]["customFieldData"][];
          meta?: components["schemas"]["metaCollectionFull"];
        };
      };
    };
    /** @description Gets Custom field. */
    CustomFieldResponse: {
      content: {
        "application/json": {
          data?: components["schemas"]["customFieldData"];
          meta?: components["schemas"]["metaEmptyFull"];
        };
      };
    };
  };
  parameters: {
    /** @description The ID of the `Product` to which the resource belongs. */
    ProductIdParam: number;
    /** @description The ID of the `review` that is being operated on. */
    ReviewIdParam: number;
    /** @description The ID of the `Image` that is being operated on. */
    ImageIdParam: number;
    /** @description The ID of the `Metafield`. */
    MetafieldIdParam: number;
    /** @description The BigCommerce ID of the `Video` */
    VideoIdParam: number;
    /** @description The ID of the `ComplexRule`. */
    ComplexRuleIdParam: number;
    /** @description The ID of the `CustomField`. */
    CustomFieldIdParam: number;
    /** @description The ID of the `BulkPricingRule`. */
    BulkPricingRuleIdParam: number;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam?: number;
    /** @description Filter based on a metafieldʼs key. */
    MetafieldKeyParam?: string;
    /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
    MetafieldKeyInParam?: string[];
    /** @description Filter based on a metafieldʼs namespaces. */
    MetafieldNamespaceParam?: string;
    /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
    MetafieldNamespaceInParam?: string[];
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
    /** @description 'Query parameter that lets you filter by the minimum date created, ffor example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.' */
    date_created_min?: string;
    /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.' */
    date_created_max?: string;
    /** @description 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.' */
    date_modified_max?: string;
    /** @description 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.' */
    date_modified_min?: string;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam?: "asc" | "desc";
    /** @description Field name to sort by. Note: Since ID increments when new products are added, you can use the ID value to sort by product create date. */
    SortParam?: "id" | "name" | "sku" | "price" | "date_modified" | "date_last_imported" | "inventory_level" | "is_visible" | "total_sold";
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    IncludeFieldsParam?: ("name" | "type" | "sku" | "description" | "weight" | "width" | "depth" | "height" | "price" | "cost_price" | "retail_price" | "sale_price" | "map_price" | "tax_class_id" | "product_tax_code" | "calculated_price" | "categories" | "brand_id" | "option_set_id" | "option_set_display" | "inventory_level" | "inventory_warning_level" | "inventory_tracking" | "reviews_rating_sum" | "reviews_count" | "total_sold" | "fixed_cost_shipping_price" | "is_free_shipping" | "is_visible" | "is_featured" | "related_products" | "warranty" | "bin_picking_number" | "layout_file" | "upc" | "mpn" | "gtin" | "date_last_imported" | "search_keywords" | "availability" | "availability_description" | "condition" | "is_condition_shown" | "order_quantity_minimum" | "order_quantity_maximum" | "page_title" | "meta_keywords" | "meta_description" | "date_created" | "date_modified" | "view_count" | "preorder_release_date" | "preorder_message" | "is_preorder_only" | "is_price_hidden" | "price_hidden_label" | "custom_url" | "base_variant_id" | "open_graph_type" | "open_graph_title" | "open_graph_description" | "open_graph_use_meta_description" | "open_graph_use_product_name" | "open_graph_use_image")[];
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    IncludeFieldsParamMetafields?: ("resource_id" | "resource_id:in" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
    /** @description Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. The ID and the specified fields will be returned. */
    IncludeFieldsEnumParam?: ("variants" | "images" | "custom_fields" | "bulk_pricing_rules" | "primary_image" | "modifiers" | "options" | "videos")[];
    /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
    ExcludeFieldsParam?: string[];
    /** @description Pass a comma-separated list to filter by one or more product IDs. */
    IdInParam?: number[];
    /** @description Pass a comma-separated list to exclude one or more product IDs. */
    IdNotInParam?: number[];
    /** @description Pass a comma-separated list to filter by one or more product IDs. */
    ProductIdInParam?: number[];
    /** @description Pass a comma-separated list to filter by one or more category IDs. */
    CategoryIdInParam?: number[];
    /** @description A comma-separated list of category IDs. Returns a list of products that are in all the categories specified. */
    CategoriesInParam?: number[];
    /** @description Pass a comma-separated list to filter by one or more channel IDs. */
    ChannelIdInParam?: number[];
    /** @description A comma-separated list of sub-resources to return with a product object. When you specify `options` or `modifiers`, results are limited to 10 per page. */
    IncludeParam?: ("bulk_pricing_rules" | "reviews" | "modifiers" | "options" | "parent_relations" | "custom_fields")[];
    IdMinParam?: number;
    IdMaxParam?: number;
    IdGreaterParam?: number;
    IdLessParam?: number;
    /** @description Filter items by name. */
    NameParam?: string;
    /** @description Filter items by Manufacturer Part Number (MPN). */
    MpnParam?: string;
    /** @description Filter items by UPC. */
    UpcParam?: string;
    /** @description Filter items by price. */
    PriceParam?: number;
    /** @description Filter items by weight. */
    WeightParam?: number;
    /** @description Filter items by condition. */
    ConditionParam?: "new" | "used" | "refurbished";
    /** @description Filter items by brand ID. */
    BrandIdParam?: number;
    /**
     * @description Filter items by `date_modified`.
     * @example "2024-07-18T00:00:00.000Z"
     */
    DateModifiedParam?: string;
    /** @description Filter items by `date_modified`. For example, `date_modified:max=2020-06-15`. */
    DateModifiedMaxParam?: string;
    /** @description Filter items by `date_modified`. For example, `date_modified:min=2018-06-15`. */
    DateModifiedMinParam?: string;
    /**
     * @description Filter items by date_last_imported.
     * @example "2020-07-18T00:00:00.000Z"
     */
    DateLastImportedParam?: string;
    /**
     * @description Filter products by specifying a date they were NOT last imported. For example, `date_last_imported:not=2015-08-21T22%3A53%3A23%2B00%3A00`.
     * @example "2020-07-18T00:00:00.000Z"
     */
    DateLastImportedNotParam?: string;
    /**
     * @description Filter items by date_last_imported. For example, `date_last_imported:max=2015-08-21T22%3A53%3A23%2B00%3A00`.
     * @example "2020-07-18T00:00:00.000Z"
     */
    DateLastImportedMaxParam?: string;
    /**
     * @description Filter items by date_last_imported. For example, `date_last_imported:min=2015-08-21T22%3A53%3A23%2B00%3A00`.
     * @example "2020-07-18T00:00:00.000Z"
     */
    DateLastImportedMinParam?: string;
    /**
     * @description Filter items based on whether the product is currently visible on the storefront.
     * @example true
     */
    IsVisibleParam?: boolean;
    /** @description Filter items by is_featured. `1` for true, `0` for false. */
    IsFeaturedParam?: 1 | 0;
    /** @description Filter items by is_free_shipping. `1` for true, `0` for false. */
    IsFreeShippingParam?: number;
    /** @description Filter items by inventory_level. */
    InventoryLevelParam?: number;
    /** @description A comma-separated list of inventory levels. Returns a list of all products that have any of the listed inventory amounts. */
    InventoryLevelInParam?: number[];
    /** @description A comma-separated list of inventory levels. Returns a list of all products that have inventory amounts other than those specified. */
    InventoryLevelNotInParam?: number[];
    InventoryLevelMinParam?: number;
    InventoryLevelMaxParam?: number;
    InventoryLevelGreaterParam?: number;
    InventoryLevelLessParam?: number;
    /** @description Filter items by inventory_low. Values: 1, 0. */
    InventoryLowParam?: number;
    /** @description Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`. */
    OutOfStockParam?: number;
    /** @description Filter items by total_sold. */
    TotalSoldParam?: number;
    /** @description Filter items by type. */
    ProductTypeParam?: "digital" | "physical";
    /**
     * @description Filter items by categories.
     *   If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
     */
    CategoriesParam?: number;
    /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
    KeywordParam?: string;
    /** @description Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results. */
    KeywordContextParam?: "shopper" | "merchant";
    /** @description Filter items by availability. Values are: available, disabled, preorder. */
    AvailabilityParam?: "available" | "disabled" | "preorder";
    /** @description Filter items by main SKU. To filter by variant SKU, see [Get all variants](/docs/rest-catalog/product-variants#get-all-product-variants). */
    SkuParam?: string;
    /** @description A comma-separated list of SKUs. Returns a list of products with those SKUs. */
    SkuInParam?: string[];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Products
   * @description Returns a list of **Products**. Optional filter parameters can be passed in.
   */
  getProducts: {
    parameters: {
      query?: {
        /** @description Filter items by product ID. */
        id?: number;
        "id:in"?: components["parameters"]["IdInParam"];
        "id:not_in"?: components["parameters"]["IdNotInParam"];
        include?: components["parameters"]["IncludeParam"];
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        direction?: components["parameters"]["DirectionParam"];
        sort?: components["parameters"]["SortParam"];
        "categories:in"?: components["parameters"]["CategoriesInParam"];
        "id:min"?: components["parameters"]["IdMinParam"];
        "id:max"?: components["parameters"]["IdMaxParam"];
        "id:greater"?: components["parameters"]["IdGreaterParam"];
        "id:less"?: components["parameters"]["IdLessParam"];
        name?: components["parameters"]["NameParam"];
        mpn?: components["parameters"]["MpnParam"];
        upc?: components["parameters"]["UpcParam"];
        price?: components["parameters"]["PriceParam"];
        weight?: components["parameters"]["WeightParam"];
        condition?: components["parameters"]["ConditionParam"];
        brand_id?: components["parameters"]["BrandIdParam"];
        date_modified?: components["parameters"]["DateModifiedParam"];
        "date_modified:max"?: components["parameters"]["DateModifiedMaxParam"];
        "date_modified:min"?: components["parameters"]["DateModifiedMinParam"];
        date_last_imported?: components["parameters"]["DateLastImportedParam"];
        "date_last_imported:not"?: components["parameters"]["DateLastImportedNotParam"];
        "date_last_imported:max"?: components["parameters"]["DateLastImportedMaxParam"];
        "date_last_imported:min"?: components["parameters"]["DateLastImportedMinParam"];
        is_visible?: components["parameters"]["IsVisibleParam"];
        is_featured?: components["parameters"]["IsFeaturedParam"];
        is_free_shipping?: components["parameters"]["IsFreeShippingParam"];
        inventory_level?: components["parameters"]["InventoryLevelParam"];
        "inventory_level:in"?: components["parameters"]["InventoryLevelInParam"];
        "inventory_level:not_in"?: components["parameters"]["InventoryLevelNotInParam"];
        "inventory_level:min"?: components["parameters"]["InventoryLevelMinParam"];
        "inventory_level:max"?: components["parameters"]["InventoryLevelMaxParam"];
        "inventory_level:greater"?: components["parameters"]["InventoryLevelGreaterParam"];
        "inventory_level:less"?: components["parameters"]["InventoryLevelLessParam"];
        inventory_low?: components["parameters"]["InventoryLowParam"];
        out_of_stock?: components["parameters"]["OutOfStockParam"];
        total_sold?: components["parameters"]["TotalSoldParam"];
        type?: components["parameters"]["ProductTypeParam"];
        categories?: components["parameters"]["CategoriesParam"];
        keyword?: components["parameters"]["KeywordParam"];
        keyword_context?: components["parameters"]["KeywordContextParam"];
        availability?: components["parameters"]["AvailabilityParam"];
        sku?: components["parameters"]["SkuParam"];
        "sku:in"?: components["parameters"]["SkuInParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Update Products (Batch)
   * @description Updates products in batches. Batches are limited to 10 products.
   *
   * **Required Fields**
   * * `id` - product `id` is required for batch updates to products.
   *
   * **Read-Only Fields**
   * - `id`
   * - `date_created`
   * - `date_modified`
   * - `calculated_price`
   * - `base_variant_id`
   */
  updateProducts: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "id": 0,
         *     "name": "Smith Journal 13",
         *     "type": "physical",
         *     "sku": "SM-13",
         *     "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
         *     "weight": 0,
         *     "width": 0,
         *     "depth": 0,
         *     "height": 0,
         *     "price": 0,
         *     "cost_price": 0,
         *     "retail_price": 0,
         *     "sale_price": 0,
         *     "map_price": 0,
         *     "tax_class_id": 0,
         *     "product_tax_code": "string",
         *     "categories": [
         *       0
         *     ],
         *     "brand_id": 37,
         *     "inventory_level": 0,
         *     "inventory_warning_level": 0,
         *     "inventory_tracking": "none",
         *     "fixed_cost_shipping_price": 0,
         *     "is_free_shipping": true,
         *     "is_visible": true,
         *     "is_featured": true,
         *     "related_products": [
         *       0
         *     ],
         *     "warranty": "string",
         *     "bin_picking_number": "string",
         *     "layout_file": "string",
         *     "upc": "string",
         *     "search_keywords": "string",
         *     "availability": "available",
         *     "availability_description": "string",
         *     "gift_wrapping_options_type": "any",
         *     "gift_wrapping_options_list": [
         *       0
         *     ],
         *     "sort_order": -2147483648,
         *     "condition": "New",
         *     "is_condition_shown": true,
         *     "order_quantity_minimum": 0,
         *     "order_quantity_maximum": 0,
         *     "page_title": "string",
         *     "meta_keywords": [
         *       "string"
         *     ],
         *     "meta_description": "string",
         *     "view_count": 0,
         *     "preorder_release_date": "2019-08-24T14:15:22Z",
         *     "preorder_message": "string",
         *     "is_preorder_only": true,
         *     "is_price_hidden": true,
         *     "price_hidden_label": "string",
         *     "custom_url": {
         *       "url": "string",
         *       "is_customized": true
         *     },
         *     "open_graph_type": "product",
         *     "open_graph_title": "string",
         *     "open_graph_description": "string",
         *     "open_graph_use_meta_description": true,
         *     "open_graph_use_product_name": true,
         *     "open_graph_use_image": true,
         *     "gtin": "string",
         *     "mpn": "string",
         *     "date_last_imported": "2015-07-03T18:16:02+00:00",
         *     "reviews_rating_sum": 3,
         *     "reviews_count": 4,
         *     "total_sold": 80,
         *     "custom_fields": [
         *       {
         *         "id": 6,
         *         "name": "ISBN",
         *         "value": "1234567890123"
         *       }
         *     ],
         *     "bulk_pricing_rules": [
         *       {
         *         "id": 0,
         *         "quantity_min": 10,
         *         "quantity_max": 50,
         *         "type": "price",
         *         "amount": 10
         *       }
         *     ],
         *     "images": [
         *       {
         *         "image_file": "string",
         *         "is_thumbnail": true,
         *         "sort_order": -2147483648,
         *         "description": "string",
         *         "image_url": "string",
         *         "id": 0,
         *         "product_id": 0,
         *         "date_modified": "2019-08-24T14:15:22Z"
         *       }
         *     ]
         *   }
         * ]
         */
        "application/json": components["schemas"]["product_Put_Collection"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"][];
            meta?: unknown;
          };
        };
      };
      /**
       * @description Multi-status. Typically indicates that a partial failure has occurred, such as when a POST or PUT request is successful, but saving one of the attributes has failed.
       *
       * For example, the product information was updated successfully, but the inventory data failed to update or saving the URL failed.
       *
       * If inventory data failed to update, verify that the inventory-related updates are well-formed and correct; for example, that they donʼt result in negative stock levels. Then consider updating the inventory data again.
       *
       * If the URL failed to update, check that the URL uses Latin letters, is no more than 255 characters, and is not taken by any other entity.
       */
      207: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"][];
            errors?: components["schemas"]["errorMultiStatus"];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description `Product` was in conflict with another product. This is the result of duplicate unique values such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
      409: {
        content: {
          "application/json": components["schemas"]["errorResponse_409"];
        };
      };
      /** @description 413 Request Entity Too Large */
      413: {
        content: {
          "application/json": components["schemas"]["error_Base"];
        };
      };
      /** @description `Product` was not valid. This is the result of missing required fields or invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["errorResponse_422"];
        };
      };
    };
  };
  /**
   * Create a Product
   * @description Creates a *Product*. Only one product can be created at a time; however, you can create multiple product variants using the `variants` array.
   *
   * **Required Fields:**
   * - `name`
   * - `type`
   * - `weight`
   * - `price`
   *
   * **Read-Only Fields**
   * - `id`
   * - `date_created`
   * - `date_modified`
   * - `calculated_price`
   * - `base_variant_id`
   *
   * **Limits**
   * - 250 characters product name length.
   * - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
   *
   * **Usage Notes**
   * * You can create multiple product variants using the `variants` array.
   * * This endpoint accepts a `video` array. To create a product video that accepts a `video` object, see [Create a Product Video](/docs/rest-catalog/products/videos#create-a-product-video) for information.
   */
  createProduct: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["product_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /**
       * @description Multi-status. Typically indicates that a partial failure has occurred, such as when a POST or PUT request is successful, but saving one of the attributes has failed.
       *
       * For example, the product information was updated successfully, but the inventory data failed to update or saving the URL failed.
       *
       * If inventory data failed to update, verify that the inventory-related updates are well-formed and correct; for example, that they donʼt result in negative stock levels. Then consider updating the inventory data again.
       *
       * If the URL failed to update, check that the URL uses Latin letters, is no more than 255 characters, and is not taken by any other entity.
       */
      207: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"][];
            errors?: components["schemas"]["errorMultiStatus"];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description `Product` was in conflict with another product. This is the result of duplicate unique values, such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete Products
   * @description To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
   *
   * > #### Note
   * > The maximum number of products you can delete at one time is 250.
   *
   * **Example**:
   * To delete products with IDs 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
   */
  deleteProducts: {
    parameters: {
      query?: {
        name?: components["parameters"]["NameParam"];
        sku?: components["parameters"]["SkuParam"];
        price?: components["parameters"]["PriceParam"];
        weight?: components["parameters"]["WeightParam"];
        condition?: components["parameters"]["ConditionParam"];
        brand_id?: components["parameters"]["BrandIdParam"];
        date_modified?: components["parameters"]["DateModifiedParam"];
        date_last_imported?: components["parameters"]["DateLastImportedParam"];
        is_visible?: components["parameters"]["IsVisibleParam"];
        is_featured?: components["parameters"]["IsFeaturedParam"];
        "id:in"?: components["parameters"]["IdInParam"];
        inventory_level?: components["parameters"]["InventoryLevelParam"];
        total_sold?: components["parameters"]["TotalSoldParam"];
        type?: components["parameters"]["ProductTypeParam"];
        categories?: components["parameters"]["CategoriesParam"];
        keyword?: components["parameters"]["KeywordParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get a Product
   * @description Returns a single *Product*. Optional parameters can be passed in.
   */
  getProduct: {
    parameters: {
      query?: {
        include?: components["parameters"]["IncludeParam"];
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product
   * @description Updates a *Product*.
   *
   * **Limits**
   * - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
   *
   * **Read-Only Fields**
   * - id
   * - date_created
   * - date_modified
   * - calculated_price
   * - base_variant_id
   */
  updateProduct: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsEnumParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["product_Put"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
          "example-1": unknown;
        };
      };
      /** @description Created */
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /**
       * @description Multi-status. Typically indicates that a partial failure has occurred, such as when a POST or PUT request is successful, but saving one of the attributes has failed.
       *
       * For example, the product information was updated successfully, but the inventory data failed to update or saving the URL failed.
       *
       * If inventory data failed to update, verify that the inventory-related updates are well-formed and correct; for example, that they donʼt result in negative stock levels. Then consider updating the inventory data again.
       *
       * If the URL failed to update, check that the URL uses Latin letters, is no more than 255 characters, and is not taken by any other entity.
       */
      207: {
        content: {
          "application/json": {
            data?: components["schemas"]["product_Full"];
            errors?: components["schemas"]["errorMultiStatus"];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description `Product` was in conflict with another product. This is caused by: duplicate unique values, such as name or SKU; a missing category, brand, or tax_class with which the product is being associated; or a conflicting bulk pricing rule. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product
   * @description Deletes a *Product*.
   */
  deleteProduct: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get All Product Images
   * @description Returns a list of *Product Images*. Optional parameters can be passed in.
   */
  getProductImages: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productImage_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description There are not any images on this product. */
      204: {
        content: {
        };
      };
      /** @description The product ID does not exist. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Product Image
   * @description Creates a *Product Image*.
   *
   *  **Required Fields**
   * - `image_file`, or
   * - `image_url`
   *
   * **Usage Notes**
   * - `image_url` - `255` character limit
   * - For file uploads, use the `multipart/form-data` media type. See [Adding product images](/docs/store-operations/catalog#adding-product-images) for more information.
   * - You can create only one image at a time. A product can have up to 1000 images.
   * - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
   * - Each image file or image uploaded by URL can be up to 8 MB.
   */
  createProductImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The unique numeric identifier for the product with which the image is associated. */
          product_id?: number;
          /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image. */
          url_zoom?: string;
          /** @description The standard URL for this image. By default, this is used for product-page images. */
          url_standard?: string;
          /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
          url_thumbnail?: string;
          /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
          url_tiny?: string;
          /**
           * Format: date-time
           * @description The date on which the product image was modified.
           */
          date_modified?: string;
          /** @description Flag for identifying whether the image is used as the productʼs thumbnail. */
          is_thumbnail?: boolean;
          /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /** @description The description for the image. */
          description?: string;
        } & {
          /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
          image_url?: string;
          /**
           * @description The local path to the original image file uploaded to BigCommerce. A `multipart/form-data` media type.
           *
           * Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file.
           */
          image_file?: string;
        };
        "multipart/form-data": {
          /** @description The unique numeric ID of the image; increments sequentially. */
          id?: number;
          /** @description The unique numeric identifier for the product with which the image is associated. */
          product_id?: number;
          /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image. */
          url_zoom?: string;
          /** @description The standard URL for this image. By default, this is used for product-page images. */
          url_standard?: string;
          /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
          url_thumbnail?: string;
          /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
          url_tiny?: string;
          /**
           * Format: date-time
           * @description The date on which the product image was modified.
           */
          date_modified?: string;
          /** @description Flag for identifying whether the image is used as the productʼs thumbnail. */
          is_thumbnail?: boolean;
          /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /** @description The description for the image. */
          description?: string;
        } & {
          /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file. */
          image_url?: string;
          /**
           * @description The local path to the original image file uploaded to BigCommerce. A `multipart/form-data` media type.
           *
           * Must be sent as a multipart/form-data field in the request body. Limit of 8 MB per file.
           */
          image_file?: string;
        };
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /** Product Image */
            data?: {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /** @description Flag for identifying whether the image is used as the productʼs thumbnail. */
              is_thumbnail?: boolean;
              /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /** @description The description for the image. */
              description?: string;
            } & {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /**
               * @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
               * A `multipart/form-data` media type.
               *
               * Must be sent as a multipart/form-data field in the request body. Limit of 8 MB per file.
               */
              image_file?: string;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The product ID does not exist. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /**
       * @description Unprocessable Entity.
       *
       * May occur if the `Content-Type` header is set to `multipart/form-data` rather than `application/json` when creating a product image using `image_url`.
       */
      422: {
        content: {
          "application/json": {
            status: number;
            title: string;
            type: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Image
   * @description Returns a single *Product Image*. Optional parameters can be passed in.
   */
  getProductImage: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        image_id: components["parameters"]["ImageIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productImage_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Image
   * @description Updates a *Product Image*.
   *
   * **Usage Notes**
   * - `image_url` - `255` character limit
   * - Each image file or image uploaded by URL can be up to 8 MB.
   * - For file uploads, send a POST request using the `multipart/form-data` media type
   */
  updateProductImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        image_id: components["parameters"]["ImageIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["productImage_Put"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Product Image */
            data?: {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
              /** @description Flag for identifying whether the image is used as the productʼs thumbnail. */
              is_thumbnail?: boolean;
              /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /** @description The description for the image. */
              description?: string;
            } & {
              /** @description The unique numeric ID of the image; increments sequentially. */
              id?: number;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /**
               * @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
               *
               * Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file.
               */
              image_file?: string;
              /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image. */
              url_zoom?: string;
              /** @description The standard URL for this image. By default, this is used for product-page images. */
              url_standard?: string;
              /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels. */
              url_thumbnail?: string;
              /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page. */
              url_tiny?: string;
              /**
               * Format: date-time
               * @description The date on which the product image was modified.
               */
              date_modified?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Created */
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Image
   * @description Deletes a *Product Image*.
   */
  deleteProductImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        image_id: components["parameters"]["ImageIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get All Product Videos
   * @description Returns a list of *Product Videos*. Optional parameters can be passed in.
   */
  getProductVideos: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productVideo_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Create a Product Video
   * @description Creates a *Product Video*.
   *
   * **Required Fields**
   * * video_id
   *
   * **Read-Only Fields**
   * * id
   *
   * Publicly accessible URLs are valid parameters.
   *
   * The Catalog API integrates with third-party YouTube, and you must load videos through YouTube.
   * The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
   */
  createProductVideo: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The title for the video. If left blank, this will be filled in according to data on a host site.
           *
           * @example Writing Great Documentation
           */
          title?: string;
          /**
           * @description The description for the video. If left blank, this will be filled in according to data on a host site.
           *
           * @example A video about documenation
           */
          description?: string;
          /**
           * @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
           *
           * @example 1
           */
          sort_order?: number;
          /**
           * @description The video type (a short name of a host site).
           *
           * @enum {string}
           */
          type?: "youtube";
        } & {
          /**
           * @description The ID of the video on a host site.
           *
           * @example z3fRu9pkuXE
           */
          video_id?: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Video
             * @description A product video model.
             */
            data?: {
              /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
              title?: string;
              /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
              description?: string;
              /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /**
               * @description The video type (a short name of a host site).
               *
               * @enum {string}
               */
              type?: "youtube";
            } & {
              /** @description The unique numeric ID of the product video; increments sequentially. */
              id?: number;
              /** @description The ID of the video on a host site. */
              video_id?: string;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description Length of the video. This will be filled in according to data on a host site. */
              length?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Video
   * @description Returns a single *Product Video*. Optional parameters can be passed in.
   */
  getProductVideo: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        id: components["parameters"]["VideoIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["productVideo_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Video
   * @description Updates a *Product Video.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   *
   * The Catalog API integrates with third-party YouTube, and you must load videos through YouTube.
   * The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
   */
  updateProductVideo: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        id: components["parameters"]["VideoIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
          title?: string;
          /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
          description?: string;
          /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered. */
          sort_order?: number;
          /**
           * @description The video type (a short name of a host site).
           *
           * @enum {string}
           */
          type?: "youtube";
        } & {
          /** @description The unique numeric ID of the product video; increments sequentially. */
          id?: number;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Video
             * @description A product video model.
             */
            data?: {
              /** @description The title for the video. If left blank, this will be filled in according to data on a host site. */
              title?: string;
              /** @description The description for the video. If left blank, this will be filled in according to data on a host site. */
              description?: string;
              /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered. */
              sort_order?: number;
              /**
               * @description The video type (a short name of a host site).
               *
               * @enum {string}
               */
              type?: "youtube";
            } & {
              /** @description The unique numeric ID of the product video; increments sequentially. */
              id?: number;
              /** @description The ID of the video on a host site. */
              video_id?: string;
              /** @description The unique numeric identifier for the product with which the image is associated. */
              product_id?: number;
              /** @description Length of the video. This will be filled in according to data on a host site. */
              length?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Video
   * @description Deletes a *Product Video*.
   */
  deleteProductVideo: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        id: components["parameters"]["VideoIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Complex Rules
   * @description Returns a list of all product *Complex Rules*. Optional parameters may be passed in.
   */
  getProductComplexRules: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["complexRule_Base"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Create a Complex Rule
   * @description Creates a product *Complex Rule*.
   *
   * **Required Fields**
   * - modifier_id
   * - modifier_value_id
   * - variant_id
   *
   * **Read-Only Fields**
   * - complex_rule_id
   * - conditions_id
   * - rule_id
   * - combination_id
   * - id
   */
  createProductComplexRule: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
           *
           * @example 67
           */
          product_id?: number | null;
          /**
           * @description The priority to give this rule when making adjustments to the product properties.
           *
           * @example 0
           */
          sort_order?: number;
          /**
           * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
           *
           * @example true
           */
          enabled?: boolean;
          /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
          stop?: boolean;
          /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
          purchasing_disabled?: boolean;
          /**
           * @description Message displayed on the storefront when a rule disables the purchasing of a product.
           *
           * @example This product is not available at this time.
           */
          purchasing_disabled_message?: string;
          /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
          purchasing_hidden?: boolean;
          /**
           * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          price_adjuster?: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          weight_adjuster?: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          conditions?: components["schemas"]["conditionsRequest"];
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Complex Rule
             * @description Common ComplexRule properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the rule; increments sequentially.
               * Read-Only
               * @example 5
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
               *
               * @example 67
               */
              product_id?: number | null;
              /**
               * @description The priority to give this rule when making adjustments to the product properties.
               *
               * @example 0
               */
              sort_order?: number;
              /**
               * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
               *
               * @example true
               */
              enabled?: boolean;
              /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
              stop?: boolean;
              /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
              purchasing_disabled?: boolean;
              /**
               * @description Message displayed on the storefront when a rule disables the purchasing of a product.
               *
               * @example This product is not available at this time.
               */
              purchasing_disabled_message?: string;
              /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
              purchasing_hidden?: boolean;
              /**
               * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string|null}
                 */
                adjuster?: "relative" | "percentage" | null;
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string|null}
                 */
                adjuster?: "relative" | "percentage" | null;
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              conditions?: ({
                  /**
                   * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                   *
                   * @example 3
                   */
                  id?: number | null;
                  /**
                   * @description The unique numeric ID of the rule with which the condition is associated.
                   * Read-Only
                   * @example 4
                   */
                  rule_id?: number | null;
                  /**
                   * @description The unique numeric ID of the modifier with which the rule condition is associated.
                   * Required in /POST.
                   * @example 55
                   */
                  modifier_id: number | null;
                  /**
                   * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                   * Required in /POST.
                   * @example 256
                   */
                  modifier_value_id: number | null;
                  /**
                   * @description The unique numeric ID of the variant with which the rule condition is associated.
                   * Required in /POST.
                   * @example 1
                   */
                  variant_id: number | null;
                  /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                  combination_id?: number;
                })[];
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Complex Rule
   * @description Returns a single *Complex Rule*. Optional parameters can be passed in.
   */
  getProductComplexRule: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Complex Rule
             * @description Common ComplexRule properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the rule; increments sequentially.
               * Read-Only
               * @example 5
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
               *
               * @example 67
               */
              product_id?: number;
              /**
               * @description The priority to give this rule when making adjustments to the product properties.
               *
               * @example 0
               */
              sort_order?: number;
              /**
               * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
               *
               * @example true
               */
              enabled?: boolean;
              /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
              stop?: boolean;
              /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
              purchasing_disabled?: boolean;
              /**
               * @description Message displayed on the storefront when a rule disables the purchasing of a product.
               *
               * @example This product is not available at this time.
               */
              purchasing_disabled_message?: string;
              /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
              purchasing_hidden?: boolean;
              /**
               * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string}
                 */
                adjuster?: "relative" | "percentage";
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string}
                 */
                adjuster?: "relative" | "percentage";
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              conditions?: {
                  /**
                   * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                   *
                   * @example 3
                   */
                  id?: number;
                  /**
                   * @description The unique numeric ID of the rule with which the condition is associated.
                   * Read-Only
                   * @example 4
                   */
                  rule_id?: number;
                  /**
                   * @description The unique numeric ID of the modifier with which the rule condition is associated.
                   * Required in /POST.
                   * @example 55
                   */
                  modifier_id: number;
                  /**
                   * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                   * Required in /POST.
                   * @example 256
                   */
                  modifier_value_id: number;
                  /**
                   * @description The unique numeric ID of the variant with which the rule condition is associated.
                   * Required in /POST.
                   * @example 1
                   */
                  variant_id: number;
                  /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                  combination_id?: number;
                }[];
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Complex Rule
   * @description Updates a *Complex Rule*.
   *
   * **Required Fields**:
   * - none
   *
   * **Read-Only Fields**:
   * - complex_rule_id
   * - conditions_id
   * - rule_id
   * - combination_id
   * - id
   */
  updateProductComplexRule: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
           *
           * @example 67
           */
          product_id?: number | null;
          /**
           * @description The priority to give this rule when making adjustments to the product properties.
           *
           * @example 0
           */
          sort_order?: number;
          /**
           * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
           *
           * @example true
           */
          enabled?: boolean;
          /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
          stop?: boolean;
          /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
          purchasing_disabled?: boolean;
          /**
           * @description Message displayed on the storefront when a rule disables the purchasing of a product.
           *
           * @example This product is not available at this time.
           */
          purchasing_disabled_message?: string;
          /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
          purchasing_hidden?: boolean;
          /**
           * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          price_adjuster?: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          /**
           * Adjuster
           * @description Adjuster for Complex Rules.
           */
          weight_adjuster?: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
          };
          conditions?: ({
              /**
               * @description The unique numeric ID of the modifier with which the rule condition is associated.
               * Required in /POST.
               * @example 55
               */
              modifier_id: number | null;
              /**
               * @description The unique numeric ID of the modifier value with which the rule condition is associated.
               * Required in /POST.
               * @example 256
               */
              modifier_value_id: number | null;
              /**
               * @description The unique numeric ID of the variant with which the rule condition is associated.
               * Required in /POST.
               * @example 1
               */
              variant_id: number | null;
            })[];
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Complex Rule
             * @description Common ComplexRule properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the rule; increments sequentially.
               * Read-Only
               * @example 5
               */
              id?: number;
              /**
               * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
               *
               * @example 67
               */
              product_id?: number;
              /**
               * @description The priority to give this rule when making adjustments to the product properties.
               *
               * @example 0
               */
              sort_order?: number;
              /**
               * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
               *
               * @example true
               */
              enabled?: boolean;
              /** @description Flag for determining whether other rules should not be applied after this rule has been applied. */
              stop?: boolean;
              /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied. */
              purchasing_disabled?: boolean;
              /**
               * @description Message displayed on the storefront when a rule disables the purchasing of a product.
               *
               * @example This product is not available at this time.
               */
              purchasing_disabled_message?: string;
              /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied. */
              purchasing_hidden?: boolean;
              /**
               * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              price_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string}
                 */
                adjuster?: "relative" | "percentage";
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              /**
               * Adjuster
               * @description Adjuster for Complex Rules.
               */
              weight_adjuster?: {
                /**
                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @enum {string}
                 */
                adjuster?: "relative" | "percentage";
                /**
                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 * @example 5
                 */
                adjuster_value?: number;
              };
              conditions?: {
                  /**
                   * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                   *
                   * @example 3
                   */
                  id?: number;
                  /**
                   * @description The unique numeric ID of the rule with which the condition is associated.
                   * Read-Only
                   * @example 4
                   */
                  rule_id?: number;
                  /**
                   * @description The unique numeric ID of the modifier with which the rule condition is associated.
                   * Required in /POST.
                   * @example 55
                   */
                  modifier_id: number;
                  /**
                   * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                   * Required in /POST.
                   * @example 256
                   */
                  modifier_value_id: number;
                  /**
                   * @description The unique numeric ID of the variant with which the rule condition is associated.
                   * Required in /POST.
                   * @example 1
                   */
                  variant_id: number;
                  /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3. */
                  combination_id?: number;
                }[];
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Complex Rule
   * @description Deletes a product *Complex Rule*.
   */
  deleteProductComplexRule: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Product Custom Fields
   * @description Returns a list of product *Custom Fields*. You can pass in optional parameters.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  getProductCustomFields: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: components["responses"]["CustomFieldsResponse"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["GeneralErrorWithErrors"];
      404: components["responses"]["GeneralError"];
      405: components["responses"]["MethodNotAllowedError"];
    };
  };
  /**
   * Create a Product Custom Field
   * @description Creates a *Custom Field*.
   *
   * **Required Fields:**
   * - name
   * - value
   *
   * **Name-Value Pair Uniqueness**
   * - Every name-value pair must be unique inside a product.
   *
   * **Read-Only:**
   * - id
   *
   * **Limits**
   * - 200 custom fields per product limit.
   * - 250 characters per custom field limit.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  createProductCustomField: {
    parameters: {
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["customFieldPost"];
      };
    };
    responses: {
      200: components["responses"]["CustomFieldResponse"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["GeneralErrorWithErrors"];
      404: components["responses"]["GeneralError"];
      405: components["responses"]["MethodNotAllowedError"];
      415: components["responses"]["UnsupportedMediaTypeError"];
      422: components["responses"]["GeneralError"];
    };
  };
  /**
   * Get a Product Custom Field
   * @description Returns a *Custom Field*.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  getProductCustomField: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        custom_field_id: components["parameters"]["CustomFieldIdParam"];
      };
    };
    responses: {
      200: components["responses"]["CustomFieldResponse"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["GeneralErrorWithErrors"];
      404: components["responses"]["GeneralError"];
      405: components["responses"]["MethodNotAllowedError"];
    };
  };
  /**
   * Update a Product Custom Field
   * @description Updates a *Custom Field*.
   *
   * **Required Fields**
   * - none
   *
   * **Name-Value Pair Uniqueness**
   * - Every name-value pair must be unique inside a product.
   *
   * **Read-Only**
   * - id
   *
   *  **Limits**
   * - 200 custom fields per product limit.
   * - 250 characters per custom field limit.
   * - 40 concurrent requests default rate limit.
   */
  updateProductCustomField: {
    parameters: {
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        custom_field_id: components["parameters"]["CustomFieldIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["customFieldPut"];
      };
    };
    responses: {
      200: components["responses"]["CustomFieldResponse"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["GeneralErrorWithErrors"];
      404: components["responses"]["GeneralError"];
      405: components["responses"]["MethodNotAllowedError"];
      415: components["responses"]["UnsupportedMediaTypeError"];
      422: components["responses"]["GeneralError"];
    };
  };
  /**
   * Delete a Product Custom Field
   * @description Deletes a product *Custom Field*.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  deleteProductCustomField: {
    parameters: {
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        custom_field_id: components["parameters"]["CustomFieldIdParam"];
      };
    };
    responses: {
      /** @description 204 No Content */
      204: {
        content: {
        };
      };
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["GeneralErrorWithErrors"];
      404: components["responses"]["GeneralError"];
      405: components["responses"]["MethodNotAllowedError"];
    };
  };
  /**
   * Create a Bulk Pricing Rule
   * @description Creates a *Bulk Pricing Rule*.
   */
  createBulkPricingRule: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["bulkPricingRule_Full"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: {
              /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
              id: number;
            } & components["schemas"]["bulkPricingRule_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
    };
  };
  /**
   * Get a Bulk Pricing Rule
   * @description Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in.
   */
  getBulkPricingRule: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: {
              /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
              id: number;
            } & components["schemas"]["bulkPricingRule_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource or parent resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Bulk Pricing Rule
   * @description Updates a *Bulk Pricing Rule*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * - id
   */
  updateBulkPricingRule: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
          id: number;
        } & components["schemas"]["bulkPricingRule_Full"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: {
              /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
              id: number;
            } & components["schemas"]["bulkPricingRule_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource or parent resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Bulk Pricing Rule
   * @description Deletes a *Bulk Pricing Rule*.
   */
  deleteBulkPricingRule: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
      /** @description The resource or parent resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Get Product Metafields
   * @description Returns a list of *Product Metafields*. Optional parameters can be passed in.
   */
  getProductMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Create a Product Metafield
   * @description Creates a *Product Metafield*.
   *
   * **Required Fields:**
   * * permission_set
   * * namespace
   * * key
   * * value
   *
   * **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  createProductMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["metafield_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the appʼs client ID, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Metafield
   * @description Returns a single *Product Metafield*. Optional parameters can be passed in.
   */
  getProductMetafield: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Metafield
   * @description Updates a *Product Metafield*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified using the API account that created the metafield:
   * 	* `namespace`
   * 	* `key`
   * 	* `permission_set`
   * 	* `value`
   *
   * **Usage Notes**
   * * Attempting to modify the `namespace`, `key`, `permission_set`, or `value` field using an API account different from the one used to create those metafields will result in a `403` error message.
   */
  updateProductMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["metafield_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Metafield
   * @description Deletes a *Product Metafield*.
   */
  deleteProductMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Get Product Reviews
   * @description Returns a list of all *Product Reviews*. Optional parameters can be passed in.
   */
  getProductReviews: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        /** @description Filter items by status. `1` for approved, `0` for pending. */
        status?: 0 | 1;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: ({
                /**
                 * @description The title for the product review.
                 * Required in /POST.
                 */
                title: string;
                /** @description The text for the product review. */
                text?: string;
                /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
                status?: string;
                /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                rating?: number;
                /** @description The email of the reviewer. Must be a valid email, or an empty string. */
                email?: string;
                /** @description The name of the reviewer. */
                name?: string;
                /**
                 * Format: date-time
                 * @description Date the product was reviewed. Required in /POST.
                 */
                date_reviewed: string;
              } & {
                /** @description The unique numeric ID of the product review; increments sequentially. */
                id?: number;
                /**
                 * Format: date-time
                 * @description Date the product review was created.
                 */
                date_created?: string;
                /**
                 * Format: date-time
                 * @description Date the product review was modified.
                 */
                date_modified?: string;
              })[];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description There are no reviews on this product. */
      204: {
        content: {
        };
      };
      /** @description The product ID does not exist. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Product Review
   * @description Creates a *Product Review*.
   *
   * **Required Fields**
   * - title
   * - date_reviewed
   *
   * **Read-Only Fields**
   * * id
   */
  createProductReview: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The title for the product review.
           * Required in /POST.
           * @example Great Product
           */
          title: string;
          /** @description The text for the product review. */
          text?: string;
          /**
           * @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
           *
           * @example approved
           */
          status?: string;
          /**
           * @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.
           * @example 5
           */
          rating?: number;
          /**
           * @description The email of the reviewer. Must be a valid email, or an empty string.
           * @example bob@email.com
           */
          email?: string;
          /**
           * @description The name of the reviewer.
           * @example Bob S.
           */
          name?: string;
          /**
           * Format: date-time
           * @description Date the product was reviewed. Required in /POST.
           */
          date_reviewed: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Review
             * @description A product review model.
             */
            data?: {
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The product ID does not exist. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Product Review
   * @description Returns a single *Product Review*. Optional parameters maybe passed in.
   */
  getProductReview: {
    parameters: {
      query?: {
        include_fields?: components["parameters"]["IncludeFieldsParam"];
        exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        review_id: components["parameters"]["ReviewIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Review
             * @description A product review model.
             */
            data?: {
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Product Review
   * @description Updates a *Product Review*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   */
  updateProductReview: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        review_id: components["parameters"]["ReviewIdParam"];
      };
    };
    /** @description A BigCommerce `ProductReview` object. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The title for the product review.
           * Required in /POST.
           */
          title: string;
          /** @description The text for the product review. */
          text?: string;
          /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
          status?: string;
          /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
          rating?: number;
          /** @description The email of the reviewer. Must be a valid email, or an empty string. */
          email?: string;
          /** @description The name of the reviewer. */
          name?: string;
          /**
           * Format: date-time
           * @description Date the product was reviewed. Required in /POST.
           */
          date_reviewed: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Product Review
             * @description A product review model.
             */
            data?: {
              /**
               * @description The title for the product review.
               * Required in /POST.
               */
              title: string;
              /** @description The text for the product review. */
              text?: string;
              /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`. */
              status?: string;
              /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
              rating?: number;
              /** @description The email of the reviewer. Must be a valid email, or an empty string. */
              email?: string;
              /** @description The name of the reviewer. */
              name?: string;
              /**
               * Format: date-time
               * @description Date the product was reviewed. Required in /POST.
               */
              date_reviewed: string;
            } & {
              /** @description The unique numeric ID of the product review; increments sequentially. */
              id?: number;
              /**
               * Format: date-time
               * @description Date the product review was created.
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description Date the product review was modified.
               */
              date_modified?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Product Review
   * @description Deletes a *Product Review*.
   */
  deleteProductReview: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        product_id: components["parameters"]["ProductIdParam"];
        review_id: components["parameters"]["ReviewIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Products Channel Assignments
   * @description Returns a list of products channel assignments.
   */
  getProductsChannelAssignments: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        "product_id:in"?: components["parameters"]["ProductIdInParam"];
        "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description Collection of channel assignments. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ProductChannelAssignment"][];
            meta?: components["schemas"]["MetaPaginationObject"];
          };
        };
      };
    };
  };
  /**
   * Create Products Channel Assignments
   * @description Creates products channel assignments.
   */
  createProductsChannelAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductChannelAssignment"][];
      };
    };
    responses: {
      /** @description Updated */
      204: {
        content: never;
      };
      /** @description Error response for batch PUT of Channel Assignments. Includes the errors for each reference id. */
      422: {
        content: {
          "application/json": components["schemas"]["beta5ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Products Channel Assignments
   * @description Delete products channel assignments. A filter must be supplied.
   */
  deleteProductsChannelAssignments: {
    parameters: {
      query?: {
        "product_id:in"?: components["parameters"]["ProductIdInParam"];
        "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: never;
      };
      /** @description At least one filter must be provided in order to delete channel assignments */
      422: {
        content: {
          "application/json": components["schemas"]["beta5ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Products Category Assignments
   * @description Returns a list of products category assignments.
   */
  getProductsCategoryAssignments: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        "product_id:in"?: components["parameters"]["ProductIdInParam"];
        "category_id:in"?: components["parameters"]["CategoryIdInParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description Collection of category assignments. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ProductCategoryAssignment"][];
            meta?: components["schemas"]["MetaPaginationObject"];
          };
        };
      };
    };
  };
  /**
   * Create Products Category Assignments
   * @description Creates products category assignments.
   */
  createProductsCategoryAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProductCategoryAssignment"][];
      };
    };
    responses: {
      /** @description Updated */
      204: {
        content: never;
      };
      /** @description Error response for batch PUT of Category Assignments. Includes the errors for each reference id. */
      422: {
        content: {
          "application/json": components["schemas"]["beta5ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Products Category Assignments
   * @description Deletes products category assignments. A filter must be supplied.
   */
  deleteProductsCategoryAssignments: {
    parameters: {
      query?: {
        "product_id:in"?: components["parameters"]["ProductIdInParam"];
        "category_id:in"?: components["parameters"]["CategoryIdInParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: never;
      };
      /** @description At least one filter must be provided in order to delete category assignments */
      422: {
        content: {
          "application/json": components["schemas"]["beta5ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a Catalog Summary
   * @description Returns a lightweight inventory summary from the BigCommerce Catalog.
   *
   * The inventory summary includes:
   * * "inventory_count"
   * * "variant_count"
   * * "inventory_value"
   * * "highest_variant_price"
   * * "average_variant_price"
   * * "lowest_variant_price"
   * * "oldest_variant_date"
   * * "newest_variant_date"
   * * "primary_category_id"
   * * "primary_category_name"
   */
  getCatalogSummary: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Catalog Summary
             * @description Catalog Summary object describes a lightweight summary of the catalog.
             */
            data?: {
              /**
               * @description A count of all inventory items in the catalog.
               *
               * @example 2000
               */
              inventory_count?: number;
              /**
               * Format: double
               * @description Total value of storeʼs inventory.
               *
               * @example 267000
               */
              inventory_value?: number;
              /**
               * @description ID of the category containing the most products.
               *
               * @example 23
               */
              primary_category_id?: number;
              /**
               * @description Name of the category containing the most products.
               *
               * @example Shop All
               */
              primary_category_name?: string;
              /**
               * @description Total number of variants
               * @example 46
               */
              variant_count?: number;
              /**
               * Format: double
               * @description Highest priced variant
               * @example 249
               */
              highest_variant_price?: number;
              /**
               * Format: double
               * @description Average price of all variants
               * @example 83.07978261
               */
              average_variant_price?: number;
              /**
               * @description Lowest priced variant in the store
               * @example 7
               */
              lowest_variant_price?: string;
              /** @example 2018-08-15T00:00:00+00:00 */
              oldest_variant_date?: string;
              /** @example 2018-08-16T00:00:00+00:00 */
              newest_variant_date?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
    };
  };
  /**
   * Get All Product Metafields
   * @description Get all product metafields.
   */
  getProductsMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        "key:in"?: components["parameters"]["MetafieldKeyInParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
        direction?: components["parameters"]["DirectionParam"];
        include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
        "date_modified:min"?: components["parameters"]["date_modified_min"];
        "date_modified:max"?: components["parameters"]["date_modified_max"];
        "date_created:min"?: components["parameters"]["date_created_min"];
        "date_created:max"?: components["parameters"]["date_created_max"];
      };
    };
    responses: {
      /** @description List of `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
    };
  };
  /**
   * Update multiple Metafields
   * @description Update multiple metafields.
   */
  updateProductsMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Put"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            id: number;
          })[];
      };
    };
    responses: {
      /** @description List of updated `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Create multiple Metafields
   * @description Create multiple metafields.
   */
  createProductsMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID for the product with which the metafield is associated.
             *
             * @example 42
             */
            resource_id: number;
          })[];
      };
    };
    responses: {
      /** @description List of created `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Delete Multiple Metafields
   * @description Delete all product metafields.
   */
  deleteProductsMetafields: {
    /** @description List of metafield IDs. */
    requestBody?: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Response object for metafields deletion with success. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields deletion with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
        };
      };
    };
  };
}
