// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/settings/analytics": {
    /**
     * Get All Web Analytics Providers
     * @description Returns a list of web analytics providers.
     */
    get: operations["getAnalyticsProviders"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/analytics/{id}": {
    /**
     * Get a Web Analytics Provider
     * @description Returns a single web analytics provider data for a default channel.
     */
    get: operations["getAnalyticsProvider"];
    /**
     * Update a Web Analytics Provider
     * @description Updates a single web analytics provider data for a default channel.
     */
    put: operations["updateAnalyticsProvider"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description Web Analytics Provider ID. */
        id: number;
      };
    };
  };
  "/settings/catalog": {
    /**
     * Get Catalog Settings
     * @description Returns catalog settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsCatalog"];
    /**
     * Update Catalog Settings
     * @description Updates catalog settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations["updateSettingsCatalog"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/email-statuses": {
    /**
     * Get Transactional Email Settings
     * @description Get global transactional email settings or channel specific overrides by `channel_id`.
     */
    get: operations["getSettingsEmailStatuses"];
    /**
     * Update Transactional Email Settings
     * @description Update global transactional email settings or create channel specific overrides by `channel_id`.
     */
    put: operations["updateSettingsEmailStatuses"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/favicon/image": {
    /**
     * Create Favicon Image
     * @description Uploads an image file to use as the storefront favicon. Supported MIME types include GIF, JPEG, and PNG.
     *
     *   - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *   - The uploaded image can be up to 10 MB. Larger files result in an error.
     */
    post: operations["createSettingsFaviconImage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/inventory/notifications": {
    /**
     * Get Inventory Notifications Settings
     * @description Returns inventory notification settings.
     * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global settings only.
     */
    get: operations["getSettingsInventoryNotifications"];
    /**
     * Update Inventory Notifications Settings
     * @description Updates inventory notification settings.
     * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global settings only.
     * * Supplying `null` settings values per channel will delete overrides per given channel and values will be inherited from global level.
     * * Partial updates are not supported within the given endpoint. In order to delete overrides per channel, `null` should be supplied for all the settings within the given endpoint.
     */
    put: operations["updateSettingsInventoryNotifications"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/logo": {
    /**
     * Get Store Logo Settings
     * @description Returns store logo settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsLogo"];
    /**
     * Update Store Logo Settings
     * @description Updates the logo type and logo text for a textual logo. To upload new images, use the dedicated image POST endpoints.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations["updateSettingsLogo"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/logo/image": {
    /**
     * Create Logo Image
     * @description Uploads an image file to use as the storefront logo. Supported MIME types include GIF, JPEG, and PNG.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     */
    post: operations["createSettingsLogoImage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/search/filters": {
    /**
     * Get Enabled Filters
     * @description Returns a list of enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. These filters will be used if a store does not have contextual overrides.
     */
    get: operations["getSettingsEnabledSearchFilters"];
    /**
     * Update Enabled Filters
     * @description Updates enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters.
     */
    put: operations["updateSettingsEnabledSearchFilters"];
  };
  "/settings/search/filters/available": {
    /**
     * Get Available Filters
     * @description Returns a list of filters available to power [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings).
     */
    get: operations["getSettingsAvailableFilters"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/search/filters/contexts": {
    /**
     * Get Contextual Filters
     * @description Returns a list of contextual filters enabled for a particular channel or category.
     *
     * **Usage Notes**
     *
     * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
     *
     * The order of the returned filters will match the sort order of the filters on the storefront.
     */
    get: operations["getSettingsFiltersContexts"];
    /**
     * Upsert Contextual Filters
     * @description Upserts contextual filters for a particular channel or category.
     *
     * **Usage Notes**
     *
     * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
     *
     * You can change the order of the filters on the live site by changing the order of the filters you send.
     */
    put: operations["upsertSettingsFiltersContexts"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/store/locale": {
    /**
     * Get Locale Settings
     * @description Returns global locale settings.
     *
     * For stores with Catalyst channels, the `shopper_language_selection_method` field is deprecated. Using this endpoint on those stores will return a warning about the deprecation. For additional information, refer to [Locale Configuration](/docs/store-operations/settings/locales).
     */
    get: operations["getSettingsLocale"];
    /**
     * Update Locale Settings
     * @description Updates global locale settings.
     *
     * For stores with Catalyst channels, the `shopper_language_selection_method` field is deprecated. Using this endpoint on those stores will return a warning about the deprecation. For additional information, refer to [Locale Configuration](/docs/store-operations/settings/locales).
     */
    put: operations["updateSettingsLocale"];
  };
  "/settings/store/profile": {
    /**
     * Get Store Profile Settings
     * @description Returns store profile settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsStoreProfile"];
    /**
     * Update Store Profile Settings
     * @description Updates store profile settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations["updateSettingsStoreProfile"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/storefront/category": {
    /**
     * Get Storefront Category Settings
     * @description Returns category settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsStorefrontCategory"];
    /**
     * Update Storefront Category Settings
     * @description Updates category settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations["updateSettingsStorefrontCategory"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/storefront/product": {
    /**
     * Get Storefront Product Settings
     * @description Returns product settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsStorefrontProduct"];
    /**
     * Update Storefront Product Settings
     * @description Updates product settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations["updateSettingsStorefrontProduct"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/storefront/robotstxt": {
    /**
     * Get Robots.txt Settings
     * @description Returns Robots.txt settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsRobotsTxt"];
    /**
     * Update Robots.txt Settings
     * @description Updates Robots.txt settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations["updateSettingsRobotsTxt"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/storefront/search": {
    /**
     * Get Storefront Search Settings
     * @description Returns search settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsStorefrontSearch"];
    /**
     * Update Storefront Search Settings
     * @description Updates search settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations["updateSettingsStorefrontSearch"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/storefront/security": {
    /**
     * Get Storefront Security Settings
     * @description Returns security settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsStorefrontSecurity"];
    /**
     * Update Storefront Security Settings
     * @description Updates security settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations["updateSettingsStorefrontSecurity"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/storefront/seo": {
    /**
     * Get Storefront SEO Settings
     * @description Returns SEO settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsStorefrontSeo"];
    /**
     * Update Storefront SEO Settings
     * @description Updates SEO settings.
     *
     *  - You can use `channel_id` as a query parameter to update channel-specific settings. If omitted, you will only interact with the global settings.
     *
     *  - You can use `channel_id` in the request body of a headless channel of this endpoint to control the `www_redirect` settings for the headless channel's unique checkout URL.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from a global level.
     */
    put: operations["updateSettingsStorefrontSeo"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/storefront/status": {
    /**
     * Get Storefront Status
     * @description Returns storefront status-related settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    get: operations["getSettingsStorefrontStatus"];
    /**
     * Update Storefront Status
     * @description Updates storefront status-related settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    put: operations["updateSettingsStorefrontStatus"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/inventory": {
    /**
     * Get Inventory Settings
     * @description Get Inventory Settings
     */
    get: operations["getSettingsInventory"];
    /**
     * Update Inventory Settings
     * @description Update inventory settings
     */
    put: operations["updateSettingsInventory"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/settings/store/units-of-measurement": {
    /**
     * Get Units of Measurement Settings
     * @description Get settings for [units of measurements](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#physical).
     */
    get: operations["getSettingsMeasurementUnits"];
    /**
     * Update Units of Measurement Settings
     * @description Update settings for [units of measurements](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#physical).
     *
     * The endpoint does not support partial updates. Provide all fields to update global or channel-level settings.
     *
     * Create channel-level settings, or overrides for a channel, using the `channel_id`  query parameter.
     *
     * To delete overrides for a channel, supply `null` as a value for all fields. A channel then inherits global values.
     *
     * The endpoint does not support 'null' as a value for global-level settings.
     */
    put: operations["updateSettingsMeasurementUnits"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * AddressTypeEnumValues
     * @description Only supports manipulation on a global level.
     * @default Home Office
     * @enum {string}
     */
    AddressTypeEnumValues: "Home Office" | "Commercial Office" | "Retail" | "Warehouse";
    AnalyticsProvider: {
      /** @description Web Analytics Provider ID. */
      id?: number;
      /** @description Channels ID */
      channel_id?: number;
      /** @description Web Analytics Provider title. */
      name?: string;
      /** @description Web Analytics Provider code. */
      code?: string;
      /** @description Flag indicates if Web Analytics Provider is enabled or not. */
      enabled?: boolean;
      data_tag_enabled?: boolean;
      version?: number;
      api_secret?: string;
    };
    AnalyticsProviders: components["schemas"]["AnalyticsProvider"][];
    /** AvailableFilter */
    AvailableFilter: components["schemas"]["AvailableNormalFilter"] | components["schemas"]["AvailablePriceFilter"] | components["schemas"]["AvailableOtherFilter"];
    /** AvailableNormalFilter */
    AvailableNormalFilter: {
      id?: string;
      name?: string;
      product_count?: number;
      /** @enum {string} */
      type?: "category" | "brand" | "rating" | "product";
    };
    /** AvailableOtherFilter */
    AvailableOtherFilter: {
      id?: string;
      name?: string;
      /** @enum {string} */
      type?: "other";
    };
    /** AvailablePriceFilter */
    AvailablePriceFilter: {
      id?: string;
      name?: string;
      price_range_max?: number;
      price_range_min?: number;
      /** @enum {string} */
      type?: "price";
    };
    /** @description Error payload for the BigCommerce API. */
    BaseError: {
      instance?: string;
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    };
    CatalogSettings: {
      auto_approve_reviews?: boolean;
      enable_product_comparisons?: boolean;
    };
    /**
     * CategoryListingModeEnumValues
     * @enum {string}
     */
    CategoryListingModeEnumValues: "current_category_only" | "child_categories" | "child_categories_if_category_empty";
    /** ConfiguredFilter */
    ConfiguredFilter: components["schemas"]["EnabledProductFilter"] | components["schemas"]["EnabledPriceFilter"] | components["schemas"]["EnabledCategoryFilter"] | components["schemas"]["EnabledBrandFilter"] | components["schemas"]["EnabledRatingFilter"] | components["schemas"]["EnabledMiscFilter"];
    /** ConfiguredFilters */
    ConfiguredFilters: components["schemas"]["ConfiguredFilter"][];
    /**
     * ConfiguredFiltersOverride
     * @description A new set of enabled Product Filtering filters which should display in a particular context, such as on a particular Channel, or while viewing a particular Category. Array order indicates the display order on the storefront.
     */
    ConfiguredFiltersOverride: {
      context?: components["schemas"]["SearchFilterOverrideContextIdentifier"];
      data?: components["schemas"]["ConfiguredFilters"];
    };
    /**
     * ContentSortEnumValues
     * @default relevance
     * @enum {string}
     */
    ContentSortEnumValues: "relevance" | "alphaasc" | "alphadesc";
    /** Detailed Errors */
    DetailedErrors: {
      [key: string]: unknown;
    };
    /**
     * EnabledBrandFilter
     * @description A storefront filter for product brand
     */
    EnabledBrandFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      display_product_count?: boolean;
      /** @description The ID of the filter. */
      id?: string;
      is_enabled?: boolean;
      /** @enum {integer} */
      items_to_show?: 5 | 10 | 15;
      /** @enum {string} */
      sort_by?: "alpha" | "item_count";
      /** @enum {string} */
      type?: "brand";
    };
    /**
     * EnabledCategoryFilter
     * @description A storefront filter for product category
     */
    EnabledCategoryFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      display_product_count?: boolean;
      /** @description The ID of the filter. */
      id?: string;
      is_enabled?: boolean;
      /** @enum {integer} */
      items_to_show?: 5 | 10 | 15;
      /** @enum {string} */
      type?: "category";
    };
    /**
     * EnabledMiscFilter
     * @description Miscellaneous filters which appear as a group.
     */
    EnabledMiscFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      display_product_count?: boolean;
      /** @description The ID of the filter. */
      id?: string;
      is_enabled?: boolean;
      show_free_shipping_filter?: boolean;
      show_in_stock_filter?: boolean;
      show_is_featured_filter?: boolean;
      show_product_count?: boolean;
      /** @enum {string} */
      type?: "other";
    };
    /**
     * EnabledPriceFilter
     * @description A filter based on the product’s price, shown as a price range on the storefront.
     */
    EnabledPriceFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      /** @description The ID of the filter. */
      id?: string;
      is_enabled?: boolean;
      /** @enum {string} */
      type?: "price";
    };
    /**
     * EnabledProductFilter
     * @description A filter that uses product options and custom field data.
     */
    EnabledProductFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      display_product_count?: boolean;
      /** @description The ID of the filter. */
      id?: string;
      is_enabled?: boolean;
      /** @enum {integer} */
      items_to_show?: 5 | 10 | 15;
      /** @enum {string} */
      sort_by?: "alpha" | "option_values" | "item_count";
      /** @enum {string} */
      type?: "product";
    };
    /**
     * EnabledRatingFilter
     * @description A filter based on product review ratings.
     */
    EnabledRatingFilter: {
      collapsed_by_default?: boolean;
      display_name?: string;
      /** @description The ID of the filter. */
      id?: string;
      is_enabled?: boolean;
      /** @enum {string} */
      type?: "rating";
    };
    EnabledTransactionalEmails: {
      abandoned_cart_email?: boolean;
      account_details_changed_email?: boolean;
      combined_order_status_email?: boolean;
      create_account_email?: boolean;
      create_guest_account_email?: boolean;
      gift_certificate_email?: boolean;
      invoice_email?: boolean;
      order_message_notification_email?: boolean;
      product_review_email?: boolean;
      return_confirmation_email?: boolean;
      return_statuschange_email?: boolean;
    };
    /** @description A standard error object. */
    Error: {
      code: string;
      message?: string;
    };
    ErrorResponse: components["schemas"]["BaseError"] & {
      errors?: components["schemas"]["DetailedErrors"];
    };
    ErrorResponse400: {
      schema?: components["schemas"]["Error"];
    };
    ErrorResponse404: {
      schema?: components["schemas"]["Error"];
    };
    ErrorResponse409: {
      schema?: components["schemas"]["Error"];
    };
    ErrorResponse422: {
      schema?: components["schemas"]["Error"];
    };
    /**
     * HSTSMaxAgeEnumValues
     * @enum {string}
     */
    HSTSMaxAgeEnumValues: "zero_seconds" | "five_minutes" | "one_year";
    InventoryNotificationsSettings: {
      low_stock_notification_address?: string[];
      out_of_stock_notification_address?: string[];
    };
    InventorySettings: {
      /**
       * @description Describes storefront behavior when product is out of stock.
       * @enum {string}
       */
      product_out_of_stock_behavior?: "do_nothing" | "hide_product" | "hide_product_and_accessible" | "hide_product_and_redirect";
      /**
       * @description Describes storefront behavior when variant is out of stock.
       * @enum {string}
       */
      option_out_of_stock_behavior?: "do_nothing" | "hide_option" | "label_option";
      /**
       * @description Describes when stock levels are updated.
       *
       * Global settings apply when inventory changes through a [manual order](https://support.bigcommerce.com/s/article/Creating-a-Manual-Order?language=en_US). Settings for a channel apply when inventory changes through an order in a channel. These settings affect webhooks that trigger from order-related events, including [product](/docs/integrations/webhooks/events#products), [SKU](/docs/integrations/webhooks/events#skus), and [inventory](/docs/integrations/webhooks/events/inventory-location#inventory) webhooks.
       * @enum {string}
       */
      update_stock_behavior?: "order_placed" | "order_completed_or_shipped";
      /**
       * @description Describes whether stock levels automatically adjust when you edit an order.
       *
       * Global settings apply when inventory changes through a [manual order](https://support.bigcommerce.com/s/article/Creating-a-Manual-Order?language=en_US). Settings for a channel apply when inventory changes through an order in a channel. These settings affect webhooks that trigger from order-related events, including [product](/docs/integrations/webhooks/events#products), [SKU](/docs/integrations/webhooks/events#skus), and [inventory](/docs/integrations/webhooks/events/inventory-location#inventory) webhooks.
       */
      edit_order_stock_adjustment?: boolean;
      /**
       * @description Describes whether stock levels automatically adjust when you refund or cancel an order.
       *
       * Global settings apply when inventory changes through a [manual order](https://support.bigcommerce.com/s/article/Creating-a-Manual-Order?language=en_US). Settings for a channel apply when inventory changes through an order in a channel. These settings affect webhooks that trigger from order-related events, including [product](/docs/integrations/webhooks/events#products), [SKU](/docs/integrations/webhooks/events#skus), and [inventory](/docs/integrations/webhooks/events/inventory-location#inventory) webhooks.
       */
      refund_order_stock_adjustment?: boolean;
      /**
       * @description Describes whether a storefront displays stock levels.
       * @enum {string}
       */
      stock_level_display?: "dont_show" | "show" | "show_when_low";
      /**
       * @description Out of stock message displayed to shoppers.
       * @example Currently out of stock
       */
      default_out_of_stock_message?: string;
      /** @description Describes whether an option is hidden in product filtering. Applies when `option_out_of_stock_behavior` is set to `label_option`. */
      hide_in_product_filtering?: boolean;
      /**
       * @description Describes whether pre-order stock levels are shown.
       * @default false
       * @example true
       */
      show_pre_order_stock_levels?: boolean;
      /**
       * @description Describes whether out-of-stock messages are shown on product listing pages.
       * @default false
       * @example true
       */
      show_out_of_stock_message?: boolean;
    };
    /** @description The basic locale settings for a store, used to give shopper information about languages, countries, etc. */
    Locale: {
      /**
       * @default en
       * @example en, en-us
       */
      default_shopper_language: string;
      /**
       * @description Determines whether to display the storefront content in the shopperʼs browser language or the shopperʼs selected default language.
       *
       * Available values:
       * * `browser` - language updates automatically based on the shopper browser language. Multiple languages are supported.
       * * `default_shopper_language` - content is displayed in a single language based on the set `default_shopper_language`. Only the selected language is supported.
       * @default default_shopper_language
       * @example default_shopper_language
       * @enum {string}
       */
      shopper_language_selection_method?: "browser" | "default_shopper_language";
      /** @default United States */
      store_country?: string;
    };
    LogoSettings: {
      favicon_url?: string;
      logo_image_url?: string;
      logo_text?: string;
      /** @enum {string} */
      type?: "image" | "text";
    };
    LogoSettingsUpdate: {
      logo_text?: string;
      /** @enum {string} */
      type?: "image" | "text";
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    MetaOpen: {
      [key: string]: unknown;
    };
    MetaPaginationObject: {
      pagination?: {
        /** @example 5 */
        count?: number;
        /** @example 1 */
        current_page?: number;
        links?: {
          /** @example ?limit=5&page=1 */
          current?: string;
          /** @example ?limit=5&page=2 */
          next?: string;
        };
        /** @example 5 */
        per_page?: number;
        /** @example 246 */
        total?: number;
        /** @example 50 */
        total_pages?: number;
      };
    };
    /**
     * ProductSortEnumValues
     * @description The available sorts for PLP pages.
     * @default bestselling
     * @enum {string}
     */
    ProductSortEnumValues: "featured" | "bestselling" | "newest" | "alphaasc" | "alphadesc" | "pricedesc" | "priceasc" | "avgcustomerreview" | "relevance";
    RobotsTxtSettings: {
      robots_txt_ssl?: string;
    };
    SEOSettings: {
      meta_description?: string;
      meta_keywords?: string;
      page_title?: string;
      /** @enum {string} */
      www_redirect?: "www" | "no-www" | "none";
    };
    /** ContextIdentifier */
    SearchFilterOverrideContextIdentifier: {
      category_id?: number;
      channel_id?: number;
    };
    /**
     * Store Profile
     * @description The basic profile settings for a store, used to give the shopper information about the business from which they are purchasing.
     */
    StoreProfile: {
      store_address?: string;
      store_address_type?: components["schemas"]["AddressTypeEnumValues"];
      store_email?: string;
      store_name?: string;
      store_phone?: string;
    };
    StorefrontCategorySettings: {
      category_tree_depth?: number;
      default_product_sort?: components["schemas"]["ProductSortEnumValues"];
      listing_mode?: components["schemas"]["CategoryListingModeEnumValues"];
    };
    /** StorefrontProductSettings */
    StorefrontProductSettings: {
      /**
       * @description Determines the visibility of the product price.
       *
       * @example true
       */
      show_product_price?: boolean;
      /**
       * @description Determines the visibility of the product SKU.
       *
       * @example true
       */
      show_product_sku?: boolean;
      /**
       * @description Determines the visibility of the productʼs weight.
       *
       * @example false
       */
      show_product_weight?: boolean;
      /**
       * @description Determines the visibility of the productʼs brand.
       *
       * @example true
       */
      show_product_brand?: boolean;
      /**
       * @description Determines the visibility of the productʼs shipping option.
       *
       * @example false
       */
      show_product_shipping?: boolean;
      /**
       * @description Determines the visibility of the productʼs rating.
       *
       * @example true
       */
      show_product_rating?: boolean;
      /**
       * @description Determines the visibility of the Add to Cart link.
       *
       * @example true
       */
      show_add_to_cart_link?: boolean;
      /**
       * @description The productʼs pre-order message. If undefined, the message defaults to the storewide setting.
       *
       * @example Preorder message
       */
      default_preorder_message?: string;
      /**
       * @example show_one
       * @enum {string}
       */
      show_breadcrumbs_product_pages?: "show_one" | "show_none";
      /**
       * @description Determines the visibility of the Add to Cart quantity setting.
       *
       * @example true
       */
      show_add_to_cart_qty_box?: boolean;
      /**
       * @description Determines the visibility of the Add to Wishlist setting.
       *
       * @example true
       */
      show_add_to_wishlist?: boolean;
      /**
       * @description Determines the visibility of the price.
       *
       * @example false
       */
      hide_price_from_guests?: boolean;
    };
    StorefrontSearchSettings: {
      content_product_sort: components["schemas"]["ContentSortEnumValues"];
      default_product_sort: components["schemas"]["ProductSortEnumValues"];
      /** @description Controls whether Product Filtering feature is active on the storefront. Only supports manipulation on a global level. */
      product_filtering_enabled: boolean;
      search_suggest: boolean;
    };
    /** StorefrontSecuritySettings */
    StorefrontSecuritySettings: {
      csp_header?: {
        enabled?: boolean;
        header_value?: string;
      };
      hsts?: {
        enabled?: boolean;
        include_preload?: boolean;
        include_subdomains?: boolean;
        max_age?: components["schemas"]["HSTSMaxAgeEnumValues"];
      };
      sitewide_https_enabled?: boolean;
      x_frame_options_header?: {
        allowed_url?: string;
        enabled?: boolean;
        /** @enum {string} */
        setting?: "deny" | "same_origin" | "allow_from_url";
      };
    };
    StorefrontStatus: {
      down_for_maintenance_message?: string;
      prelaunch_message?: string;
      /** @description A read-only value representing the auto-generated storefront password. */
      prelaunch_password?: string;
    };
    MeasurementUnitsSettings: {
      /**
       * @example Ounces
       * @enum {string}
       */
      weight_measurement?: "LBS" | "Ounces" | "KGS" | "Grams" | "Tonnes";
      /**
       * @example Inches
       * @enum {string}
       */
      length_measurement?: "Inches" | "Centimeters";
      /** @example . */
      decimal_token?: string;
      /** @example , */
      thousands_token?: string;
      /** @example 2 */
      decimal_places?: number;
      /**
       * @example depth
       * @enum {string}
       */
      factoring_dimension?: "depth" | "height" | "width";
    };
  };
  responses: {
    /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
    "200-storefront-product-settings": {
      content: {
        "application/json": {
          data?: components["schemas"]["StorefrontProductSettings"];
          meta?: components["schemas"]["MetaOpen"];
        };
      };
    };
    /** @description `422 Unprocessable Entity` Provided settings could not be applied for some reason - detailed errors in the response. */
    "422ErrorResp": {
      content: {
        "application/json": {
          errors?: {
            /** @example Incorrect value [current__only], it should match one of: current_category_only,child_categories_if_category_empty,child_categories; Incorrect value [besling], it should match one of: featured, newest, bestselling, alphaasc, alphadesc, avgcustomerreview, priceasc, pricedesc, relevance */
            ""?: string;
          };
          /** @example 422 */
          status?: number;
          /** @example JSON data is missing or invalid */
          title?: string;
          /** @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes */
          type?: string;
        };
      };
    };
  };
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
    ChannelIdParam?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Web Analytics Providers
   * @description Returns a list of web analytics providers.
   */
  getAnalyticsProviders: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["AnalyticsProviders"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get a Web Analytics Provider
   * @description Returns a single web analytics provider data for a default channel.
   */
  getAnalyticsProvider: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description Web Analytics Provider ID. */
        id: number;
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["AnalyticsProvider"];
        };
      };
      /** @description Bad request. Authentication Required. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse400"];
        };
      };
      /** @description The requested resource was not found. Please specify valid Web Analytics Provider ID. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
    };
  };
  /**
   * Update a Web Analytics Provider
   * @description Updates a single web analytics provider data for a default channel.
   */
  updateAnalyticsProvider: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        /** @description Web Analytics Provider ID. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          code?: string;
          data_tag_enabled?: boolean;
          enabled?: boolean;
          is_oauth_connected?: unknown;
          name?: string;
          version?: number;
        };
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["AnalyticsProvider"];
        };
      };
      /** @description Bad request. Authentication Required. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse400"];
        };
      };
      /** @description The requested resource was not found. Please specify valid Web Analytics Provider ID. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse404"];
        };
      };
      /** @description Web Analytics Provider was in conflict with another Web Analytics Provider. This can be caused by duplicated unique values (such as ID). */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse409"];
        };
      };
      /** @description Web Analytics Provider data was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse422"];
        };
      };
    };
  };
  /**
   * Get Catalog Settings
   * @description Returns catalog settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsCatalog: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["CatalogSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Catalog Settings
   * @description Updates catalog settings.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  updateSettingsCatalog: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    /** @description null set for a particular field removes override on a channel level and means inheritance from a global level */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CatalogSettings"];
      };
    };
    responses: {
      /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["CatalogSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Transactional Email Settings
   * @description Get global transactional email settings or channel specific overrides by `channel_id`.
   */
  getSettingsEmailStatuses: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["EnabledTransactionalEmails"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Transactional Email Settings
   * @description Update global transactional email settings or create channel specific overrides by `channel_id`.
   */
  updateSettingsEmailStatuses: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EnabledTransactionalEmails"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["EnabledTransactionalEmails"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Create Favicon Image
   * @description Uploads an image file to use as the storefront favicon. Supported MIME types include GIF, JPEG, and PNG.
   *
   *   - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *   - The uploaded image can be up to 10 MB. Larger files result in an error.
   */
  createSettingsFaviconImage: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          FaviconFile?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      204: {
        content: never;
      };
      /** @description Failed to save! */
      422: {
        content: never;
      };
    };
  };
  /**
   * Get Inventory Notifications Settings
   * @description Returns inventory notification settings.
   * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global settings only.
   */
  getSettingsInventoryNotifications: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["InventoryNotificationsSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Inventory Notifications Settings
   * @description Updates inventory notification settings.
   * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global settings only.
   * * Supplying `null` settings values per channel will delete overrides per given channel and values will be inherited from global level.
   * * Partial updates are not supported within the given endpoint. In order to delete overrides per channel, `null` should be supplied for all the settings within the given endpoint.
   */
  updateSettingsInventoryNotifications: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    /** @description null set for a particular field removes override on a channel level and means inheritance from a global level */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["InventoryNotificationsSettings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Store Logo Settings
   * @description Returns store logo settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsLogo: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["LogoSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Store Logo Settings
   * @description Updates the logo type and logo text for a textual logo. To upload new images, use the dedicated image POST endpoints.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  updateSettingsLogo: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LogoSettingsUpdate"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["LogoSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Create Logo Image
   * @description Uploads an image file to use as the storefront logo. Supported MIME types include GIF, JPEG, and PNG.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   */
  createSettingsLogoImage: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          LogoFile?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get Enabled Filters
   * @description Returns a list of enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. These filters will be used if a store does not have contextual overrides.
   */
  getSettingsEnabledSearchFilters: {
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ConfiguredFilters"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Enabled Filters
   * @description Updates enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters.
   */
  updateSettingsEnabledSearchFilters: {
    parameters: {
      header: {
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ConfiguredFilters"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ConfiguredFilters"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Available Filters
   * @description Returns a list of filters available to power [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings).
   */
  getSettingsAvailableFilters: {
    parameters: {
      query?: {
        /** @description Narrows the list of available filters based on channel ID. Only products currently assigned to the given Channel will be considered. */
        channel_id?: number;
        /** @description Narrows the list of available filters based on category ID. You can display settings to show products from the provided category, subcategories only, or both the category and its child categories. */
        category_id?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["AvailableFilter"][];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Contextual Filters
   * @description Returns a list of contextual filters enabled for a particular channel or category.
   *
   * **Usage Notes**
   *
   * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
   *
   * The order of the returned filters will match the sort order of the filters on the storefront.
   */
  getSettingsFiltersContexts: {
    parameters: {
      query?: {
        /** @description Only return contextual overrides related to a particular Channel. */
        channel_id?: number;
        /** @description Only return contextual overrides related to a particular Category. */
        category_id?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ConfiguredFiltersOverride"][];
            meta?: components["schemas"]["MetaPaginationObject"];
          };
        };
      };
    };
  };
  /**
   * Upsert Contextual Filters
   * @description Upserts contextual filters for a particular channel or category.
   *
   * **Usage Notes**
   *
   * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
   *
   * You can change the order of the filters on the live site by changing the order of the filters you send.
   */
  upsertSettingsFiltersContexts: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ConfiguredFiltersOverride"][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ConfiguredFiltersOverride"][];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Locale Settings
   * @description Returns global locale settings.
   *
   * For stores with Catalyst channels, the `shopper_language_selection_method` field is deprecated. Using this endpoint on those stores will return a warning about the deprecation. For additional information, refer to [Locale Configuration](/docs/store-operations/settings/locales).
   */
  getSettingsLocale: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Locale"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Locale Settings
   * @description Updates global locale settings.
   *
   * For stores with Catalyst channels, the `shopper_language_selection_method` field is deprecated. Using this endpoint on those stores will return a warning about the deprecation. For additional information, refer to [Locale Configuration](/docs/store-operations/settings/locales).
   */
  updateSettingsLocale: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Locale"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Locale"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
      /** @description Provided settings could not be applied for some reason - detailed errors in the response. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Store Profile Settings
   * @description Returns store profile settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsStoreProfile: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StoreProfile"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Store Profile Settings
   * @description Updates store profile settings.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  updateSettingsStoreProfile: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StoreProfile"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StoreProfile"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
      /** @description Provided settings could not be applied for some reason - detailed errors in the response. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Storefront Category Settings
   * @description Returns category settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsStorefrontCategory: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StorefrontCategorySettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Storefront Category Settings
   * @description Updates category settings.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  updateSettingsStorefrontCategory: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorefrontCategorySettings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StorefrontCategorySettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
      422: components["responses"]["422ErrorResp"];
    };
  };
  /**
   * Get Storefront Product Settings
   * @description Returns product settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsStorefrontProduct: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["200-storefront-product-settings"];
    };
  };
  /**
   * Update Storefront Product Settings
   * @description Updates product settings.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  updateSettingsStorefrontProduct: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorefrontProductSettings"];
      };
    };
    responses: {
      200: components["responses"]["200-storefront-product-settings"];
      422: components["responses"]["422ErrorResp"];
    };
  };
  /**
   * Get Robots.txt Settings
   * @description Returns Robots.txt settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsRobotsTxt: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["RobotsTxtSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Robots.txt Settings
   * @description Updates Robots.txt settings.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  updateSettingsRobotsTxt: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RobotsTxtSettings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["RobotsTxtSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Storefront Search Settings
   * @description Returns search settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsStorefrontSearch: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StorefrontSearchSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Storefront Search Settings
   * @description Updates search settings.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  updateSettingsStorefrontSearch: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorefrontSearchSettings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StorefrontSearchSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Storefront Security Settings
   * @description Returns security settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsStorefrontSecurity: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StorefrontSecuritySettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Storefront Security Settings
   * @description Updates security settings.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  updateSettingsStorefrontSecurity: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorefrontSecuritySettings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StorefrontSecuritySettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Storefront SEO Settings
   * @description Returns SEO settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsStorefrontSeo: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["SEOSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Storefront SEO Settings
   * @description Updates SEO settings.
   *
   *  - You can use `channel_id` as a query parameter to update channel-specific settings. If omitted, you will only interact with the global settings.
   *
   *  - You can use `channel_id` in the request body of a headless channel of this endpoint to control the `www_redirect` settings for the headless channel's unique checkout URL.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from a global level.
   */
  updateSettingsStorefrontSeo: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SEOSettings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["SEOSettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
      422: components["responses"]["422ErrorResp"];
    };
  };
  /**
   * Get Storefront Status
   * @description Returns storefront status-related settings.
   *
   *  - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
   */
  getSettingsStorefrontStatus: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StorefrontStatus"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Update Storefront Status
   * @description Updates storefront status-related settings.
   *
   *  - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
   *
   *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
   */
  updateSettingsStorefrontStatus: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StorefrontStatus"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["StorefrontStatus"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Inventory Settings
   * @description Get Inventory Settings
   */
  getSettingsInventory: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["InventorySettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
      /** @description Provided settings could not be applied for some reason - detailed errors in the response. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Inventory Settings
   * @description Update inventory settings
   */
  updateSettingsInventory: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    /** @description null set for a particular field removes override on a channel level and means inheritance from a global level */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["InventorySettings"];
      };
    };
    responses: {
      /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["InventorySettings"];
            meta?: components["schemas"]["MetaOpen"];
          };
        };
      };
    };
  };
  /**
   * Get Units of Measurement Settings
   * @description Get settings for [units of measurements](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#physical).
   */
  getSettingsMeasurementUnits: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
    };
    responses: {
      /** @description OK. When you request channel-level settings, `null` indicates that a channel does not have overrides. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MeasurementUnitsSettings"];
            meta?: {
              [key: string]: unknown;
            };
          };
        };
      };
      /** @description The provided settings could not be applied. See detailed errors in the response. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Units of Measurement Settings
   * @description Update settings for [units of measurements](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#physical).
   *
   * The endpoint does not support partial updates. Provide all fields to update global or channel-level settings.
   *
   * Create channel-level settings, or overrides for a channel, using the `channel_id`  query parameter.
   *
   * To delete overrides for a channel, supply `null` as a value for all fields. A channel then inherits global values.
   *
   * The endpoint does not support 'null' as a value for global-level settings.
   */
  updateSettingsMeasurementUnits: {
    parameters: {
      query?: {
        channel_id?: components["parameters"]["ChannelIdParam"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MeasurementUnitsSettings"];
      };
    };
    responses: {
      /** @description OK. When you request channel-level settings, `null` indicates that a channel does not have overrides. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MeasurementUnitsSettings"];
            meta?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
}
