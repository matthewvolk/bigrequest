// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/store/metafields": {
    /**
     * Get all store metafields
     * @description Get all store metafield
     */
    get: operations["getStoreMetafields"];
    /**
     * Update multiple metafields
     * @description Update multiple metafields
     */
    put: operations["UpdateStoreMetafields"];
    /**
     * Create multiple metafields
     * @description Create multiple store metafields
     */
    post: operations["createStoreMetafields"];
    /**
     * Delete multiple metafields
     * @description Delete all store metafields
     */
    delete: operations["DeleteStoreMetafields"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
      [key: string]: unknown;
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_Batch: {
      data?: components["schemas"]["Metafield"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_Batch_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionDeleteResponseSuccess: {
      /**
       * @example [
       *   123,
       *   124,
       *   125
       * ]
       */
      data?: number[];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_DELETE: {
      /**
       * @example [
       *   123
       * ]
       */
      data?: number[];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Allows app partners to write custom data to various resources in the API. */
    Metafield: components["schemas"]["MetafieldBase"] & {
      /** @description The unique identifier for the metafield. */
      id?: string;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_modified?: string;
      /**
       * @description Client ID for the metafieldʼs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    };
    /** @description Common Metafield properties. */
    MetafieldBase: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example order
       */
      description?: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example cart
       * @enum {string}
       */
      resource_type?: "brand" | "product" | "variant" | "category" | "cart";
      /**
       * @description The unique identifier for the resource with which the metafield is associated.
       *
       * @example 0
       */
      resource_id?: string;
    };
    /**
     * @description Common Metafield properties.
     *
     * @example {
     *   "permission_set": "app_only",
     *   "namespace": "Sales Department",
     *   "key": "Status",
     *   "value": "upcoming",
     *   "description": "Company sales"
     * }
     */
    MetafieldBase_Post: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description |
       * |:-|:-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Bob
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionPartialSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 1
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 2
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 3
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 0
       */
      failed?: number;
    };
    /** @description Error response payload for the BigCommerce API. */
    Error: {
      /**
       * @description The HTTP status code for the error.
       *
       * @example 422
       */
      status?: number;
      /**
       * @description The error title.
       *
       * @example Bulk operation has failed
       */
      title?: string;
      /**
       * @description The error type.
       *
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      errors?: components["schemas"]["ErrorDetail"];
    };
    /**
     * @description Error detail response payload for the BigCommerce API.
     *
     * @example {
     *   "1": "Unauthorized to delete",
     *   "2": "Metafield does not exist"
     * }
     */
    ErrorDetail: {
      [key: string]: unknown;
    };
  };
  responses: never;
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    ContentType: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam?: number;
    /** @description 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.' */
    date_created_min?: string;
    /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.' */
    date_created_max?: string;
    /** @description 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.' */
    date_modified_max?: string;
    /** @description 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.' */
    date_modified_min?: string;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam?: "asc" | "desc";
    /** @description Filter based on a metafieldʼs key. */
    MetafieldKeyParam?: string;
    /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
    MetafieldKeyInParam?: string[];
    /** @description Filter based on a metafieldʼs namespaces. */
    MetafieldNamespaceParam?: string;
    /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter */
    MetafieldNamespaceInParam?: string[];
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    IncludeFieldsParamMetafields?: ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all store metafields
   * @description Get all store metafield
   */
  getStoreMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        "key:in"?: components["parameters"]["MetafieldKeyInParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
        direction?: components["parameters"]["DirectionParam"];
        include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
        "date_modified:min"?: components["parameters"]["date_modified_min"];
        "date_modified:max"?: components["parameters"]["date_modified_max"];
        "date_created:min"?: components["parameters"]["date_created_min"];
        "date_created:max"?: components["parameters"]["date_created_max"];
      };
    };
    responses: {
      /** @description List of `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch"];
        };
      };
    };
  };
  /**
   * Update multiple metafields
   * @description Update multiple metafields
   */
  UpdateStoreMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            id: string;
          })[];
      };
    };
    responses: {
      /** @description Metafields updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Create multiple metafields
   * @description Create multiple store metafields
   */
  createStoreMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The store ID with which the metafield is associated.
             *
             * @example 42
             */
            resource_id: string;
          })[];
      };
    };
    responses: {
      /** @description Metafields created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Delete multiple metafields
   * @description Delete all store metafields
   */
  DeleteStoreMetafields: {
    /** @description List of metafield `id`s. */
    requestBody?: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Metafields deleted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields deletion with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
        };
      };
    };
  };
}
