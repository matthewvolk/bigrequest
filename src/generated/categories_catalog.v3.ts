// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/catalog/categories": {
    /**
     * Get All Categories
     * @deprecated
     * @description When possible, use the [Catalog Trees - Get all categories](/docs/rest-catalog/category-trees/categories#get-all-categories) endpoint instead.
     *
     * Returns a list of *Categories*. Optional filter parameters can be passed in.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    get: operations["getCategories"];
    /**
     * Create a Category
     * @deprecated
     * @description When possible, use the [Category Trees - Create categories](/docs/rest-catalog/category-trees/categories#create-categories) endpoint instead.
     *
     * Creates a *Category*.
     *
     * Use this endpoint when an API only works with categories of a default BigCommerce storefront (`channel_id=1`).
     *
     * Use the [Create categories](/docs/rest-catalog/category-trees/categories#create-categories) endpoint when an API works with categories across different category trees that belong to different storefront channels.
     *
     * **Required Fields**:
     * - `parent_id`:
     * 	- To create a child category, set the `parent_id` to the parent category.
     * 	- To create a top level category, set the `parent_id` to `0`.
     * - `name`
     *
     * **Read-Only Fields**:
     * - `id`
     *
     * **Limits**:
     * - 16,000 categories per store limit.
     * - 1,000 categories per product limit.
     * - 50 characters category name length.
     * - 8 levels of category depth limit.
     * - 65,642 characters category description length limit.
     *
     *  **Note:**
     *  The default rate limit for this endpoint is 40 concurrent requests.
     */
    post: operations["createCategory"];
    /**
     * Delete Categories
     * @deprecated
     * @description When possible, use the [Category Trees - Delete categories](/docs/rest-catalog/category-trees/categories#delete-categories) endpoint instead.
     *
     * Deletes *Category* objects. At least one filter parameter is required to perform the `DELETE` operation.
     *
     * **Usage Notes**
     *
     * - Sending a `DELETE`request without specifying a filter parameter will result in a `422` error.
     * - Sending a `DELETE` request for a category that contains products will result in a `422` error. Move products to a new category by sending a `PUT` request to the `/catalog/products/{product_id}` endpoint before deleting a category.
     */
    delete: operations["deleteCategories"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/catalog/categories/{category_id}": {
    /**
     * Get a Category
     * @deprecated
     * @description When possible, use the [Catalog Trees - Get all categories](/docs/rest-catalog/category-trees/categories#get-all-categories) endpoint instead. You can provide a category identifier using query parameters to retrieve a single category.
     *
     * Returns a single *Category*. Optional parameters can be passed in.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    get: operations["getCategory"];
    /**
     * Update a Category
     * @deprecated
     * @description When possible, use the [Catalog Trees - Update categories](/docs/rest-catalog/category-trees/categories#update-categories) endpoint instead.
     *
     * Updates a *Category*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * - id
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    put: operations["updateCategory"];
    /**
     * Delete a Category
     * @deprecated
     * @description When possible, use the [Category Trees - Delete categories](/docs/rest-catalog/category-trees/categories#delete-categories) endpoint instead. You can provide a category identifier using query parameters to delete a single category.
     *
     * Deletes a *Category*.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    delete: operations["deleteCategory"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
  };
  "/catalog/categories/{category_id}/metafields": {
    /**
     * Get All Category Metafields
     * @description Returns a list of *Metafields* on a *Category*. Optional filter parameters can be passed in.
     */
    get: operations["getCategoryMetafields"];
    /**
     * Create a Category Metafield
     * @description Creates a *Category Metafield*.
     *
     * **Required Fields:**
     * - permission_set
     * - namespace
     * - key
     * - value
     *
     * **Read-Only Fields**
     * - id
     *
     * **Note:** The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits (Help Center)](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    post: operations["createCategoryMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
  };
  "/catalog/categories/{category_id}/metafields/{metafield_id}": {
    /**
     * Get a Category Metafield
     * @description Returns a single *Category Metafield*. Optional parameters can be passed in.
     */
    get: operations["getCategoryMetafield"];
    /**
     * Update a Category Metafield
     * @description Updates a *Category Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     */
    put: operations["updateCategoryMetafield"];
    /**
     * Delete a Category Metafield
     * @description Deletes a *Category Metafield*.
     */
    delete: operations["deleteCategoryMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
  };
  "/catalog/categories/{category_id}/image": {
    /**
     * Create a Category Image
     * @description Create a *Category Image*.
     *
     *  **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     *
     * Only one image at a time can be created.
     * Limit image size to 1MB.
     * To update a *Category Image*, use the [Update categories](/docs/rest-catalog/category-trees/categories#update-categories) endpoint and an `image_url`.
     */
    post: operations["createCategoryImage"];
    /**
     * Delete a Category Image
     * @description Deletes a *Category Image*.
     */
    delete: operations["deleteCategoryImage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
  };
  "/catalog/categories/{category_id}/products/sort-order": {
    /**
     * Get Product Sort Order
     * @description Returns a list of products and their sort order for a specific category.
     *
     * **Usage Notes**
     * * Data pairs are displayed in ascending order based on products' `sort_order` values.
     * * `null` values are allowed for products without specified `sort_order` values.
     * * Products with `sort_order` value of `null` will be displayed after products with valid numerical values.
     * * The priorities for determining product sort order on a storefront are the following:
     *   - Priority 1: Manually specified sort order on Category Level (API).
     *   - Priority 2: Manually specified sort order on Product (Global) Level (UI/API).
     *   - Priority 3: Default sorting by Product ID (newly added products go first) (UI/API).
     */
    get: operations["getCategorySortOrders"];
    /**
     * Update Product Sort Order
     * @description Updates sort order of products within a specific category.
     */
    put: operations["updateCategorySortOrders"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
  };
  "/catalog/categories/metafields": {
    /**
     * Get All Metafields
     * @description Get all category metafields.
     */
    get: operations["getCategoriesMetafields"];
    /**
     * Update multiple Metafields
     * @description Create multiple metafields.
     */
    put: operations["updateCategoriesMetafields"];
    /**
     * Create multiple Metafields
     * @description Create multiple metafields.
     */
    post: operations["createCategoriesMetafields"];
    /**
     * Delete All Metafields
     * @description Delete all category metafields.
     */
    delete: operations["deleteCategoriesMetafields"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * category_Full
     * @description Common Category object properties.
     */
    category_Full: {
      /**
       * @description Unique ID of the *Category*. Increments sequentially.
       * Read-Only.
       */
      id?: number;
      /**
       * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
       * Required in a POST if creating a child category.
       * @example 2
       */
      parent_id: number;
      /**
       * @description The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
       * Required in a POST.
       * @example Bath
       */
      name: string;
      /**
       * @description The product description, which can include HTML formatting.
       *
       * @example <p>We offer a wide variety of products perfect for relaxing</p>
       */
      description?: string;
      /**
       * @description Number of views the category has on the storefront.
       *
       * @example 1050
       */
      views?: number;
      /**
       * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
       *
       * @example 3
       */
      sort_order?: number;
      /**
       * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
       *
       * @example Bath
       */
      page_title?: string;
      /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
      search_keywords?: string;
      /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
      meta_keywords?: string[];
      /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used. */
      meta_description?: string;
      /**
       * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
       *
       * @example category.html
       */
      layout_file?: string;
      /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
      is_visible?: boolean;
      /**
       * @description Determines how the products are sorted on category page load.
       *
       * @enum {string}
       */
      default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
      /**
       * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
       *
       * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
       */
      image_url?: string;
      custom_url?: components["schemas"]["customUrl_Full"];
    };
    /**
     * metafield_Base
     * @description Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits (Help Center)](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    metafield_Base: {
      /**
       * @description The name of the field, for example: `location_id`, `color`. Required for POST.
       *
       * @example Location
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`. Required for POST.
       *
       * @example 4HG
       */
      value: string;
      /**
       * @description Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
       *
       * @example Warehouse Locations
       */
      namespace: string;
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description
       * |-|-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Description for the metafields.
       *
       * @example Location in the warehouse
       */
      description?: string;
    };
    /**
     * customUrl_Full
     * @description The custom URL for the product on the storefront.
     */
    customUrl_Full: {
      /** @description Product URL on the storefront. */
      url?: string;
      /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
      is_customized?: boolean;
    };
    /**
     * metaCollection_Full
     * @description Data about the response, including pagination and collection totals.
     */
    metaCollection_Full: {
      pagination?: components["schemas"]["pagination_Full"];
    };
    /**
     * pagination_Full
     * @description Data about the response, including pagination and collection totals.
     */
    pagination_Full: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    metaEmpty_Full: {
      [key: string]: unknown;
    };
    /**
     * error_Base
     * @description Error payload for the BigCommerce API.
     */
    error_Base: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /** metafield_Full */
    metafield_Full: {
      /**
       * @description Unique ID of the *Metafield*. Read-Only.
       * @example 6
       */
      id?: number;
    } & components["schemas"]["metafield_Base"] & ({
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example product
       * @enum {string}
       */
      resource_type?: "category" | "brand" | "product" | "variant";
      /**
       * @description The ID of the resource with which the metafield is associated.
       *
       * @example 111
       */
      resource_id?: number;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation. Read-Only.
       *
       * @example 2018-05-07T20:14:17+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated. Read-Only.
       *
       * @example 2018-05-07T20:14:17+00:00
       */
      date_modified?: string;
    });
    /**
     * productSortOrder
     * @description The relative priority of the product among other products inside the category.
     */
    productSortOrder: {
      /**
       * @description The ID of the associated product.
       * @example 99
       */
      product_id: number;
      /** @example 4 */
      sort_order: number;
    };
    /** Category */
    Category: components["schemas"]["id"] & components["schemas"]["parent_id"] & components["schemas"]["name"] & components["schemas"]["description"] & components["schemas"]["views"] & components["schemas"]["sort_order"] & components["schemas"]["page_title"] & components["schemas"]["meta_keywords"] & components["schemas"]["meta_description"] & components["schemas"]["layout_file"] & components["schemas"]["image_url"] & components["schemas"]["is_visible"] & components["schemas"]["search_keywords"] & components["schemas"]["default_product_sort"] & {
      custom_url?: components["schemas"]["Url"];
    };
    Url: {
      url?: string;
      is_customized?: boolean;
    };
    /** default_product_sort */
    default_product_sort: {
      /**
       * @description Determines how the products are sorted on category page load.
       *
       * @enum {string}
       */
      default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
    };
    /** name */
    name: {
      /**
       * @description The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
       * Required in a POST.
       * @example Bath
       */
      name?: string;
    };
    /** description */
    description: {
      /**
       * @description The product description, which can include HTML formatting.
       *
       * @example <p>We offer a wide variety of products perfect for relaxing</p>
       */
      description?: string;
    };
    /** views */
    views: {
      /**
       * @description Number of views the category has on the storefront.
       *
       * @example 1050
       */
      views?: number;
    };
    /** sort_order */
    sort_order: {
      /**
       * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
       *
       * @example 3
       */
      sort_order?: number;
    };
    /** page_title */
    page_title: {
      /**
       * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
       *
       * @example Bath
       */
      page_title?: string;
    };
    /** search_keywords */
    search_keywords: {
      /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
      search_keywords?: string;
    };
    /** meta_keywords */
    meta_keywords: {
      /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
      meta_keywords?: string[];
    };
    /** layout_file */
    layout_file: {
      /**
       * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
       *
       * @example category.html
       */
      layout_file?: string;
    };
    /** is_visible */
    is_visible: {
      /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
      is_visible?: boolean;
    };
    /** image_url */
    image_url: {
      /**
       * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
       *
       * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
       */
      image_url?: string;
    };
    /** meta_description */
    meta_description: {
      /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used. */
      meta_description?: string;
    };
    /** id */
    id: {
      /**
       * @description Unique ID of the *Category*. Increments sequentially.
       * Read-Only.
       */
      id?: number;
    };
    /** parent_id */
    parent_id: {
      /**
       * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
       * Required in a POST if creating a child category.
       * @example 2
       */
      parent_id?: number;
    };
    /** @description Common Metafield properties. */
    Metafield: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example order
       */
      description: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example cart
       * @enum {string}
       */
      resource_type: "brand" | "product" | "variant" | "category" | "cart" | "channel" | "location" | "order" | "customer";
      /**
       * @description The unique identifier for the resource with which the metafield is associated.
       *
       * @example 424242
       */
      resource_id: number;
      /** @description The unique identifier for the metafield. */
      id: number;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_created: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_modified: string;
      /**
       * @description Client ID for the metafieldʼs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse: {
      data?: components["schemas"]["Metafield"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_DELETE: {
      /**
       * @example [
       *   123
       * ]
       */
      data?: number[];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionDeleteResponseSuccess: {
      /**
       * @example [
       *   123,
       *   124,
       *   125
       * ]
       */
      data?: number[];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionPartialSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 1
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 2
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 3
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 0
       */
      failed?: number;
    };
    /**
     * @description Total number of items in the result set.
     *
     * @example 3
     */
    Total: number;
    /**
     * @description Total number of items that were successfully deleted.
     *
     * @example 1
     */
    Success: number;
    /**
     * @description Total number of items that failed to be deleted.
     *
     * @example 2
     */
    Failed: number;
    /** @description Error response payload for the BigCommerce API. */
    Error: {
      /**
       * @description The HTTP status code for the error.
       *
       * @example 422
       */
      status?: number;
      /**
       * @description The error title.
       *
       * @example Bulk operation has failed
       */
      title?: string;
      /**
       * @description The error type.
       *
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      errors?: components["schemas"]["ErrorDetail"];
    };
    /**
     * @description Error detail response payload for the BigCommerce API.
     *
     * @example {
     *   "1": "Unauthorized to delete",
     *   "2": "Metafield does not exist"
     * }
     */
    ErrorDetail: Record<string, never>;
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
      [key: string]: unknown;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Post: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Put: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
  };
  responses: {
    /** @description Multi-status. Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but saving the URL or inventory data has failed. */
    General207Status: {
      content: {
        "application/json": components["schemas"]["error_Base"];
      };
    };
  };
  parameters: {
    /** @description The ID of the `Category` to which the resource belongs. */
    CategoryIdParam: number;
    /** @description The ID of the `Metafield`. */
    MetafieldIdParam: number;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam?: number;
    /** @description Filter based on a metafieldʼs key. */
    MetafieldKeyParam?: string;
    /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
    MetafieldKeyInParam?: string[];
    /** @description Filter based on a metafieldʼs namespaces. */
    MetafieldNamespaceParam?: string;
    /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
    MetafieldNamespaceInParam?: string[];
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam?: "asc" | "desc";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Categories
   * @deprecated
   * @description When possible, use the [Catalog Trees - Get all categories](/docs/rest-catalog/category-trees/categories#get-all-categories) endpoint instead.
   *
   * Returns a list of *Categories*. Optional filter parameters can be passed in.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  getCategories: {
    parameters: {
      query?: {
        /** @description Filter items by ID. */
        id?: number;
        "id:in"?: number[];
        "id:not_in"?: number[];
        "id:min"?: number[];
        "id:max"?: number[];
        "id:greater"?: number[];
        "id:less"?: number[];
        /** @description Filter items by name. */
        name?: string;
        "name:like"?: string[];
        /** @description Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
        parent_id?: number;
        "parent_id:in"?: number[];
        "parent_id:min"?: number[];
        "parent_id:max"?: number[];
        "parent_id:greater"?: number[];
        "parent_id:less"?: number[];
        /** @description Filter items by page_title. */
        page_title?: string;
        "page_title:like"?: string[];
        /** @description Filter items by keywords. eg. new, towel, bath */
        keyword?: string;
        /** @description Filter items by if visible on the storefront. */
        is_visible?: boolean;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
        /**
         * @description Controls the sort order of the response, for example, `sort=name`.
         *
         * Allowed values:
         * - `name`: sort categories in alphabetical order by category name.
         * - `id`: sort in ascending order by category ID.
         * - `parent_id`: sort in ascending order by the ID of the parent category.
         * - `sort_order`: sort in ascending order by sort order value.
         */
        sort?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Category"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
    };
  };
  /**
   * Create a Category
   * @deprecated
   * @description When possible, use the [Category Trees - Create categories](/docs/rest-catalog/category-trees/categories#create-categories) endpoint instead.
   *
   * Creates a *Category*.
   *
   * Use this endpoint when an API only works with categories of a default BigCommerce storefront (`channel_id=1`).
   *
   * Use the [Create categories](/docs/rest-catalog/category-trees/categories#create-categories) endpoint when an API works with categories across different category trees that belong to different storefront channels.
   *
   * **Required Fields**:
   * - `parent_id`:
   * 	- To create a child category, set the `parent_id` to the parent category.
   * 	- To create a top level category, set the `parent_id` to `0`.
   * - `name`
   *
   * **Read-Only Fields**:
   * - `id`
   *
   * **Limits**:
   * - 16,000 categories per store limit.
   * - 1,000 categories per product limit.
   * - 50 characters category name length.
   * - 8 levels of category depth limit.
   * - 65,642 characters category description length limit.
   *
   *  **Note:**
   *  The default rate limit for this endpoint is 40 concurrent requests.
   */
  createCategory: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
           * Required in a POST if creating a child category.
           * @example 2
           */
          parent_id: number;
          /**
           * @description The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
           * Required in a POST.
           * @example Bath
           */
          name: string;
          /**
           * @description The product description, which can include HTML formatting.
           *
           * @example <p>We offer a wide variety of products perfect for relaxing</p>
           */
          description?: string;
          /**
           * @description Number of views the category has on the storefront.
           *
           * @example 1050
           */
          views?: number;
          /**
           * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
           *
           * @example 3
           */
          sort_order?: number;
          /**
           * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
           *
           * @example Bath
           */
          page_title?: string;
          /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
          search_keywords?: string;
          /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
          meta_keywords?: string[];
          /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used. */
          meta_description?: string;
          /**
           * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
           *
           * @example category.html
           */
          layout_file?: string;
          /** @description Flag to determine whether the category should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
          is_visible?: boolean;
          /**
           * @description Determines how the products are sorted on category page load.
           *
           * @enum {string}
           */
          default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
          /**
           * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Custom Url Category
           * @description The custom URL for the category on the storefront.
           */
          custom_url?: {
            /**
             * @description Category URL on the storefront.
             *
             * @example /shoes
             */
            url?: string;
            /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
            is_customized?: boolean;
          };
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["category_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          "application/json": components["schemas"]["error_Base"];
        };
      };
      /** @description The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete Categories
   * @deprecated
   * @description When possible, use the [Category Trees - Delete categories](/docs/rest-catalog/category-trees/categories#delete-categories) endpoint instead.
   *
   * Deletes *Category* objects. At least one filter parameter is required to perform the `DELETE` operation.
   *
   * **Usage Notes**
   *
   * - Sending a `DELETE`request without specifying a filter parameter will result in a `422` error.
   * - Sending a `DELETE` request for a category that contains products will result in a `422` error. Move products to a new category by sending a `PUT` request to the `/catalog/products/{product_id}` endpoint before deleting a category.
   */
  deleteCategories: {
    parameters: {
      query?: {
        /** @description Filter items by ID. */
        id?: number;
        "id:in"?: number[];
        "id:not_in"?: number[];
        "id:min"?: number[];
        "id:max"?: number[];
        "id:greater"?: number[];
        "id:less"?: number[];
        /** @description Filter items by name. */
        name?: string;
        /** @description Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. */
        parent_id?: number;
        /** @description Filter items by page_title. */
        page_title?: string;
        /** @description Filter items by keywords. eg. new, towel, bath */
        keyword?: string;
        /** @description Filter items by if visible on the storefront. */
        is_visible?: boolean;
        "name:like"?: string[];
        "parent_id:in"?: number[];
        "parent_id:min"?: number[];
        "parent_id:max"?: number[];
        "parent_id:greater"?: number[];
        "parent_id:less"?: number[];
        "page_title:like"?: string[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get a Category
   * @deprecated
   * @description When possible, use the [Catalog Trees - Get all categories](/docs/rest-catalog/category-trees/categories#get-all-categories) endpoint instead. You can provide a category identifier using query parameters to retrieve a single category.
   *
   * Returns a single *Category*. Optional parameters can be passed in.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  getCategory: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["category_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Category
   * @deprecated
   * @description When possible, use the [Catalog Trees - Update categories](/docs/rest-catalog/category-trees/categories#update-categories) endpoint instead.
   *
   * Updates a *Category*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * - id
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  updateCategory: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Unique ID of the *Category*. Increments sequentially.
           * Read-Only.
           */
          id?: number;
          /**
           * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
           * Required in a POST if creating a child category.
           * @example 2
           */
          parent_id: number;
          /**
           * @description The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
           * Required in a POST.
           * @example Bath
           */
          name: string;
          /**
           * @description The product description, which can include HTML formatting.
           *
           * @example <p>We offer a wide variety of products perfect for relaxing</p>
           */
          description?: string;
          /**
           * @description Number of views the category has on the storefront.
           *
           * @example 1050
           */
          views?: number;
          /**
           * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
           *
           * @example 3
           */
          sort_order?: number;
          /**
           * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
           *
           * @example Bath
           */
          page_title?: string;
          /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
          search_keywords?: string;
          /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
          meta_keywords?: string[];
          /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used. */
          meta_description?: string;
          /**
           * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
           *
           * @example category.html
           */
          layout_file?: string;
          /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
          is_visible?: boolean;
          /**
           * @description Determines how the products are sorted on category page load.
           *
           * @enum {string}
           */
          default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
          /**
           * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
           *
           * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
           */
          image_url?: string;
          /**
           * Custom Url Category
           * @description The custom URL for the category on the storefront.
           */
          custom_url?: {
            /**
             * @description Category URL on the storefront.
             *
             * @example /shoes
             */
            url?: string;
            /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
            is_customized?: boolean;
          };
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Category
             * @description Common Category object properties.
             */
            data?: {
              /**
               * @description Unique ID of the *Category*. Increments sequentially.
               * Read-Only.
               */
              id?: number;
              /**
               * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
               * Required in a POST if creating a child category.
               * @example 2
               */
              parent_id: number;
              /**
               * @description The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
               * Required in a POST.
               * @example Bath
               */
              name: string;
              /**
               * @description The product description, which can include HTML formatting.
               *
               * @example <p>We offer a wide variety of products perfect for relaxing</p>
               */
              description?: string;
              /**
               * @description Number of views the category has on the storefront.
               *
               * @example 1050
               */
              views?: number;
              /**
               * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
               *
               * @example 3
               */
              sort_order?: number;
              /**
               * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
               *
               * @example Bath
               */
              page_title?: string;
              /** @description A comma-separated list of keywords that can be used to locate the category when searching the store. */
              search_keywords?: string;
              /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"]. */
              meta_keywords?: string[];
              /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used. */
              meta_description?: string;
              /**
               * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
               *
               * @example category.html
               */
              layout_file?: string;
              /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view. */
              is_visible?: boolean;
              /**
               * @description Determines how the products are sorted on category page load.
               *
               * @enum {string}
               */
              default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
              /**
               * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
               *
               * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
               */
              image_url?: string;
              /**
               * Custom Url Category
               * @description The custom URL for the category on the storefront.
               */
              custom_url?: {
                /**
                 * @description Category URL on the storefront.
                 *
                 * @example /shoes
                 */
                url?: string;
                /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
                is_customized?: boolean;
              };
            };
            /**
             * Meta
             * @description Empty meta object; may be used later.
             */
            meta?: Record<string, never>;
          };
        };
      };
      207: components["responses"]["General207Status"];
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Category
   * @deprecated
   * @description When possible, use the [Category Trees - Delete categories](/docs/rest-catalog/category-trees/categories#delete-categories) endpoint instead. You can provide a category identifier using query parameters to delete a single category.
   *
   * Deletes a *Category*.
   *
   * **Note:**
   * The default rate limit for this endpoint is 40 concurrent requests.
   */
  deleteCategory: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get All Category Metafields
   * @description Returns a list of *Metafields* on a *Category*. Optional filter parameters can be passed in.
   */
  getCategoryMetafields: {
    parameters: {
      query?: {
        /** @description Filter items by ID. */
        id?: number;
        "id:in"?: number[];
        "id:not_in"?: number[];
        "id:min"?: number[];
        "id:max"?: number[];
        "id:greater"?: number[];
        "id:less"?: number[];
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description Filter based on a metafieldʼs key. */
        key?: string;
        /** @description Filter based on a metafieldʼs namespace. */
        namespace?: string;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"][];
            meta?: components["schemas"]["metaCollection_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Category Metafield
   * @description Creates a *Category Metafield*.
   *
   * **Required Fields:**
   * - permission_set
   * - namespace
   * - key
   * - value
   *
   * **Read-Only Fields**
   * - id
   *
   * **Note:** The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits (Help Center)](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
   */
  createCategoryMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["metafield_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate, unique key combinations of the appʼs client id, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Get a Category Metafield
   * @description Returns a single *Category Metafield*. Optional parameters can be passed in.
   */
  getCategoryMetafield: {
    parameters: {
      query?: {
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        include_fields?: string;
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        exclude_fields?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Update a Category Metafield
   * @description Updates a *Category Metafield*.
   *
   * **Required Fields**
   * * none
   *
   * **Read-Only Fields**
   * * id
   * * These fields can only be modified by the app (API credentials) that created the metafield:
   * 	* namespace
   * 	* key
   * 	* permission_set
   *
   * **Usage Notes**
   * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
   */
  updateCategoryMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["metafield_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["metafield_Full"];
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Category Metafield
   * @description Deletes a *Category Metafield*.
   */
  deleteCategoryMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
        metafield_id: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Create a Category Image
   * @description Create a *Category Image*.
   *
   *  **Required Fields**
   * - image_file: Form posts are the only accepted upload option.
   *
   * Only one image at a time can be created.
   * Limit image size to 1MB.
   * To update a *Category Image*, use the [Update categories](/docs/rest-catalog/category-trees/categories#update-categories) endpoint and an `image_url`.
   */
  createCategoryImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          image_file?: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: {
              image_url?: string;
            };
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
      400: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description Image was not valid. This is the result of a missing `image_file` field or an incorrect file type. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Category Image
   * @description Deletes a *Category Image*.
   */
  deleteCategoryImage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Product Sort Order
   * @description Returns a list of products and their sort order for a specific category.
   *
   * **Usage Notes**
   * * Data pairs are displayed in ascending order based on products' `sort_order` values.
   * * `null` values are allowed for products without specified `sort_order` values.
   * * Products with `sort_order` value of `null` will be displayed after products with valid numerical values.
   * * The priorities for determining product sort order on a storefront are the following:
   *   - Priority 1: Manually specified sort order on Category Level (API).
   *   - Priority 2: Manually specified sort order on Product (Global) Level (UI/API).
   *   - Priority 3: Default sorting by Product ID (newly added products go first) (UI/API).
   */
  getCategorySortOrders: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["productSortOrder"][];
        };
      };
      /** @description The requested category was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["error_Base"];
        };
      };
    };
  };
  /**
   * Update Product Sort Order
   * @description Updates sort order of products within a specific category.
   */
  updateCategorySortOrders: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        category_id: components["parameters"]["CategoryIdParam"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["productSortOrder"][];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["productSortOrder"][];
        };
      };
      /** @description The requested category was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["error_Base"];
        };
      };
      /**
       * @description Unprocessable entity.
       *
       * Please verify if all requested products are assigned to the category.
       *
       * Please verify if all required fields are present in the request body and are filled with values correctly.
       */
      422: {
        content: {
          "application/json": components["schemas"]["error_Base"];
        };
      };
    };
  };
  /**
   * Get All Metafields
   * @description Get all category metafields.
   */
  getCategoriesMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        "key:in"?: components["parameters"]["MetafieldKeyInParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
        direction?: components["parameters"]["DirectionParam"];
      };
    };
    responses: {
      /** @description List of `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update multiple Metafields
   * @description Create multiple metafields.
   */
  updateCategoriesMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Put"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            id: number;
          })[];
      };
    };
    responses: {
      /** @description List of updated `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Create multiple Metafields
   * @description Create multiple metafields.
   */
  createCategoriesMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID for the category with which the metafield is associated.
             *
             * @example 42
             */
            resource_id: number;
          })[];
      };
    };
    responses: {
      /** @description List of created `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  /**
   * Delete All Metafields
   * @description Delete all category metafields.
   */
  deleteCategoriesMetafields: {
    /** @description List of metafield IDs. */
    requestBody?: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Response object for metafields deletion with success. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
        };
      };
      /** @description Response object for metafields deletion with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
        };
      };
    };
  };
}
