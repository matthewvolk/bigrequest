// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/carts": {
    /**
     * Create a Cart
     * @description Creates a **Cart**.
     *
     * **Required Fields**
     *
     * |Field|Details|
     * |-|-|
     * |`line_item`|Specifies a line item.|
     * |`custom_items`|Specifies a custom item. Only required if adding a custom item to the cart.|
     * |`gift_certificates`|Specifies a gift certificate. Only required if adding a gift certificate to the cart.|
     *
     * **Usage Notes**
     *
     * * A **cart** `id` (UUID) is returned in the response.
     * * A **cart** `id` is the same as a **checkout** `id`.
     * * A cart can be created by adding an existing **catalog item** or a **custom item**.
     * * Carts are valid for **30 days** from the **last modification** (this includes creating the cart or editing the cart).
     * * If a product has modifiers, use the `option_selections` array to describe the **modifier** selection(s).
     * * The format and data type of a cart’s `option_value` are defined by the `value_data` object of a product’s [variant option value](/docs/rest-catalog/product-variant-options/values), [modifier value](/docs/rest-catalog/product-modifiers/values), or a combination of both.
     * * Redirect URLs can only be generated from carts that were created using the **REST Management API**.
     * * To get cart `redirect_urls` in the response, append the following query parameter to the request URL: `include=redirect_urls`. Redirect URLs point to either a shared checkout domain or a channel-specific domain, depending on the storefront configuration.
     * * To restore a cart that was created by a shopper or through a Storefront API, first recreate the cart using the **REST Management API**.
     * * To get cart `promotions` in the response, append the following query parameter to the request URL: `include=promotions.banners`.
     */
    post: operations["createCart"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/carts/{cartId}/items": {
    /**
     * Add Cart Line Items
     * @description Adds line item to the *Cart*.
     *
     * **Usage Notes**
     *
     * To add a custom item use `custom_items`.
     *
     * By default, overriding a product's list_price makes it ineligible for V3 product-level promotions. In **Store Settings** under **Promotions and Coupons** in the control panel, you can change this behavior to allow promotions on overridden prices.
     *
     * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     *
     * To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
     */
    post: operations["addCartLineItems"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
      };
    };
  };
  "/carts/{cartId}/redirect_urls": {
    /**
     * Create Cart Redirect URL
     * @description Creates a **Cart** redirect URL for redirecting a shopper to an already created cart using the `cartId`.
     *
     * **Usage Notes**
     *
     * * To use redirect URLs, first create the cart using the REST Management API or GraphQL Storefront API.
     * * Redirect URLs can also be created with **Create a Cart** requests by appending `include=redirect_urls`.
     * * A **Carts** redirect URL is valid for 30 days and may only be used once.
     * * Redirect URLs point to either a shared checkout domain or a channel-specific domain, depending on the storefront configuration.
     * * Once a redirect URL has been visited, it will be invalidated and cannot be used again.
     * * If your application requires URLs to be visited more than once, consider generating a fresh one each time you need to restore a cart, and redirecting to the URL from your own application.
     * * To restore a cart that was created on the storefront, either by a shopper or a Storefront API, first recreate the cart using the **REST Management API**.
     * * When redirecting the shopper, you can add a set of `query_params` to the URL. The `query_params` feature allows passing additional information to the redirect URL.
     */
    post: operations["createCartRedirectURL"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
      };
    };
  };
  "/carts/{cartId}/items/{itemId}": {
    /**
     * Update Cart Line Item
     * @description Updates an existing, single line item in the *Cart*.
     *
     * **Notes**
     *
     * Currently, only updating `list_price` and `quantity` are supported. By default, overriding a product's list_price makes it ineligible for V3 product-level promotions. In **Store Settings** under **Promotions and Coupons** in the control panel, you can change this behavior to allow promotions on overridden prices.
     *
     * If the product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     *
     * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the **Add Cart Line Items** endpoint.
     *
     * `custom_items` cannot be updated via the API at this time. To update your cart, add a new updated custom item and delete the outdated one. If your cart contains only one line item, perform the add operation before the delete operation.
     *
     * Deleting all line items from the cart will invalidate the cart.
     *
     * To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
     */
    put: operations["updateCartLineItem"];
    /**
     * Delete Cart Line Item
     * @description Deletes a *Cart* line item.
     *
     * **Notes**
     *
     * Removing the last `line_item` in the *Cart* deletes the *Cart*.
     *
     * To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
     */
    delete: operations["deleteCartLineItem"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
        itemId: string;
      };
    };
  };
  "/carts/{cartId}": {
    /**
     * Get a Cart
     * @description Returns a storeʼs *Cart*.
     */
    get: operations["getCart"];
    /**
     * Update Customer ID
     * @description Updates a *Cartʼs* `customer_id`.
     *
     * **Notes**
     *
     * Changing the *Cart* `customer_id` will remove any promotions or shipping calculations on the *Cart*. These are tied to the customer depending on cart conditions and any customer groups.
     *
     * To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
     */
    put: operations["updateCart"];
    /**
     * Delete a Cart
     * @description Deletes a *Cart*. Once a *Cart* has been deleted it can’t be recovered.
     */
    delete: operations["deleteCart"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
      };
    };
  };
  "/carts/settings": {
    /**
     * Get Global Cart Settings
     * @description Returns the global cart settings of a store.
     *
     *   ### OAuth scopes
     *
     *   | UI Name | Permission | Parameter |
     *   |:--------|:-----------|:----------|
     *   |Information & Settings | modify | `store_v2_information`|
     *   |Information & Settings | read-only| `store_v2_information`|
     */
    get: operations["getGlobalCartSettings"];
    /**
     * Update Global Cart Settings
     * @description Update the global cart settings of a store.
     *   *Authentication*
     *   ### OAuth scopes
     *
     *   | UI Name | Permission | Parameter |
     *   |:--------|:-----------|:----------|
     *   |Information & Settings | modify | `store_v2_information`|
     *   |Information & Settings | read-only| `store_v2_information`|
     */
    put: operations["updateGlobalCartSettings"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/carts/settings/channels/{channel_id}": {
    /**
     * Get Channel Cart Settings
     * @description Returns the per-channel overrides for the cart settings of a store.
     *
     *   ### OAuth scopes
     *
     *   | UI Name | Permission | Parameter |
     *   |:--------|:-----------|:----------|
     *   |Information & Settings | modify | `store_v2_information`|
     *   |Information & Settings | read-only| `store_v2_information`|
     */
    get: operations["getChannelCartSettings"];
    /**
     * Update Channel Cart Settings
     * @description Update the per-channel overrides for the cart settings of a store.
     *
     * ### OAuth scopes
     *
     * | UI Name | Permission | Parameter |
     * |:--------|:-----------|:----------|
     * |Information & Settings | modify | `store_v2_information`|
     * |Information & Settings | read-only| `store_v2_information`|
     */
    put: operations["updateChannelCartSettings"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /**
         * @description The channel ID of the settings overrides.
         *
         * ### OAuth scopes
         *
         * | UI Name | Permission | Parameter |
         * |:--------|:-----------|:----------|
         * |Information & Settings | modify | `store_v2_information`|
         * |Information & Settings | read-only| `store_v2_information`|
         */
        channel_id: number;
      };
    };
  };
  "/carts/{cart_id}/metafields": {
    /**
     * Get Cart Metafields
     * @description Get a cart's metafields.
     */
    get: operations["getCartMetafields"];
    /**
     * Create a Cart Metafield
     * @description Create a cart `Metafield`.
     *
     * If you create an order from a Cart, you can continue referencing the Cart Metafields even if you delete the original Cart. Use the `cart_id` field on the Order to construct the Cart Metafield endpoint.
     */
    post: operations["createCartMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cart_id: components["parameters"]["cart_id"];
      };
    };
  };
  "/carts/{cart_id}/metafields/{metafield_id}": {
    /**
     * Get a Cart Metafield
     * @description Gets a cart metafield.
     */
    get: operations["getCartMetafield"];
    /**
     * Update a Cart Metafield
     * @description Update a `Metafield`, by `cart_id`.
     */
    put: operations["updateCartMetafield"];
    /**
     * Delete a Metafield
     * @description Deletes a `Metafield`.
     */
    delete: operations["deleteCartMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cart_id: components["parameters"]["cart_id"];
        /** @description The unique ID of the subject `Metafield`. */
        metafield_id: number;
      };
    };
  };
  "/carts/metafields": {
    /**
     * Get All Cart Metafields
     * @description Get all cart metafields.
     */
    get: operations["getCartsMetafields"];
    /**
     * Update multiple Metafields
     * @description Create multiple metafields.
     */
    put: operations["updateCartsMetafields"];
    /**
     * Create multiple Metafields
     * @description Create multiple metafields.
     */
    post: operations["createCartsMetafields"];
    /**
     * Delete multiple Metafields
     * @description Delete all cart metafields.
     */
    delete: operations["deleteCartsMetafields"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Cart Update Request */
    CartUpdateRequest: {
      /** Line Item Request Data */
      line_item?: {
        quantity: number;
        product_id: number;
        /** @description The variant ID. Required if the product has variants. */
        variant_id: number;
        list_price?: number;
        option_selections?: {
            option_id?: number;
            option_value?: string;
          }[];
      };
      /** Line Item Gift Certificate Request Data */
      gift_certificate?: {
        /** @description Given name for the gift certificate line item. */
        name: string;
        /**
         * @description The theme of the gift certificate.
         * @enum {string}
         */
        theme: "birthday.html" | "boy.html" | "celebration.html" | "christmas.html" | "general.html" | "girl.html";
        amount: number;
        quantity: number;
        /** Contact Entity */
        sender: {
          name?: string;
          email?: string;
        };
        /** Contact Entity */
        recipient: {
          name?: string;
          email?: string;
        };
        /** @description Message shown to recipient, as provided by sender. */
        message?: string;
      };
    };
    /** Cart Create Post Data */
    CartCreatePostData: {
      customer_id?: number;
      line_items?: (components["schemas"]["cart_PostVariant"] | components["schemas"]["cart_PostModifier"])[];
      custom_items?: components["schemas"]["cart_PostCustomItem"];
      gift_certificates?: ({
          /** @description Given name for the gift certificate line item. */
          name: string;
          /**
           * @description The theme of the gift certificate.
           * @enum {string}
           */
          theme: "birthday.html" | "boy.html" | "celebration.html" | "christmas.html" | "general.html" | "girl.html";
          amount: number;
          quantity: number;
          /** Contact Entity */
          sender: {
            name?: string;
            email?: string;
          };
          /** Contact Entity */
          recipient: {
            name?: string;
            email?: string;
          };
          /** @description Message shown to recipient, as provided by sender. */
          message?: string;
        })[];
      /** @description The Channel ID. If no channel is specified, defaults to 1. */
      channel_id?: number;
      currency?: {
        /**
         * Format: ISO-4217
         * @description The [transactional currency](/docs/rest-management/currencies#definitions) code for the cart, formatted as an [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) string. This code is required when multi-currency is enabled. Passing a non-transactional display currency will result in a `400` error.
         * @example usd
         */
        code?: string;
      };
      /**
       * Format: ISO-639
       * @description The locale of the cart. Accepts strings of format `xx` or `xx-YY`. Uses the [ISO-639 standard](https://www.iso.org/iso-639-language-codes.html) format.
       * @example en-US
       */
      locale?: string;
    };
    /** Cart Request Data */
    CartRequestData: {
      line_items?: {
          quantity: number;
          product_id: number;
          /** @description The Variant ID. Required if the product has variants. */
          variant_id: number;
          list_price?: number;
          option_selections?: {
              option_id?: number;
              option_value?: string;
            }[];
        }[];
      gift_certificates?: ({
          /** @description Given name for gift certificate line item. */
          name: string;
          /**
           * @description The theme of the gift certificate.
           * @enum {string}
           */
          theme: "birthday.html" | "boy.html" | "celebration.html" | "christmas.html" | "general.html" | "girl.html";
          amount: number;
          quantity: number;
          /** Contact Entity */
          sender: {
            name?: string;
            email?: string;
          };
          /** Contact Entity */
          recipient: {
            name?: string;
            email?: string;
          };
          /** @description Message shown to recipient, as provided by sender. */
          message?: string;
        })[];
      /** @description The Channel ID. If no channel is specified, this defaults to 1. */
      channel_id?: number;
    };
    /** Cart Update Put Request Data */
    CartUpdatePutRequestData: {
      customer_id?: number;
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    /** Line Item Request Data */
    LineItemRequestData: {
      quantity: number;
      product_id: number;
      /** @description Variant ID. Required if the product has variants. */
      variant_id: number;
      list_price?: number;
      option_selections?: {
          option_id?: number;
          option_value?: string;
        }[];
    };
    /** Product Option Selection */
    ProductOptionSelection: {
      option_id?: number;
      option_value?: string;
    };
    /** Line Item Gift Certificate Request Data */
    LineItemGiftCertificateRequestData: {
      /** @description Given name for gift certificate line item. */
      name: string;
      /**
       * @description The theme of the gift certificate.
       * @enum {string}
       */
      theme: "birthday.html" | "boy.html" | "celebration.html" | "christmas.html" | "general.html" | "girl.html";
      amount: number;
      quantity: number;
      /** Contact Entity */
      sender: {
        name?: string;
        email?: string;
      };
      /** Contact Entity */
      recipient: {
        name?: string;
        email?: string;
      };
      /** @description Message shown to recipient, as provided by sender. */
      message?: string;
    };
    /**
     * Cart_Full
     * @description A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data.
     */
    Cart_Full: {
      /**
       * Format: UUID
       * @description Cart ID, provided after creating a cart with a POST request.
       */
      id?: string;
      /** @description ID of the customer to which the cart belongs. */
      customer_id?: number;
      /** @description The channel ID. If no channel is specified, defaults to 1. */
      channel_id?: number;
      /** @description The cart’s email. This is the same email that is used in the billing address. */
      email?: string;
      /**
       * Currency
       * @description The currency. This is the same for both the cart and its subsequent checkout.
       */
      currency?: {
        /**
         * Format: ISO-4217
         * @description The [transactional currency](/docs/rest-management/currencies#definitions) code for the cart, formatted as an [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) string.
         * @example usd
         */
        code?: string;
      };
      tax_included?: boolean;
      /** @description Sum of cart line-item amounts before cart-level discounts, coupons, or taxes. */
      base_amount?: number;
      /** @description Order-based discounted amount only - Excludes coupon discounts and product-based discounts. */
      discount_amount?: number;
      /** @description The entered value represents the order level manual discount. */
      manual_discount_amount?: number;
      /** @description Sum of cart line-item amounts minus cart-level discounts and coupons. This amount includes taxes (where applicable). */
      cart_amount?: number;
      coupons?: components["schemas"]["AppliedCoupon"][];
      discounts?: {
          /**
           * @description ID of the applied discount.
           * @example coupon
           */
          id?: string;
          /** @description The discounted amount. */
          discounted_amount?: number;
        }[];
      line_items?: components["schemas"]["LineItemsGet"];
      /**
       * Format: ISO-8601
       * @description Time when the cart was created.
       */
      created_time?: string;
      /**
       * Format: ISO-8601
       * @description Time when the cart was last updated.
       */
      updated_time?: string;
      /**
       * Format: ISO-639
       * @description Locale of the cart. Accepts strings of format `xx` or `xx-YY`. Uses the [ISO-639 standard](https://www.iso.org/iso-639-language-codes.html) format.
       */
      locale?: string;
      /** @description This is available only when "include=promotions.banners" is presented in the URL. */
      promotions?: {
        /** Banner */
        banners?: {
          /** @description ID of the promotion. */
          id?: string;
          /** @description Type of the banner. */
          type?: string;
          /** @description An array of the locations where the banner will display. */
          page?: string[];
          /** @description Text of the banner. */
          text?: string;
        };
      };
      /**
       * @description The current version of the cart increments with each successful update. You can use it to enable optimistic concurrency control for subsequent updates.
       * @example 1
       */
      version?: number;
    };
    /**
     * Currency
     * @description The currency. This is the same for both the cart and its subsequent checkout.
     */
    Currency: {
      /**
       * Format: ISO-4217
       * @description ISO-4217 currency code. (See: https://www.iso.org/iso-4217-currency-codes.html.)
       */
      code?: string;
    };
    /**
     * line_items
     * @description Request body for `PUT` or `POST` requests.
     */
    LineItems: {
      physical_items: components["schemas"]["ItemPhysical"][];
      digital_items: components["schemas"]["ItemDigital"][];
      gift_certificates?: components["schemas"]["ItemGiftCertificate"][];
      custom_items?: components["schemas"]["ItemCustom"][];
    };
    /** Item Gift Certificate */
    ItemGiftCertificate: {
      id?: string;
      /** @description Name provided for the gift certificate that will appear in the control panel. */
      name?: string;
      /**
       * @description The theme of the gift certificate.
       * @enum {string}
       */
      theme: "birthday.html" | "boy.html" | "celebration.html" | "christmas.html" | "general.html" | "girl.html";
      /** @description Value must be between 1.00 and 1,000.00 in the store’s default currency. */
      amount: number;
      is_taxable?: boolean;
      /** Contact Entity */
      sender: {
        name?: string;
        email?: string;
      };
      /** Contact Entity */
      recipient: {
        name?: string;
        email?: string;
      };
      /** @description Limited to 200 characters. */
      message?: string;
    };
    /** Item Gift Certificate */
    ItemGiftCertificateGet: {
      id?: string;
      /** @description Name provided for the gift certificate that will appear in the control panel. */
      name?: string;
      /** @description The theme of the gift certificate. The following options are available:`birthday.html`, `boy.html`, `celebration.html`, `christmas.html`, `general.html`, and `girl.html`. */
      theme?: string;
      /** @description Value must be between 1.00 and 1,000.00 in the store’s default currency. */
      amount?: number;
      taxable?: boolean;
      /** Contact Entity */
      sender?: {
        name?: string;
        email?: string;
      };
      /** Contact Entity */
      recipient?: {
        name?: string;
        email?: string;
      };
      /** @description The message included in the gift certificate is limited to 200 characters. */
      message?: string;
    };
    /** Contact Entity */
    ContactEntity: {
      name?: string;
      email?: string;
    };
    /** Digital Item */
    ItemDigital: ({
      /**
       * @description The line-item ID.
       * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
       */
      id?: string;
      /**
       * @description The ID of the variant. Required in the /PUT or /POST request if the product has variants.
       * @example 358
       */
      variant_id: number;
      /**
       * @description The ID of the product. Required in a /POST request.
       * @example 12
       */
      product_id: number;
      /**
       * @description SKU of the variant.
       * @example SMGREEN
       */
      sku?: string;
      /**
       * @description The item’s product name.
       * @example T-Shirt
       */
      name?: string;
      /**
       * Format: uri
       * @description The product URL.
       * @example http://your-store-url.mybigcommerce.com/your-product/
       */
      url?: string;
      /**
       * @description Quantity of this item in the cart.
       * @example 5
       */
      quantity: number;
      /**
       * @description Boolean value that specifies whether the item is taxable.
       * @example false
       */
      is_taxable?: boolean;
      /**
       * Format: uri
       * @description Image of the product or variant.
       * @example https://pathtoproductimage/ProductDefault.png
       */
      image_url?: string;
      discounts?: ({
          id?: string | number;
          /** @description The discounted amount. */
          discounted_amount?: number;
        })[];
      coupons?: ({
          /** @description Required in a /POST request. */
          coupons?: {
            /** @description The coupon code. */
            coupon_code: {
              /**
               * @description ID of the coupon.
               * @example 6
               */
              id?: number;
              /**
               * @description The coupon code. Required in a /POST request.
               * @example KV56053388J
               */
              code?: string;
              /**
               * @description Name given to the coupon in the control panel.
               * @example Percentage off
               */
              name?: string;
              /**
               * @description The discount type.
               *
               * - type 0: per_item_discount
               * - type 1: percentage_discount
               * - type 2: per_total_discount
               * - type 3: shipping_discount
               * - type 4: free_shipping
               * @enum {integer}
               */
              discountType?: 0 | 1 | 2 | 3 | 4;
              /**
               * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
               * @example 3
               */
              discountAmount?: number;
              /**
               * @description Returns 0 if no expiration date has been set.
               * @example 0
               */
              expiresDate?: number;
              /**
               * @description The total amount of all discounts applied to the cart.
               * @example 4.19
               */
              totalDiscount?: number;
            };
          };
        })[];
      /**
       * @description The total value of all discounts applied to this item. This includes coupons and cart-level discounts.
       * @example 4
       */
      discount_amount?: number;
      /** @description The total value of all coupons applied to this item. */
      coupon_amount?: number;
      /** @description An item’s original price is the same as the product default price in the admin panel. */
      original_price?: number;
      /** @description The net item price before discounts and coupons. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel. */
      list_price?: number;
      /** @description Item’s price after all discounts are applied. (The final price before tax calculation.) */
      sale_price?: number;
      /** @description List price of the item multiplied by the quantity. */
      extended_list_price?: number;
      /** @description Sale price of the item multiplied by the quantity. */
      extended_sale_price?: number;
      /** @description The list of selected options for this product. */
      options?: {
          /** @description The product option name; for example, Color or Size. */
          name?: string;
          /** @description The product option identifier. */
          nameId?: number;
          /** @description The product option value; for example, Red or Medium. */
          value?: string;
          /**
           * @description The product option value identifier in number format.
           * @example 128
           */
          valueId?: number;
        }[];
    }) & {
      /** @description URLs to download all product files. */
      download_file_urls?: string[];
      /**
       * Format: url
       * @description The URL for the combined downloads page.
       */
      download_page_url?: string;
      /** @description Specifies the combined download size of all files in human-readable style; for example, `30MB`. */
      download_size?: string;
    };
    /** Digital Item Response */
    ItemDigitalGet: {
      /**
       * @description The line-item ID.
       * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
       */
      id?: string;
      /** @description Bundled items will have the ID of their parent item. */
      parent_id?: string;
      /**
       * @description The ID of the variant. Required in the /PUT or /POST request if the product has variants.
       * @example 358
       */
      variant_id?: number;
      /**
       * @description The ID of the product. Required in a /POST request.
       * @example 12
       */
      product_id?: number;
      /**
       * @description SKU of the variant.
       * @example SMGREEN
       */
      sku?: string;
      /**
       * @description The item’s product name.
       * @example T-Shirt
       */
      name?: string;
      /**
       * Format: uri
       * @description The product URL.
       * @example http://your-store-url.mybigcommerce.com/your-product/
       */
      url?: string;
      /**
       * @description Quantity of this item in the cart.
       * @example 5
       */
      quantity?: number;
      /**
       * @description Boolean value that specifies whether the item is taxable.
       * @example false
       */
      taxable?: boolean;
      /**
       * Format: uri
       * @description Image of the product or variant.
       * @example https://pathtoproductimage/ProductDefault.png
       */
      image_url?: string;
      discounts?: ({
          id?: string | number;
          /** @description The discounted amount. */
          discounted_amount?: number;
        })[];
      coupons?: OneOf<[number, ({
          /**
           * @description ID of the coupon.
           * @example 6
           */
          id?: number;
          /**
           * @description The coupon code. Required in a /POST request.
           * @example KV56053388J
           */
          code: string;
          /**
           * @description Name given to the coupon in the control panel.
           * @example Percentage off
           */
          name?: string;
          /**
           * @description The discount type.
           * - type 0: per_item_discount
           * - type 1: percentage_discount
           * - type 2: per_total_discount
           * - type 3: shipping_discount
           * - type 4: free_shipping
           *
           * @example 3
           * @enum {integer}
           */
          discountType?: 0 | 1 | 2 | 3 | 4;
          /**
           * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
           * @example 3
           */
          discountAmount?: number;
          /**
           * @description Returns 0 if no expiration date has been set.
           * @example 0
           */
          expiresDate?: number;
          /**
           * @description The total amount of all discounts applied to the cart.
           * @example 4.19
           */
          totalDiscount?: number;
        })[]]>;
      /**
       * @description The total value of all discounts applied to this item. This includes coupons and cart-level discounts.
       * @example 4
       */
      discount_amount?: number;
      /** @description The total value of all coupons applied to this item. */
      coupon_amount?: number;
      /** @description An item’s original price is the same as the product default price in the admin panel. */
      original_price?: number;
      /** @description The net item price before discounts and coupons. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel. */
      list_price?: number;
      /** @description Item’s price after all discounts are applied. (The final price before tax calculation.) */
      sale_price?: number;
      /** @description List price of the item multiplied by the quantity. */
      extended_list_price?: number;
      /** @description Sale price of the item multiplied by the quantity. */
      extended_sale_price?: number;
      /**
       * @description Whether or not a physical product requires shipping.
       * @example false
       */
      is_require_shipping?: boolean;
      /**
       * @description Whether or not you can change or remove the item from the cart. Items that are immutable include those added automatically by promotions.
       * @example true
       */
      is_mutable?: boolean;
      /**
       * @description Whether or not a promotion added an additional item.
       * @example false
       */
      added_by_promotion?: boolean;
      /** @description URLs to download all product files. */
      download_file_urls?: string[];
      /**
       * Format: url
       * @description The URL for the combined downloads page.
       */
      download_page_url?: string;
      /** @description Specifies the combined download size of all files in human-readable style; for example, `30MB`. */
      download_size?: string;
    };
    ItemPhysical: {
      /**
       * @description The line-item ID.
       * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
       */
      id?: string;
      /**
       * @description The ID of the variant. Required in the /PUT or /POST request if the product has variants.
       * @example 358
       */
      variant_id: number;
      /**
       * @description The ID of the product. Required in a /POST request.
       * @example 12
       */
      product_id: number;
      /**
       * @description SKU of the variant.
       * @example SMGREEN
       */
      sku?: string;
      /**
       * @description The item’s product name.
       * @example T-Shirt
       */
      name?: string;
      /**
       * Format: uri
       * @description The product URL.
       * @example http://your-store-url.mybigcommerce.com/your-product/
       */
      url?: string;
      /**
       * @description Quantity of this item in the cart.
       * @example 5
       */
      quantity: number;
      /**
       * @description Boolean value that specifies whether the item is taxable.
       * @example false
       */
      is_taxable?: boolean;
      /**
       * Format: uri
       * @description Image of the product or variant.
       * @example https://pathtoproductimage/ProductDefault.png
       */
      image_url?: string;
      discounts?: ({
          id?: string | number;
          /** @description The discounted amount. */
          discounted_amount?: number;
        })[];
      coupons?: ({
          /** @description Required in a /POST request. */
          coupons?: {
            /** @description The coupon code. */
            coupon_code: {
              /**
               * @description The ID of the coupon.
               * @example 6
               */
              id?: number;
              /**
               * @description The coupon code. Required in a /POST request.
               * @example KV56053388J
               */
              code?: string;
              /**
               * @description Name given to the coupon in the control panel.
               * @example Percentage off
               */
              name?: string;
              /**
               * @description The discount type.
               *
               * - type 0: per_item_discount
               * - type 1: percentage_discount
               * - type 2: per_total_discount
               * - type 3: shipping_discount
               * - type 4: free_shipping
               * @enum {integer}
               */
              discountType?: 0 | 1 | 2 | 3 | 4;
              /**
               * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
               * @example 3
               */
              discountAmount?: number;
              /**
               * @description Returns 0 if no expiration date is set.
               * @example 0
               */
              expiresDate?: number;
              /**
               * @description The total amount of all discounts applied to the cart.
               * @example 4.19
               */
              totalDiscount?: number;
            };
          };
        })[];
      /**
       * @description The total value of all discounts applied to this item. This includes coupons and cart-level discounts.
       * @example 4
       */
      discount_amount?: number;
      /** @description The total value of all coupons applied to this item. */
      coupon_amount?: number;
      /** @description An item’s original price is the same as the product default price in the admin panel. */
      original_price?: number;
      /** @description The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel. */
      list_price?: number;
      /** @description Price of the item after all discounts are applied. (The final price before tax calculation.) */
      sale_price?: number;
      /** @description List price of the item multiplied by the quantity. */
      extended_list_price?: number;
      /** @description Sale price of the item multiplied by the quantity. */
      extended_sale_price?: number;
      /** @description The list of selected options for this product. */
      options?: {
          /** @description The product option name; for example, Color or Size. */
          name?: string;
          /** @description The product option identifier. */
          nameId?: number;
          /** @description The product option value; for example, Red or Medium. */
          value?: string;
          /**
           * @description The product option value identifier in number format.
           * @example 128
           */
          valueId?: number;
        }[];
    };
    /** Base Item */
    BaseItem: {
      /**
       * @description The line-item ID.
       * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
       */
      id?: string;
      /**
       * @description The ID of the variant. Required in the /PUT or /POST request if the product has variants.
       * @example 358
       */
      variant_id: number;
      /**
       * @description The ID of the product. Required in a /POST request.
       * @example 12
       */
      product_id: number;
      /**
       * @description SKU of the variant.
       * @example SMGREEN
       */
      sku?: string;
      /**
       * @description The itemʼs product name.
       * @example T-Shirt
       */
      name?: string;
      /**
       * Format: uri
       * @description The product URL.
       * @example http://your-store-url.mybigcommerce.com/your-product/
       */
      url?: string;
      /**
       * @description Quantity of this item in the cart.
       * @example 5
       */
      quantity: number;
      /**
       * @description Boolean value that specifies whether the item is taxable.
       * @example false
       */
      is_taxable?: boolean;
      /**
       * Format: uri
       * @description Image of the product or variant.
       * @example https://pathtoproductimage/ProductDefault.png
       */
      image_url?: string;
      discounts?: ({
          /**
           * @description ID of the applied discount.
           * @example coupon
           */
          id?: string | number;
          /** @description The discounted amount. */
          discounted_amount?: number;
        })[];
      coupons?: {
          /** @description Required in a /POST request. */
          coupons?: {
            /** @description The coupon code. */
            coupon_code: {
              /**
               * @description The ID of the coupon.
               * @example 6
               */
              id?: number;
              /**
               * @description The coupon code. Required in a /POST request.
               * @example KV56053388J
               */
              code?: string;
              /**
               * @description Name given to the coupon in the control panel.
               * @example Percentage off
               */
              name?: string;
              /**
               * @description The discount type.
               *
               * - type 0: per_item_discount
               * - type 1: percentage_discount
               * - type 2: per_total_discount
               * - type 3: shipping_discount
               * - type 4: free_shipping
               * enum:
               * - 0
               * - 1
               * - 2
               * - 3
               * - 4
               */
              discountType?: number;
              /**
               * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
               * @example 3
               */
              discountAmount?: number;
              /**
               * @description Returns 0 if no expiration date has been set.
               * @example 0
               */
              expiresDate?: number;
              /**
               * @description The total amount of all discounts applied to the cart.
               * @example 4.19
               */
              totalDiscount?: number;
            };
          };
        }[];
      /**
       * @description The total value of all discounts applied to this item. This includes coupons and cart level discounts.
       * @example 4
       */
      discount_amount?: number;
      /** @description The total value of all coupons applied to this item. */
      coupon_amount?: number;
      /** @description An item’s original price is the same as the product default price in the admin panel. */
      original_price?: number;
      /** @description The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel. */
      list_price?: number;
      /** @description Item’s price after all discounts are applied. (The final price before tax calculation.) */
      sale_price?: number;
      /** @description List price of the item multiplied by the quantity. */
      extended_list_price?: number;
      /** @description Sale price of the item multiplied by the quantity. */
      extended_sale_price?: number;
      /** @description The list of selected options for this product. */
      options?: {
          /** @description The product option name; for example, Color or Size. */
          name?: string;
          /** @description The product option identifier. */
          nameId?: number;
          /** @description The product option value; for example, Red or Medium. */
          value?: string;
          /**
           * @description The product option value identifier in number format.
           * @example 128
           */
          valueId?: number;
        }[];
    };
    /** Product Option */
    ProductOption: {
      /** @description The product option name; for example, Color or Size. */
      name?: string;
      /** @description The product option identifier. */
      nameId?: number;
      /** @description The product option value; for example, Red or Medium. */
      value?: string;
      /**
       * @description The product option value identifier in number format.
       * @example 128
       */
      valueId?: number;
    };
    /**
     * Applied Coupon
     * @description |Type `int`|Type Name|
     * |-|-|
     * |`0`|`per_item_discount`|
     * |`1`|`percentage_discount`|
     * |`2`|`per_total_discount`|
     * |`3`|`shipping_discount`|
     * |`4`|`free_shipping`|
     * |`5`|`promotion`|
     */
    AppliedCoupon: {
      /** @description The coupon code. */
      code: string;
      /** @description The coupon ID. (read-only) */
      id?: string;
      /**
       * @description Key name to identify the type of coupon.
       *
       * type 0: per_item_discount
       * type 1: percentage_discount
       * type 2: per_total_discount
       * type 3: shipping_discount
       * type 4: free_shipping
       * type 5: promotion
       * @enum {string}
       */
      coupon_type?: "0" | "1" | "2" | "3" | "4" | "5";
      /**
       * Format: double
       * @description The discounted amount applied within a given context.
       */
      discounted_amount?: number;
      /**
       * @description Display name of the coupon.
       * @example 20% Off
       */
      display_name?: string;
    };
    /** Applied Discount */
    AppliedDiscount: {
      /**
       * @description ID of the applied discount.
       * @example coupon
       */
      id?: string | number;
      /** @description The discounted amount. */
      discounted_amount?: number;
    };
    /** Gift Wrapping */
    GiftWrapping: {
      name?: string;
      message?: string;
      /** Format: float */
      amount?: number;
    };
    /**
     * Item Custom
     * @description Add a custom item to the shopperʼs cart.
     *
     * * Custom items are not added to the catalog.
     * * The price should be set to match the store settings for taxes.
     */
    ItemCustom: {
      /** @description ID of the custom item. */
      id?: string;
      /** @description SKU of the custom item. */
      sku?: string;
      /** @description Name of the item. */
      name?: string;
      quantity?: string;
      /** @description Specifies the price of the item. This value can include or exclude tax, depending on the store setup. */
      list_price?: string;
    };
    /**
     * Item Custom
     * @description Add a custom item to the shopperʼs cart.
     *
     * * Custom items are not added to the catalog.
     * * The price should be set to match the store settings for taxes.
     */
    ItemCustomGet: {
      /** @description ID of the custom item. */
      id?: string;
      /** @description SKU of the custom item. */
      sku?: string;
      /** @description Name of the item. */
      name?: string;
      quantity?: string;
      /** @description Specifies the price of the item. This value can include or exclude tax, depending on the store setup. */
      list_price?: string;
      /** @description List price of the item multiplied by the quantity. */
      extended_list_price?: number;
      /**
       * Format: uri
       * @description Image of the product or variant.
       * @example https://pathtoproductimage/ProductDefault.png
       */
      image_url?: string;
    };
    /**
     * Item with variant
     * @description Product with a variant.
     */
    cart_PostVariant: {
      quantity?: number;
      product_id?: number;
      /** @description Optional price override. */
      list_price?: number;
      /** @description Variant ID. Exists only in Catalog V3. */
      variant_id?: number;
      /** @description Optionally, provide a value to override the product name. */
      name?: string;
      gift_wrapping?: {
        /**
         * @description Boolean value that specifies whether items whether items should be wrapped together or wrapped individually.
         * @example true
         */
        wrap_together?: boolean;
        /** @description Details for the gift wrapping option selected. This can be specified for each line item. */
        wrap_details?: {
            /**
             * @description Identifier of the gift wrapping option selected.
             * @example 0
             */
            id?: number;
            /**
             * @description Custom gift message.
             * @example Happy Birthday
             */
            message?: string;
          }[];
      };
    };
    /**
     * Item with modifier
     * @description Product with a modifier.
     */
    cart_PostModifier: {
      quantity: number;
      product_id: number;
      /** @description Optional price override. */
      list_price?: number;
      /** @description Optionally, provide a value to override the product name. */
      name?: string;
      /** @description Needed for Catalog V2. */
      option_selections?: {
          option_id?: number;
          option_value?: number;
          /** @description Override for the selected option or modifier name. */
          name?: string;
          /** @description Override for the selected option value. */
          value?: string;
          nameId?: number;
          valueId?: number;
        }[];
    };
    /** Cart_Line_Item_Update_Put */
    Cart_Line_Item_Update_Put: {
      line_item?: components["schemas"]["cart_PostVariant"] | components["schemas"]["cart_PostModifier"];
      gift_certificates?: ({
          /** @description Given name for a gift certificate line item. */
          name: string;
          /**
           * @description The theme of the gift certificate.
           * @enum {string}
           */
          theme: "birthday.html" | "boy.html" | "celebration.html" | "christmas.html" | "general.html" | "girl.html";
          amount: number;
          quantity: number;
          /** Contact Entity */
          sender: {
            name?: string;
            email?: string;
          };
          /** Contact Entity */
          recipient: {
            name?: string;
            email?: string;
          };
          /** @description Message shown to recipient, as provided by sender. */
          message?: string;
        })[];
      custom_items?: components["schemas"]["cart_PostCustomItem"];
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    CartLineItemDelete: {
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    /** Redirect_urls_Post */
    Redirect_urls_Post: {
      query_params?: {
        key?: string;
        value?: string;
      };
    };
    /** Cart_Line_Item_Update_Post */
    Cart_Line_Item_Update_Post: {
      line_items?: components["schemas"]["cart_PostVariant"][] | components["schemas"]["cart_PostModifier"][];
      gift_certificates?: ({
          /** @description Given name for gift certificate line item. */
          name: string;
          /**
           * @description The theme of the gift certificate.
           * @enum {string}
           */
          theme: "birthday.html" | "boy.html" | "celebration.html" | "christmas.html" | "general.html" | "girl.html";
          amount: number;
          quantity: number;
          /** Contact Entity */
          sender: {
            name?: string;
            email?: string;
          };
          /** Contact Entity */
          recipient: {
            name?: string;
            email?: string;
          };
          /** @description Message shown to recipient, as provided by sender. */
          message?: string;
        })[];
      custom_items?: components["schemas"]["cart_PostCustomItem"];
      /**
       * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
       * @example 1
       */
      version?: number;
    };
    /** Custom item */
    cart_PostCustomItem: {
        sku?: string;
        name?: string;
        quantity?: number;
        list_price?: number;
      }[];
    /** @description Represents all settings related to the shopping cart functionality of a store. */
    CartSettings: {
      allow_purchasing?: boolean;
    };
    /** @description Represents all settings overrides related to the shopping cart functionality of a store for a channel. */
    ChannelCartSettings: {
      allow_purchasing?: boolean | null;
    };
    ChannelCartSettingsRequest: components["schemas"]["ChannelCartSettings"];
    /** @description The response object of cart settings overrides for a channel. */
    ChannelCartSettingsResponse: {
      data?: components["schemas"]["ChannelCartSettings"];
      meta?: components["schemas"]["metaCollection_open"];
    };
    GlobalCartSettingsRequest: components["schemas"]["CartSettings"];
    /** @description The response object of cart settings at the global level. */
    GlobalCartSettingsResponse: {
      data?: components["schemas"]["CartSettings"];
      meta?: components["schemas"]["metaCollection_open"];
    };
    ErrorResponse: {
      status?: number;
      title?: string;
      type?: string;
      instance?: string;
      errors?: {
        [key: string]: unknown;
      };
    };
    /**
     * LineItemsGet
     * @description `GET`
     */
    LineItemsGet: {
      physical_items?: components["schemas"]["ItemPhysicalGet"][];
      digital_items?: components["schemas"]["ItemDigitalGet"][];
      gift_certificates?: components["schemas"]["ItemGiftCertificateGet"][];
      custom_items?: components["schemas"]["ItemCustomGet"][];
    };
    ItemPhysicalGet: {
      /**
       * @description The line-item ID.
       * @example 6e193ce6-f327-4dcc-b75e-72cf6738525e
       */
      id?: string;
      /** @description Bundled items will have the ID of their parent item. */
      parent_id?: string;
      /**
       * @description The ID of the variant. Required in the /PUT or /POST request if the product has variants.
       * @example 358
       */
      variant_id: number;
      /**
       * @description The ID of the product. Required in a /POST request.
       * @example 12
       */
      product_id: number;
      /**
       * @description SKU of the variant.
       * @example SMGREEN
       */
      sku?: string;
      /**
       * @description The item’s product name.
       * @example T-Shirt
       */
      name?: string;
      /**
       * Format: uri
       * @description The product URL.
       * @example http://your-store-url.mybigcommerce.com/your-product/
       */
      url?: string;
      /**
       * @description Quantity of this item in the cart.
       * @example 5
       */
      quantity: number;
      /**
       * @description Boolean value that specifies whether the item is taxable.
       * @example false
       */
      taxable?: boolean;
      /**
       * Format: uri
       * @description Image of the product or variant.
       * @example https://pathtoproductimage/ProductDefault.png
       */
      image_url?: string;
      discounts?: ({
          id?: string | number;
          /** @description The discounted amount. */
          discounted_amount?: number;
        })[];
      coupons?: OneOf<[number, ({
          /**
           * @description ID of the coupon.
           * @example 6
           */
          id?: number;
          /**
           * @description The coupon code. Required in a /POST request.
           * @example KV56053388J
           */
          code: string;
          /**
           * @description Name given to the coupon in the control panel.
           * @example Percentage off
           */
          name?: string;
          /**
           * @description The discount type.
           * - type 0: per_item_discount
           * - type 1: percentage_discount
           * - type 2: per_total_discount
           * - type 3: shipping_discount
           * - type 4: free_shipping
           * @example 3
           * @enum {integer}
           */
          discountType?: 0 | 1 | 2 | 3 | 4;
          /**
           * @description The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
           * @example 3
           */
          discountAmount?: number;
          /**
           * @description Returns 0 if no expiration date has been set.
           * @example 0
           */
          expiresDate?: number;
          /**
           * @description The total amount of all discounts applied to the cart.
           * @example 4.19
           */
          totalDiscount?: number;
        })[]]>;
      /**
       * @description The total value of all discounts applied to this item. This includes coupons and cart-level discounts.
       * @example 4
       */
      discount_amount?: number;
      /** @description The total value of all coupons applied to this item. */
      coupon_amount?: number;
      /** @description An item’s original price is the same as the product default price in the admin panel. */
      original_price?: number;
      /** @description The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel. To enable v3 promotions at the product level, you must update the [promotion](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#promotion) settings in the control panel. */
      list_price?: number;
      /** @description Price of the item after all discounts are applied. (The final price before tax calculation.) */
      sale_price?: number;
      /** @description List price of the item multiplied by the quantity. */
      extended_list_price?: number;
      /** @description Sale price of the item multiplied by the quantity. */
      extended_sale_price?: number;
      /**
       * @description Whether or not a physical product requires shipping.
       * @example false
       */
      is_require_shipping?: boolean;
      /**
       * @description Whether or not you can change or remove the item from the cart. Items that are immutable include those added automatically by promotions.
       * @example true
       */
      is_mutable?: boolean;
      /**
       * @description Whether or not a promotion added an additional item.
       * @example false
       */
      added_by_promotion?: boolean;
      /** @description The gift wrapping details for this item. */
      gift_wrapping?: {
        /** @example Gift Wrap 1 */
        name?: string;
        /** @example Happy Birthday! */
        message?: string;
        /**
         * Format: float
         * @example 1.99
         */
        amount?: number;
      };
    };
    /**
     * Not Found
     * @description Error payload for the BigCommerce API.
     */
    NotFound: {
      /** @description 404 HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /** @description Response payload for the BigCommerce API. */
    MetafieldResponse: {
      data?: components["schemas"]["Metafield"];
    };
    /** @description Allows app partners to write custom data to various resources in the API. */
    Metafield: components["schemas"]["MetafieldBase"] & {
      /** @description The unique identifier for the metafield. */
      id?: string;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_modified?: string;
      /**
       * @description Client ID for the metafieldʼs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    };
    /** @description Common Metafield properties. */
    MetafieldBase: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example order
       */
      description?: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example cart
       * @enum {string}
       */
      resource_type?: "brand" | "product" | "variant" | "category" | "cart";
      /**
       * @description The unique identifier for the resource with which the metafield is associated.
       *
       * @example 0
       */
      resource_id?: string;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Post: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse: {
      data?: components["schemas"]["Metafield"];
      meta?: components["schemas"]["metaCollection_open"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_Batch: {
      data?: components["schemas"]["Metafield"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_Batch_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionDeleteResponseSuccess: {
      /**
       * @example [
       *   123,
       *   124,
       *   125
       * ]
       */
      data?: number[];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_DELETE: {
      /**
       * @example [
       *   123
       * ]
       */
      data?: number[];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Error response payload for the BigCommerce API. */
    Error: {
      /**
       * @description The HTTP status code for the error.
       *
       * @example 422
       */
      status?: number;
      /**
       * @description The error title.
       *
       * @example Bulk operation has failed
       */
      title?: string;
      /**
       * @description The error type.
       *
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      errors?: components["schemas"]["ErrorDetail"];
    };
    /**
     * @description Error detail response payload for the BigCommerce API.
     *
     * @example {
     *   "1": "Unauthorized to delete",
     *   "2": "Metafield does not exist"
     * }
     */
    ErrorDetail: {
      [key: string]: unknown;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 3
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 0
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionPartialSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 1
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 2
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
      [key: string]: unknown;
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    metaCollection_open: Record<string, never>;
  };
  responses: {
    CartResponse: {
      content: {
        "application/json": {
          data?: components["schemas"]["Cart_Full"];
          meta?: components["schemas"]["metaCollection_open"];
        };
      };
    };
    /** @description Cart conflict */
    CartConflictErrorResponse: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    CartRedirectResponse: {
      content: {
        "application/json": {
          data?: {
            /**
             * Format: url
             * @example https://store.mybigcommerce.com/cart.php?action=load&id=0aa00afa-a000-00a0-00aae-aa0000f000a0&token=00aaaaa0aa0000000000a000a000f0aa0000afa00aa00afa0a000000000aa0a0
             */
            cart_url?: string;
            /**
             * Format: Url
             * @example https://store.mybigcommerce.com/cart.php?action=loadInCheckout&id=1ea11efe-b111-11d1-11ee-cd1110f111b1&token=00aaaaa0aa0000000000a000a000f0aa0000afa00aa00afa0a000000000aa0a0
             */
            checkout_url?: string;
            /**
             * Format: url
             * @example https://store.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=0aa00afa-a000-00a0-00aae-aa0000f000a0&token=00aaaaa0aa0000000000a000a000f0aa0000afa00aa00afa0a000000000aa0a0
             */
            embedded_checkout_url?: string;
          };
          meta?: components["schemas"]["metaCollection_open"];
        };
      };
    };
  };
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    ContentType: string;
    /** @description The identifier of a specific cart. */
    cartId: string;
    /** @description The ID of the `Cart` to which the transactions belong. */
    cart_id: string;
    /**
     * @description * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
     * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
     * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
     * * `promotions.banners`: Returns a list of eligible banners.
     */
    line_items?: ("redirect_urls" | "line_items.physical_items.options" | "line_items.digital_items.options")[];
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam?: number;
    /** @description The ID of the `Metafield`. */
    MetafieldIdParam: number;
    /** @description Filter based on a metafieldʼs key. */
    MetafieldKeyParam?: string;
    /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
    MetafieldKeyInParam?: string[];
    /** @description Filter based on a metafieldʼs namespaces. */
    MetafieldNamespaceParam?: string;
    /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter */
    MetafieldNamespaceInParam?: string[];
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
    /** @description 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.' */
    date_created_min?: string;
    /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.' */
    date_created_max?: string;
    /** @description 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.' */
    date_modified_max?: string;
    /** @description 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.' */
    date_modified_min?: string;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam?: "asc" | "desc";
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    IncludeFieldsParamMetafields?: ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Create a Cart
   * @description Creates a **Cart**.
   *
   * **Required Fields**
   *
   * |Field|Details|
   * |-|-|
   * |`line_item`|Specifies a line item.|
   * |`custom_items`|Specifies a custom item. Only required if adding a custom item to the cart.|
   * |`gift_certificates`|Specifies a gift certificate. Only required if adding a gift certificate to the cart.|
   *
   * **Usage Notes**
   *
   * * A **cart** `id` (UUID) is returned in the response.
   * * A **cart** `id` is the same as a **checkout** `id`.
   * * A cart can be created by adding an existing **catalog item** or a **custom item**.
   * * Carts are valid for **30 days** from the **last modification** (this includes creating the cart or editing the cart).
   * * If a product has modifiers, use the `option_selections` array to describe the **modifier** selection(s).
   * * The format and data type of a cart’s `option_value` are defined by the `value_data` object of a product’s [variant option value](/docs/rest-catalog/product-variant-options/values), [modifier value](/docs/rest-catalog/product-modifiers/values), or a combination of both.
   * * Redirect URLs can only be generated from carts that were created using the **REST Management API**.
   * * To get cart `redirect_urls` in the response, append the following query parameter to the request URL: `include=redirect_urls`. Redirect URLs point to either a shared checkout domain or a channel-specific domain, depending on the storefront configuration.
   * * To restore a cart that was created by a shopper or through a Storefront API, first recreate the cart using the **REST Management API**.
   * * To get cart `promotions` in the response, append the following query parameter to the request URL: `include=promotions.banners`.
   */
  createCart: {
    parameters: {
      query?: {
        /**
         * @description * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: ("redirect_urls" | "line_items.physical_items.options" | "line_items.digital_items.options" | "promotions.banners")[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    /**
     * @description **Examples:**
     *
     * 1. Creating a cart by adding a simple product (a product without option selections).
     * 2. Creating a cart with a variant. This works when a product can be specified purely by a variant, without any other required options.
     * 3. Creating a cart using a date option. The API supports timestamps, “option_value”: 1743570000, and dates as an object literal, “option_value”: {“day”:”01”, “month”:”02”, “year”:”2020”}.
     * 4. Creating a cart with a variant, a checkbox, and a picklist modifier added.
     * 5. Creating a cart using a custom item.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartCreatePostData"];
      };
    };
    responses: {
      201: components["responses"]["CartResponse"];
    };
  };
  /**
   * Add Cart Line Items
   * @description Adds line item to the *Cart*.
   *
   * **Usage Notes**
   *
   * To add a custom item use `custom_items`.
   *
   * By default, overriding a product's list_price makes it ineligible for V3 product-level promotions. In **Store Settings** under **Promotions and Coupons** in the control panel, you can change this behavior to allow promotions on overridden prices.
   *
   * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
   *
   * To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
   */
  addCartLineItems: {
    parameters: {
      query?: {
        /**
         * @description * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: ("redirect_urls" | "line_items.physical_items.options" | "line_items.digital_items.options" | "promotions.banners")[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cart_Line_Item_Update_Post"];
      };
    };
    responses: {
      201: components["responses"]["CartResponse"];
    };
  };
  /**
   * Create Cart Redirect URL
   * @description Creates a **Cart** redirect URL for redirecting a shopper to an already created cart using the `cartId`.
   *
   * **Usage Notes**
   *
   * * To use redirect URLs, first create the cart using the REST Management API or GraphQL Storefront API.
   * * Redirect URLs can also be created with **Create a Cart** requests by appending `include=redirect_urls`.
   * * A **Carts** redirect URL is valid for 30 days and may only be used once.
   * * Redirect URLs point to either a shared checkout domain or a channel-specific domain, depending on the storefront configuration.
   * * Once a redirect URL has been visited, it will be invalidated and cannot be used again.
   * * If your application requires URLs to be visited more than once, consider generating a fresh one each time you need to restore a cart, and redirecting to the URL from your own application.
   * * To restore a cart that was created on the storefront, either by a shopper or a Storefront API, first recreate the cart using the **REST Management API**.
   * * When redirecting the shopper, you can add a set of `query_params` to the URL. The `query_params` feature allows passing additional information to the redirect URL.
   */
  createCartRedirectURL: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "query_params": {
         *     "key_1": "value_1",
         *     "key_2": "value_2"
         *   }
         * }
         */
        "application/json": components["schemas"]["Redirect_urls_Post"];
      };
    };
    responses: {
      201: components["responses"]["CartRedirectResponse"];
    };
  };
  /**
   * Update Cart Line Item
   * @description Updates an existing, single line item in the *Cart*.
   *
   * **Notes**
   *
   * Currently, only updating `list_price` and `quantity` are supported. By default, overriding a product's list_price makes it ineligible for V3 product-level promotions. In **Store Settings** under **Promotions and Coupons** in the control panel, you can change this behavior to allow promotions on overridden prices.
   *
   * If the product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
   *
   * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the **Add Cart Line Items** endpoint.
   *
   * `custom_items` cannot be updated via the API at this time. To update your cart, add a new updated custom item and delete the outdated one. If your cart contains only one line item, perform the add operation before the delete operation.
   *
   * Deleting all line items from the cart will invalidate the cart.
   *
   * To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
   */
  updateCartLineItem: {
    parameters: {
      query?: {
        /**
         * @description * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: ("redirect_urls" | "line_items.physical_items.options" | "line_items.digital_items.options" | "promotions.banners")[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
        itemId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cart_Line_Item_Update_Put"];
      };
    };
    responses: {
      200: components["responses"]["CartResponse"];
      409: components["responses"]["CartConflictErrorResponse"];
    };
  };
  /**
   * Delete Cart Line Item
   * @description Deletes a *Cart* line item.
   *
   * **Notes**
   *
   * Removing the last `line_item` in the *Cart* deletes the *Cart*.
   *
   * To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
   */
  deleteCartLineItem: {
    parameters: {
      query?: {
        /**
         * @description * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: ("redirect_urls" | "line_items.physical_items.options" | "line_items.digital_items.options" | "promotions.banners")[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
        itemId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CartLineItemDelete"];
      };
    };
    responses: {
      /** @description NOTE: Discounted line items are re-evaluated on cart actions and may be automatically added back to your cart with a new line item ID to satisfy promotional requirements. */
      200: {
        content: {
          "application/json": components["schemas"]["Cart_Full"];
        };
      };
      /** @description If the action’s result is an empty cart, the cart is automatically deleted. */
      204: {
        content: never;
      };
      409: components["responses"]["CartConflictErrorResponse"];
    };
  };
  /**
   * Get a Cart
   * @description Returns a storeʼs *Cart*.
   */
  getCart: {
    parameters: {
      query?: {
        /**
         * @description * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: ("redirect_urls" | "line_items.physical_items.options" | "line_items.digital_items.options" | "promotions.banners")[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
      };
    };
    responses: {
      200: components["responses"]["CartResponse"];
      /** @description Cart not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update Customer ID
   * @description Updates a *Cartʼs* `customer_id`.
   *
   * **Notes**
   *
   * Changing the *Cart* `customer_id` will remove any promotions or shipping calculations on the *Cart*. These are tied to the customer depending on cart conditions and any customer groups.
   *
   * To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
   */
  updateCart: {
    parameters: {
      query?: {
        /**
         * @description * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: ("redirect_urls" | "line_items.physical_items.options" | "line_items.digital_items.options" | "promotions.banners")[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "customer_id": 5,
         *   "version": 1
         * }
         */
        "application/json": components["schemas"]["CartUpdatePutRequestData"];
      };
    };
    responses: {
      201: components["responses"]["CartResponse"];
      409: components["responses"]["CartConflictErrorResponse"];
    };
  };
  /**
   * Delete a Cart
   * @description Deletes a *Cart*. Once a *Cart* has been deleted it can’t be recovered.
   */
  deleteCart: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cartId: components["parameters"]["cartId"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /**
   * Get Global Cart Settings
   * @description Returns the global cart settings of a store.
   *
   *   ### OAuth scopes
   *
   *   | UI Name | Permission | Parameter |
   *   |:--------|:-----------|:----------|
   *   |Information & Settings | modify | `store_v2_information`|
   *   |Information & Settings | read-only| `store_v2_information`|
   */
  getGlobalCartSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GlobalCartSettingsResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Global Cart Settings
   * @description Update the global cart settings of a store.
   *   *Authentication*
   *   ### OAuth scopes
   *
   *   | UI Name | Permission | Parameter |
   *   |:--------|:-----------|:----------|
   *   |Information & Settings | modify | `store_v2_information`|
   *   |Information & Settings | read-only| `store_v2_information`|
   */
  updateGlobalCartSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GlobalCartSettingsRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GlobalCartSettingsResponse"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Channel Cart Settings
   * @description Returns the per-channel overrides for the cart settings of a store.
   *
   *   ### OAuth scopes
   *
   *   | UI Name | Permission | Parameter |
   *   |:--------|:-----------|:----------|
   *   |Information & Settings | modify | `store_v2_information`|
   *   |Information & Settings | read-only| `store_v2_information`|
   */
  getChannelCartSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /**
         * @description The channel ID of the settings overrides.
         *
         * ### OAuth scopes
         *
         * | UI Name | Permission | Parameter |
         * |:--------|:-----------|:----------|
         * |Information & Settings | modify | `store_v2_information`|
         * |Information & Settings | read-only| `store_v2_information`|
         */
        channel_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChannelCartSettingsResponse"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Channel Cart Settings
   * @description Update the per-channel overrides for the cart settings of a store.
   *
   * ### OAuth scopes
   *
   * | UI Name | Permission | Parameter |
   * |:--------|:-----------|:----------|
   * |Information & Settings | modify | `store_v2_information`|
   * |Information & Settings | read-only| `store_v2_information`|
   */
  updateChannelCartSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        /**
         * @description The channel ID of the settings overrides.
         *
         * ### OAuth scopes
         *
         * | UI Name | Permission | Parameter |
         * |:--------|:-----------|:----------|
         * |Information & Settings | modify | `store_v2_information`|
         * |Information & Settings | read-only| `store_v2_information`|
         */
        channel_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChannelCartSettingsRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChannelCartSettingsResponse"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Cart Metafields
   * @description Get a cart's metafields.
   */
  getCartMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        direction?: components["parameters"]["DirectionParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cart_id: components["parameters"]["cart_id"];
      };
    };
    responses: {
      /** @description An array of metafields and metadata. */
      200: {
        content: {
          "application/json": components["schemas"]["MetafieldResponse"];
        };
      };
    };
  };
  /**
   * Create a Cart Metafield
   * @description Create a cart `Metafield`.
   *
   * If you create an order from a Cart, you can continue referencing the Cart Metafields even if you delete the original Cart. Use the `cart_id` field on the Order to construct the Cart Metafield endpoint.
   */
  createCartMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        cart_id: components["parameters"]["cart_id"];
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "permission_set": "app_only",
         *   "namespace": "Sales Department",
         *   "key": "Staff Name",
         *   "value": "Sam",
         *   "description": "Name of staff member"
         * }
         */
        "application/json": components["schemas"]["MetafieldBase_Post"];
      };
    };
    responses: {
      /** @description A `Metafield` object. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description The `Metafield` conflicts with another `Metafield`. This can result from duplicate unique key combinations of the appʼs client id, namespace, key, resource_type, and resource_id. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a Cart Metafield
   * @description Gets a cart metafield.
   */
  getCartMetafield: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        direction?: components["parameters"]["DirectionParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cart_id: components["parameters"]["cart_id"];
        /** @description The unique ID of the subject `Metafield`. */
        metafield_id: number;
      };
    };
    responses: {
      /** @description A `Metafield` object. */
      200: {
        content: {
          "application/json": components["schemas"]["MetafieldResponse"];
        };
      };
      /** @description Not found (A metafield was not found with this query). */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /**
   * Update a Cart Metafield
   * @description Update a `Metafield`, by `cart_id`.
   */
  updateCartMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        cart_id: components["parameters"]["cart_id"];
        /** @description The unique ID of the subject `Metafield`. */
        metafield_id: number;
      };
    };
    /** @description A `Metafield` object. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MetafieldBase_Post"];
      };
    };
    responses: {
      /** @description A `Metafield` and metadata. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
      /** @description Bad Request. Metafield is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Delete a Metafield
   * @description Deletes a `Metafield`.
   */
  deleteCartMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        cart_id: components["parameters"]["cart_id"];
        /** @description The unique ID of the subject `Metafield`. */
        metafield_id: number;
      };
    };
    responses: {
      /** @description An empty response. */
      204: {
        content: never;
      };
      /** @description Not found (A metafield was not found with this query) */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /**
   * Get All Cart Metafields
   * @description Get all cart metafields.
   */
  getCartsMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        "key:in"?: components["parameters"]["MetafieldKeyInParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
        direction?: components["parameters"]["DirectionParam"];
        include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
        "date_modified:min"?: components["parameters"]["date_modified_min"];
        "date_modified:max"?: components["parameters"]["date_modified_max"];
        "date_created:min"?: components["parameters"]["date_created_min"];
        "date_created:max"?: components["parameters"]["date_created_max"];
      };
    };
    responses: {
      /** @description List of `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch"];
        };
      };
    };
  };
  /**
   * Update multiple Metafields
   * @description Create multiple metafields.
   */
  updateCartsMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            id: string;
          })[];
      };
    };
    responses: {
      /** @description List of updated `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Create multiple Metafields
   * @description Create multiple metafields.
   */
  createCartsMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID for the cart with which the metafield is associated.
             *
             * @example 42
             */
            resource_id: string;
          })[];
      };
    };
    responses: {
      /** @description List of created `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Delete multiple Metafields
   * @description Delete all cart metafields.
   */
  deleteCartsMetafields: {
    /** @description List of metafield `id`s. */
    requestBody?: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Response object for metafields deletion with success. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields deletion with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
        };
      };
    };
  };
}
