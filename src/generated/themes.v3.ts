// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/themes": {
    /**
     * Get all Themes
     * @description Returns a list of store *Themes*.
     */
    get: operations["getStoreThemes"];
    /**
     * Upload a Theme
     * @description Uploads a new *Theme* to your BigCommerce store.
     *
     * **Required Fields**
     * * file
     */
    post: operations["uploadStoreTheme"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/themes/{uuid}": {
    /**
     * Get a Theme
     * @description Returns a store *Theme*. The theme variation is not available at this endpoint.
     */
    get: operations["getStoreTheme"];
    /**
     * Delete a Theme
     * @description Deletes a store *Theme*.
     * Theme variations can not be deleted using this endpoint. This will delete the theme and all variations.
     */
    delete: operations["deleteStoreTheme"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["ThemeIdParam"];
      };
    };
  };
  "/themes/{uuid}/actions/download": {
    /**
     * Download a Theme
     * @description Downloads a stores *Theme*.
     */
    post: operations["downloadStoreTheme"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["ThemeIdParam"];
      };
    };
  };
  "/themes/actions/activate": {
    /**
     * Activate a Theme
     * @description Actives a store *Theme*.
     *
     * This returns a 204 response upon success.
     */
    post: operations["activateStoreTheme"];
    parameters: {
      query?: {
        /** @description The ID for the channel where you want to activate the theme. */
        channel_id?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/themes/jobs/{job_id}": {
    /**
     * Get a Theme Job
     * @description Returns a theme *Job*. When the job is complete, the results array provides a generated link to access the theme. The link is active for 60 seconds.
     */
    get: operations["getStoreThemeJob"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        job_id: components["parameters"]["JobIdParam"];
      };
    };
  };
  "/themes/{uuid}/configurations": {
    /**
     * Get Theme Configuration
     * @description Returns a list of theme's configurations.
     *
     * **Usage Notes**:
     * * At least one filter must be provided.
     */
    get: operations["getThemeConfiguration"];
    parameters: {
      query: {
        /** @description Filter configurations by passing a comma-separated list of site IDs. */
        "site_id:in": number[];
        /** @description Filter configurations by a list of configuration UUIDs. */
        "uuid:in"?: string[];
        /** @description Filter configurations by a variation_uuid */
        variation_uuid?: string;
        /** @description Specifies the page number in a limited (paginated) list. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/themes/{uuid}/configurations/validate": {
    /**
     * Validate Theme Configuration
     * @description Validates a theme configuration against the theme's schema without creating it. Useful for testing schemas before creation.
     */
    post: operations["validateThemeConfiguration"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["ThemeIdParam"];
      };
    };
  };
  "/themes/custom-templates/{version_uuid}": {
    /**
     * Get Custom Templates
     * @description Enumerate available custom templates for in the theme files in a specific theme version for each supported entity type.
     */
    get: operations["getThemeCustomTemplates"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        version_uuid: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
    };
    /**
     * Themes Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    ThemesCollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
      };
    };
    /**
     * Pagination
     * @description Data about the response, including pagination and collection totals.
     */
    Pagination: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    Meta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
    };
    /** Error Response */
    ErrorResponse: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    } & {
      /** Detailed Errors */
      errors?: {
        [key: string]: unknown;
      };
    };
    /**
     * Base Error
     * @description Error payload for the BigCommerce API.
     */
    BaseError: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /** Detailed Errors */
    DetailedErrors: {
      [key: string]: unknown;
    };
    /**
     * Not Found
     * @description Error payload for the BigCommerce API.
     */
    NotFound: {
      /** @description 404 HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /**
     * Job Id
     * @description The job identifier for theme upload or download.
     */
    JobId: {
      /** @description The job identifier. */
      job_id?: string;
    };
    /**
     * No Content
     * @description No-content response for the BigCommerce API.
     */
    NoContent: {
      /** @description 204 HTTP status code. */
      status?: number;
      /** @description The error title describing the situation. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /**
     * Job
     * @description The job for theme upload or download
     */
    Job: {
      /** @description The errors. */
      errors?: {
          /** @description The error. */
          error?: string;
          /** @description The message. */
          message?: string;
        }[];
      /** @description The identifier. */
      id?: string;
      /** @description The percent complete. */
      percent_complete?: number;
      /** @description The result. */
      result?: {
        [key: string]: unknown;
      };
      /**
       * @description The status.
       * @enum {string}
       */
      status?: "COMPLETED" | "QUEUED" | "WORKING" | "FAILED";
      /**
       * Format: date-time
       * @description The time.
       */
      time?: string;
      /** @description The warnings. */
      warnings?: {
          /** @description The message. */
          message?: string;
          /** @description The warning. */
          warning?: string;
        }[];
    };
    /** @description A theme. */
    Theme: {
      /** @description The variations. */
      variations?: {
          /** @description The description. */
          description?: string;
          /** @description The external identifier. */
          external_id?: string;
          /** @description The name. */
          name?: string;
          /** @description The identifier. */
          uuid?: string;
        }[];
      /** @description The identifier. */
      uuid?: string;
      /** @description The theme name identifier. */
      name?: string;
      /** @description Flag to identify private themes. */
      is_private?: boolean;
      /** @description Indicates whether this theme is active on the storefront. */
      is_active?: boolean;
      /** @description The date-time of the last theme update. */
      updated_at?: string;
    };
    /**
     * Activate
     * @description Request definition for activation endpoint.
     */
    Activate: {
      /** @description The identifier for the variation to activate. */
      variation_id: string;
      /**
       * @description Which configuration to use.
       * @enum {string}
       */
      which?: "original" | "last_activated" | "last_created";
    };
    /** @description A variation. */
    Variation: {
      /** @description The description. */
      description?: string;
      /** @description The external identifier. */
      external_id?: string;
      /** @description The name. */
      name?: string;
      /** @description The identifier. */
      uuid?: string;
    };
    /**
     * Themes Collection Response
     * @description Response payload for the BigCommerce API.
     */
    ThemesCollectionResponse: {
      data?: {
          /** @description The variations. */
          variations?: {
              /** @description The description. */
              description?: string;
              /** @description The external identifier. */
              external_id?: string;
              /** @description The name. */
              name?: string;
              /** @description The identifier. */
              uuid?: string;
            }[];
          /** @description The identifier. */
          uuid?: string;
          /** @description The theme name identifier. */
          name?: string;
          /** @description Flag to identify private themes. */
          is_private?: boolean;
          /** @description Indicates whether this theme is active on the storefront. */
          is_active?: boolean;
          /** @description The date-time of the last theme update. */
          updated_at?: string;
        }[];
      /**
       * Collection Meta
       * @description Data about the response, including pagination and collection totals.
       */
      meta?: {
        /**
         * Pagination
         * @description Data about the response, including pagination and collection totals.
         */
        pagination?: {
          /**
           * @description Total number of items in the result set.
           *
           * @example 36
           */
          total?: number;
          /**
           * @description Total number of items in the collection response.
           *
           * @example 36
           */
          count?: number;
          /**
           * @description The amount of items returned in the collection per page, controlled by the limit parameter.
           *
           * @example 50
           */
          per_page?: number;
          /**
           * @description The page you are currently on within the collection.
           *
           * @example 1
           */
          current_page?: number;
          /**
           * @description The total number of pages in the collection.
           *
           * @example 1
           */
          total_pages?: number;
          /** @description Pagination links for the previous and next parts of the whole collection. */
          links?: {
            /** @description Link to the previous page returned in the response. */
            previous?: string;
            /**
             * @description Link to the current page returned in the response.
             *
             * @example ?page=1&limit=50
             */
            current?: string;
            /** @description Link to the next page returned in the response. */
            next?: string;
          };
        };
      };
    };
    /**
     * Theme Response
     * @description Response payload for the BigCommerce API.
     */
    ThemeResponse: {
      data?: components["schemas"]["Theme"];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /**
     * Job Response
     * @description Response for /GET Jobs by Id.
     */
    JobResponse: {
      /**
       * Job
       * @description The job for theme upload or download
       */
      data?: {
        /** @description The errors. */
        errors?: {
            /** @description The error. */
            error?: string;
            /** @description The message. */
            message?: string;
          }[];
        /** @description The identifier. */
        id?: string;
        /** @description The percent complete. */
        percent_complete?: number;
        /** @description The result. */
        result?: {
          [key: string]: unknown;
        };
        /**
         * @description The status.
         * @enum {string}
         */
        status?: "COMPLETED" | "QUEUED" | "WORKING" | "FAILED";
        /**
         * Format: date-time
         * @description The time.
         */
        time?: string;
        /** @description The warnings. */
        warnings?: {
            /** @description The message. */
            message?: string;
            /** @description The warning. */
            warning?: string;
          }[];
      };
      meta?: components["schemas"]["OpenMeta"];
    };
    /**
     * Which Theme To Download
     * @description An object specifying which theme to download. One of: `original`: the original Marketplace or uploaded custom theme; `last_activated`: the theme version most recently applied to the store; `last_created`: the theme version most recently created.
     */
    WhichThemeToDownload: {
      /**
       * @description Which revision to use.
       * @enum {string}
       */
      which?: "original" | "last_activated" | "last_created";
    };
    /**
     * Request Headers
     * @description These are the minium request headers needed for BigCommerce.
     */
    RequestHeaders: {
      /** @default application/json */
      Accepts?: string;
    };
    /**
     * themeConfiguration_Full
     * @description A theme.
     */
    themeConfiguration_Full: {
      uuid?: string;
      /** @description The Theme to which the Configuration belongs. */
      theme_uuid?: string;
      /** @description The Variation to which the Configuration belongs. */
      variation_id?: string;
      /** @description The content of the configuration, which is a JSON object which will vary in structure from theme to theme. */
      settings?: Record<string, never>;
      date_created?: string;
      /** @description Site ID to which this configuration belongs. Will be 0 for the original configuration for a Theme. */
      site_id?: number;
    };
    /**
     * themeConfiguration_Write
     * @description A theme.
     */
    themeConfiguration_Write: {
      /** @description The Variation to which the Configuration belongs. */
      variation_id?: string;
      /** @description The content of the configuration, which is a JSON object which will vary in structure from theme to theme. */
      settings?: Record<string, never>;
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    OpenMeta: {
      [key: string]: unknown;
    };
  };
  responses: {
    themesConfigurations_RespCollection: {
      content: {
        "application/json": {
          data?: components["schemas"]["themeConfiguration_Full"][];
          meta?: components["schemas"]["ThemesCollectionMeta"];
        };
      };
    };
  };
  parameters: {
    /** @description The job identifier. */
    JobIdParam: string;
    /** @description The theme identifier. */
    ThemeIdParam: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description Specifies the page number in a limited (paginated) list. */
    PageParam?: number;
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all Themes
   * @description Returns a list of store *Themes*.
   */
  getStoreThemes: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ThemesCollectionResponse"];
        };
      };
    };
  };
  /**
   * Upload a Theme
   * @description Uploads a new *Theme* to your BigCommerce store.
   *
   * **Required Fields**
   * * file
   */
  uploadStoreTheme: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description The file.
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description Job ID for the background job processing the theme upload. */
      201: {
        content: {
          "application/json": components["schemas"]["JobId"];
        };
      };
      /** @description Error message. */
      default: {
        content: {
          "application/json": {
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          } & {
            /** DetailedErrors */
            errors?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Get a Theme
   * @description Returns a store *Theme*. The theme variation is not available at this endpoint.
   */
  getStoreTheme: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["ThemeIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ThemeResponse"];
        };
      };
      /** @description Error message. */
      default: {
        content: {
          "application/json": {
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          } & {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Delete a Theme
   * @description Deletes a store *Theme*.
   * Theme variations can not be deleted using this endpoint. This will delete the theme and all variations.
   */
  deleteStoreTheme: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["ThemeIdParam"];
      };
    };
    responses: {
      204: {
        content: never;
      };
      /** @description Error message. */
      default: {
        content: {
          "application/json": {
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          } & {
            /** DetailedErrors */
            errors?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Download a Theme
   * @description Downloads a stores *Theme*.
   */
  downloadStoreTheme: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        uuid: components["parameters"]["ThemeIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WhichThemeToDownload"];
      };
    };
    responses: {
      /** @description Job ID for the background job processing the download. */
      200: {
        content: {
          "application/json": components["schemas"]["JobId"];
        };
      };
      /** @description Error message. */
      default: {
        content: {
          "application/json": {
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          } & {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Activate a Theme
   * @description Actives a store *Theme*.
   *
   * This returns a 204 response upon success.
   */
  activateStoreTheme: {
    parameters: {
      query?: {
        /** @description The ID for the channel where you want to activate the theme. */
        channel_id?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    /** @description Request parameters. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Activate"];
      };
    };
    responses: {
      /** @description This returns when the request is successful. */
      204: {
        content: {
          "application/json": components["schemas"]["NoContent"];
        };
      };
      /** @description Error message. */
      default: {
        content: {
          "application/json": {
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          } & {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Get a Theme Job
   * @description Returns a theme *Job*. When the job is complete, the results array provides a generated link to access the theme. The link is active for 60 seconds.
   */
  getStoreThemeJob: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        job_id: components["parameters"]["JobIdParam"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JobResponse"];
        };
      };
      /** @description Error message. */
      default: {
        content: {
          "application/json": {
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          } & {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
          };
        };
      };
    };
  };
  /**
   * Get Theme Configuration
   * @description Returns a list of theme's configurations.
   *
   * **Usage Notes**:
   * * At least one filter must be provided.
   */
  getThemeConfiguration: {
    parameters: {
      query: {
        /** @description Filter configurations by passing a comma-separated list of site IDs. */
        "site_id:in": number[];
        /** @description Filter configurations by passing a comma-separated list of configuration UUIDs. */
        "uuid:in"?: string[];
        /** @description Filter configurations by a variation_uuid. */
        variation_uuid?: string;
        /** @description Specifies the page number in a limited (paginated) list. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        limit?: number;
        /** @description Filter configurations by passing a comma-separated list of channel IDs. */
        "channel_id:in"?: number[];
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        uuid: components["parameters"]["ThemeIdParam"];
      };
    };
    responses: {
      200: components["responses"]["themesConfigurations_RespCollection"];
    };
  };
  /**
   * Validate Theme Configuration
   * @description Validates a theme configuration against the theme's schema without creating it. Useful for testing schemas before creation.
   */
  validateThemeConfiguration: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        uuid: components["parameters"]["ThemeIdParam"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["themeConfiguration_Write"];
      };
    };
    responses: {
      /** @description Theme passes validation. */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Theme failed validation, detailed errors in response. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Custom Templates
   * @description Enumerate available custom templates for in the theme files in a specific theme version for each supported entity type.
   */
  getThemeCustomTemplates: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        version_uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            data?: {
              product?: string[];
              category?: string[];
              brand?: string[];
              page?: string[];
            };
            meta?: components["schemas"]["OpenMeta"];
          };
        };
      };
    };
  };
}
