// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/blog/tags": {
    /**
     * Get All Blog Tags
     * @description Returns a list of *Blog Tags*.
     */
    get: operations["getBlogTags"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/blog/posts": {
    /**
     * Get All Blog Posts
     * @description Returns all *Blog Posts*. Default sorting is by published_date, beginning with the most recent post.
     */
    get: operations["getBlogPosts"];
    /**
     * Create a Blog Post
     * @description Creates a *Blog Post*.
     *
     * **Required Fields**
     * *   `title`
     * *   `body`
     *
     * **Notes**
     *
     * * When including `published_date` in a request, supply it as a flat date string (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a>. The following example request includes a `published_date` in RFC 2822 format.
     * * Blog posts default to draft status. To publish blog posts to the storefront, set the `is_published` property to `true`.
     * * If a custom URL is not provided, the post’s URL will be generated based on the value of `title`.
     */
    post: operations["createBlogPosts"];
    /**
     * Delete Blog Posts
     * @description Deletes a page of `Blog Posts`.
     */
    delete: operations["deleteBlogPosts"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/blog/posts/{id}": {
    /**
     * Get a Blog Post
     * @description Returns a single *Blog Post*.
     */
    get: operations["getBlogPost"];
    /**
     * Update a Blog Post
     * @description Updates a *Blog Post*.
     *
     * **Notes**
     *
     * * To include `published_date` in a request, provide a flat date string (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a>. The following example request includes a `published_date` in RFC 2822 format.
     *
     * * Blog posts default to draft status. To publish blog posts to the storefront, set the `is_published` property to `true`.
     */
    put: operations["updateBlogPost"];
    /**
     * Delete a Blog Post
     * @description Deletes a *Blog Post*.
     */
    delete: operations["deleteBlogPost"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description ID of the blog post. */
        id: number;
      };
    };
  };
  "/blog/posts/count": {
    /**
     * Get A Count of All Blog Posts
     * @description Returns a count of all *Blog Posts*.
     */
    get: operations["getBlogPostsCount"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/pages": {
    /**
     * Get All Pages (Deprecated)
     * @deprecated
     * @description Returns a list of *Pages*. Default sorting is by auto-generated ID from oldest to newest.
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To get one or more pages, use Pages V3ʼs [Get pages](/docs/rest-content/pages#get-pages) endpoint. To get a single page, use Pages V3ʼs [Get a page](/docs/rest-content/pages#get-a-page) endpoint.
     */
    get: operations["getPages"];
    /**
     * Create a Page (Deprecated)
     * @deprecated
     * @description Creates a *Page*. The request payload limit is 1MB.
     *
     * **Required Fields**
     * *   `type`
     * *   `name`
     * *   `link` (for a page of `type: link`)
     * *   `feed` (for a page of `type: rss_feed`)
     * *   `body` (for a page of `type: raw`)
     *
     * **Read Only Fields**
     * *   `id`
     *
     * ## Content Type
     *
     * The default value for `content_type` is `text/html`; however, if `page_type` is set to `raw`, `content_type` can be changed to `text/javascript` or `application/json`. Updating this field lets you place a JavaScript or a JSON file in the root directory.
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To create one or more pages, use Pages V3ʼs [Create pages](/docs/rest-content/pages#create-pages) endpoint.
     */
    post: operations["createPage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/pages/{id}": {
    /**
     * Get A Page (Deprecated)
     * @deprecated
     * @description Returns a *Page*.
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To get a single page, use Pages V3ʼs [Get a page](/docs/rest-content/pages#get-a-page) endpoint.
     */
    get: operations["getPage"];
    /**
     * Update a Page (Deprecated)
     * @deprecated
     * @description Updates a *Page*. The request payload limit is 1MB.
     *
     * **Read Only Fields**
     * * id
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To update multiple pages, use Pages V3ʼs [Update pages](/docs/rest-content/pages#update-pages) endpoint. To update a single page, use Pages V3ʼs [Update a page](/docs/rest-content/pages#update-a-page) endpoint.
     */
    put: operations["updatePage"];
    /**
     * Delete a Page (Deprecated)
     * @deprecated
     * @description Deletes a *Page*.
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To delete multiple pages, use Pages V3ʼs [Delete pages](/docs/rest-content/pages#delete-pages) endpoint. To delete a single page, use Pages V3ʼs [Delete a page](/docs/rest-content/pages#delete-a-page) endpoint.
     */
    delete: operations["deletePage"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description ID of the page. */
        id: number;
      };
    };
  };
  "/redirects": {
    /**
     * Get All Redirects
     * @deprecated
     * @description Returns a list all *Redirect URLs*.
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To get redirect URLs, use Redirects V3ʼs [Get redirects](/docs/rest-management/redirects#get-redirects) endpoint.
     */
    get: operations["getRedirects"];
    /**
     * Create a Redirect
     * @description Creates a *Redirect URL*.
     *
     * **Required Fields**
     * *   path
     * *   forward
     *
     * **Read Only**
     * *   url
     *
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To upsert new redirect data, use Redirects V3ʼs [Upsert redirects](/docs/rest-management/redirects#upsert-redirects) endpoint.
     */
    post: operations["createRedirect"];
    /**
     * Delete All Redirects
     * @deprecated
     * @description By default, it deletes all *Redirect URLs* in a store.
     *
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To delete redirect URLs, use Redirects V3ʼs [Delete redirects](/docs/rest-management/redirects#delete-redirects) endpoint.
     */
    delete: operations["deleteRedirects"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/redirects/{id}": {
    /**
     * Get a Redirect
     * @deprecated
     * @description Returns a single *Redirect URL*.
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To get a redirect URL, use Redirects V3ʼs [Get redirects](/docs/rest-management/redirects#get-redirects) endpoint.
     */
    get: operations["getRedirect"];
    /**
     * Update a Redirect
     * @description Updates a *Redirect URL*.
     *
     * **Required Fields**
     * *   path
     * *   forward
     *
     * **Read Only Fields**
     * *   url
     *
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To update redirect data, use Redirects V3ʼs [Upsert redirects](/docs/rest-management/redirects#upsert-redirects) endpoint.
     */
    put: operations["updateRedirect"];
    /**
     * Delete a Redirect
     * @description Deletes a *Redirect URL*.
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To delete a redirect URL, use Redirects V3ʼs [Delete redirects](/docs/rest-management/redirects#delete-redirects) endpoint.
     */
    delete: operations["deleteRedirect"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description ID of the redirect URL. */
        id: number;
      };
    };
  };
  "/redirects/count": {
    /**
     * Get a Count of Redirects
     * @deprecated
     * @description Gets a count of *Redirect URLs* in a store.
     *
     * > #### Warning
     * > **Deprecated**
     * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
     * > * To get a count of redirects, use the `meta` object data returned with the Redirects V3ʼs [Get redirects](/docs/rest-management/redirects#get-redirects) endpoint.
     */
    get: operations["getRedirectsCount"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * blogPost_Full
     * @example {
     *   "id": 3,
     *   "title": "Welcome to BigCommerce",
     *   "url": "/blog/welcome-bigcommerce/",
     *   "preview_url": "/blog/welcome-bigcommerce/",
     *   "body": "<p>Customize your site, manage shipping and payments, and list your products on Amazon, eBay, and Facebook by Meta with the #1 ecommerce platform. </p>",
     *   "tags": [
     *     "string"
     *   ],
     *   "summary": "<p>We power ecommerce websites for successful retailers all over the world</p>",
     *   "is_published": true,
     *   "published_date": {
     *     "timezone_type": 1,
     *     "date": "2018-05-18T08:26:42Z",
     *     "timezone": "+00:00"
     *   },
     *   "published_date_iso8601": "5/18/2018 1:26:42 PM",
     *   "meta_description": "Welcome Post",
     *   "meta_keywords": "BigCommerce, welcome, ecommerce",
     *   "author": "BigCommerce",
     *   "thumbnail_path": "string"
     * }
     */
    blogPost_Full: {
      /**
       * @description ID of this blog post. READ-ONLY.
       * @example 3
       */
      id?: number;
    } & components["schemas"]["blogPost_Base_Res"];
    /** addresses */
    addresses: {
      /**
       * @description Full URL of where the resource is located.
       * @example https://api.bigcommerce.com/stores/{store_hash}/v2/customers/5/addresses
       */
      url?: string;
      /**
       * @description Resource being accessed.
       * @example /customers/5/addresses
       */
      resource?: string;
    };
    /** formField */
    formField: {
      /**
       * @description Name of the form field
       * @example License Id
       */
      name?: string;
      /**
       * @description Value of the form field
       * @example 123BAF
       */
      value?: string;
    };
    /** page_Full */
    page_Full: {
      /**
       * @description ID of the page. Read-Only.
       * @example 44
       */
      id?: number;
    } & components["schemas"]["page_Base_Res"];
    /**
     * redirect
     * @example {
     *   "id": 1,
     *   "path": "/smith-journal-13/",
     *   "forward": {
     *     "type": "product",
     *     "ref": 111
     *   },
     *   "url": "http://store-store_hash.mybigcommerce.com/towels/bath-towels/hand-towels/"
     * }
     */
    redirect: {
      /**
       * @description Numeric ID of the redirect.
       * @example 1
       */
      id?: number;
      /**
       * @description The path from which to redirect.
       * @example /smith-journal-13/
       */
      path: string;
      forward: components["schemas"]["forward"];
      /**
       * @description URL of the redirect. READ-ONLY.
       * @example http://store-store_hash.mybigcommerce.com/towels/bath-towels/hand-towels/
       */
      url?: string;
    };
    /** forward */
    forward: {
      /**
       * @description The type of redirect. If it is a `manual` redirect then type will always be manual. Dynamic redirects will have the type of the page. Such as product or category.
       * @example product
       */
      type?: string;
      /**
       * @description Reference of the redirect. Dynamic redirects will have the category or product number. Manual redirects will have the url that is being directed to.
       * @example 111
       */
      ref?: number;
    };
    /** customer_Full */
    customer_Full: {
      /**
       * @description Unique numeric ID of this customer. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
       * @example 1
       */
      id?: number;
      /** @description Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
      _authentication?: {
        force_reset?: string;
        password?: string;
        password_confirmation?: string;
      };
      /**
       * @description The name of the company for which the customer works.
       * @example BigCommerce
       */
      company?: string;
      /**
       * @description First name of the customer.
       * @example Jane
       */
      first_name: string;
      /**
       * @description Last name of the customer.
       * @example Doe
       */
      last_name: string;
      /**
       * @description Email address of the customer.
       * @example janedoe@example.com
       */
      email: string;
      /**
       * @description Phone number of the customer.
       * @example 1234567890
       */
      phone?: string;
      /**
       * Format: date-time
       * @description Date on which the customer registered from the storefront or was created in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
       */
      date_modified?: string;
      /**
       * @description The amount of credit the customer has. (Float, Float as String, Integer)
       * @example 0
       */
      store_credit?: string;
      /**
       * @description The customer’s IP address when they signed up.
       * @example 12.345.678.910
       */
      registration_ip_address?: string;
      /**
       * @description The group to which the customer belongs.
       * @example 2
       */
      customer_group_id?: number;
      /** @description Store-owner notes on the customer. */
      notes?: string;
      /** @description If applicable, the tax-exempt category of the shopperʼs customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration. */
      tax_exempt_category?: string;
      /**
       * @description Records whether the customer would like to receive marketing content from this store. READ-ONLY.This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
       *
       * @example true
       */
      accepts_marketing?: boolean;
      addresses?: components["schemas"]["addresses"];
      /** @description Array of custom fields. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
      form_fields?: readonly components["schemas"]["formField"][];
      /**
       * @description Force a password change on next login.
       * @example false
       */
      reset_pass_on_login?: boolean;
    };
    /** categoryAccessLevel */
    categoryAccessLevel: {
      /**
       * @description + `all` - Customers can access all categories
       * + `specific`  - Customers can access a specific list of categories
       * + `none` - Customers are prevented from viewing any of the categories in this group.
       * @enum {string}
       */
      type?: "all" | "specific" | "none";
      /** @description A comma-separated list of category IDs. Should be supplied only if `type` is `specific`. */
      categories?: number[];
    };
    /** timeZone */
    timeZone: {
      /**
       * @description A string identifying the time zone, in the format: `<Continent-name>/<City-name>`.
       *
       * @example America/Chicago
       */
      name?: string;
      /**
       * @description A negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
       * @example -21600
       */
      raw_offset?: number;
      /**
       * @description A negative or positive number, identifying the offset from UTC/GMT, in seconds, during summer/daylight saving time.
       * @example -18000
       */
      dst_offset?: number;
      /**
       * @description A boolean indicating whether this time zone observes daylight saving time.
       * @example true
       */
      dst_correction?: boolean;
      date_format?: components["schemas"]["dateFormat"];
    };
    /**
     * count_Response
     * @example {
     *   "count": 27
     * }
     */
    count_Response: {
      /** @example 27 */
      count?: number;
    };
    /** dateFormat */
    dateFormat: {
      /**
       * @description A string that defines dates’ display formats, in the pattern: M jS Y
       * @example M jS Y
       */
      display?: string;
      /**
       * @description A string that defines the CSV export format for orders, customers, and products, in the pattern: M jS Y
       * @example M jS Y
       */
      export?: string;
      /**
       * @description A string that defines dates’ extended-display format, in the pattern: M jS Y @ g:i A.
       * @example M jS Y @ g:i A
       */
      extended_display?: string;
    };
    /** blogTags */
    blogTags: {
        /** @example Blog */
        tag?: string;
        /**
         * @example [
         *   1,
         *   2,
         *   4
         * ]
         */
        post_ids?: number[];
      }[];
    /**
     * blogPost_Base_Post
     * @description blogPost base for POST requests
     * @example {
     *   "title": "Welcome to BigCommerce",
     *   "url": "/blog/welcome-bigcommerce/",
     *   "preview_url": "/blog/welcome-bigcommerce/",
     *   "body": "<p>Customize your site, manage shipping and payments, and list your products on Amazon, eBay, and Facebook by Meta with the #1 ecommerce platform. </p>",
     *   "tags": [
     *     "string"
     *   ],
     *   "summary": "<p>We power ecommerce websites for successful retailers all over the world</p>",
     *   "is_published": true,
     *   "published_date": "Thu, 18 May 2023 13:26:42 -0000",
     *   "published_date_iso8601": "5/18/2023 1:26:42 PM",
     *   "meta_description": "Welcome Post",
     *   "meta_keywords": "BigCommerce, welcome, ecommerce",
     *   "author": "BigCommerce",
     *   "thumbnail_path": "string"
     * }
     */
    blogPost_Base_Post: {
      /**
       * @description Title of this blog post.
       * @example Welcome to BigCommerce
       */
      title: string;
      /**
       * @description URL for the public blog post.
       * @example /blog/welcome-bigcommerce/
       */
      url?: string;
      /**
       * @description Text body of the blog post.
       * @example <p>Customize your site, manage shipping and payments, and list your products on Amazon, eBay, and Facebook by Meta with the #1 ecommerce platform. </p>
       */
      body: string;
      /** @description Tags to characterize the blog post. */
      tags?: string[];
      /**
       * @description Whether the blog post is published. If you want the post to be or remain published following the request, you must set the field explicitly to true, even if the blog post was already published prior to the request.
       * @default false
       * @example true
       */
      is_published?: boolean;
      /**
       * @description Description text for this blog post’s `<meta/>` element.
       * @example Welcome Post
       */
      meta_description?: string;
      /**
       * @description Keywords for this blog post’s `<meta/>` element.
       * @example BigCommerce, welcome, ecommerce
       */
      meta_keywords?: string;
      /**
       * @description Name of the blog post’s author.
       * @example BigCommerce
       */
      author?: string;
      /** @description Local path to a thumbnail uploaded to `/product_images/` using [WebDAV](https://support.bigcommerce.com/s/article/File-Access-WebDAV). */
      thumbnail_path?: string;
      /** @example Wed, 10 Aug 2022 15:39:15 -0500 */
      published_date?: string;
    };
    /**
     * blogPost_Base
     * @example {
     *   "title": "Welcome to BigCommerce",
     *   "url": "/blog/welcome-bigcommerce/",
     *   "preview_url": "/blog/welcome-bigcommerce/",
     *   "body": "<p>Customize your site, manage shipping and payments, and list your products on Amazon, eBay, and Facebook by Meta with the #1 ecommerce platform. </p>",
     *   "tags": [
     *     "string"
     *   ],
     *   "summary": "<p>We power ecommerce websites for successful retailers all over the world</p>",
     *   "is_published": true,
     *   "published_date": {
     *     "timezone_type": 1,
     *     "date": "2018-05-18T08:26:42Z",
     *     "timezone": "+00:00"
     *   },
     *   "published_date_iso8601": "5/18/2018 1:26:42 PM",
     *   "meta_description": "Welcome Post",
     *   "meta_keywords": "BigCommerce, welcome, ecommerce",
     *   "author": "BigCommerce",
     *   "thumbnail_path": "string"
     * }
     */
    blogPost_Base: {
      /**
       * @description Title of this blog post.
       * @example Welcome to BigCommerce
       */
      title: string;
      /**
       * @description URL for the public blog post.
       * @example /blog/welcome-bigcommerce/
       */
      url?: string;
      /**
       * @description URL to preview the blog post. READ-ONLY.
       * @example /blog/welcome-bigcommerce/
       */
      preview_url?: string;
      /**
       * @description Text body of the blog post.
       * @example <p>Customize your site, manage shipping and payments, and list your products on Amazon, eBay, and Facebook by Meta with the #1 ecommerce platform. </p>
       */
      body: string;
      /** @description Tags to characterize the blog post. */
      tags?: string[];
      /**
       * @description Summary of the blog post. READ-ONLY.
       * @example <p>We power ecommerce websites for successful retailers all over the world</p>
       */
      summary?: string;
      /**
       * @description Whether the blog post is published. If you want the post to be or remain published following the request, you must set the field explicitly to true, even if the blog post was already published prior to the request.
       * @default false
       * @example true
       */
      is_published?: boolean;
      published_date?: components["schemas"]["publishedDate"];
      /**
       * @description Published date in `ISO 8601` format.
       * @example 5/18/2023 1:26:42 PM
       */
      published_date_iso8601?: string;
      /**
       * @description Description text for this blog post’s `<meta/>` element.
       * @example Welcome Post
       */
      meta_description?: string;
      /**
       * @description Keywords for this blog post’s `<meta/>` element.
       * @example BigCommerce, welcome, ecommerce
       */
      meta_keywords?: string;
      /**
       * @description Name of the blog post’s author.
       * @example BigCommerce
       */
      author?: string;
      /** @description Local path to a thumbnail uploaded to `/product_images/` using [WebDAV](https://support.bigcommerce.com/s/article/File-Access-WebDAV). */
      thumbnail_path?: string;
    };
    /**
     * blogPost_Base_Res
     * @description blog post base response
     */
    blogPost_Base_Res: {
      /**
       * @description Title of this blog post.
       * @example Welcome to BigCommerce
       */
      title?: string;
      /**
       * @description URL for the public blog post.
       * @example /blog/welcome-bigcommerce/
       */
      url?: string;
      /**
       * @description URL to preview the blog post. READ-ONLY.
       * @example /blog/welcome-bigcommerce/
       */
      preview_url?: string;
      /**
       * @description Text body of the blog post.
       * @example <p>Customize your site, manage shipping and payments, and list your products on Amazon, eBay, and Facebook by Meta with the #1 ecommerce platform. </p>
       */
      body?: string;
      /** @description Tags to characterize the blog post. */
      tags?: string[];
      /**
       * @description Summary of the blog post. READ-ONLY.
       * @example <p>We power ecommerce websites for successful retailers all over the world</p>
       */
      summary?: string;
      /**
       * @description Whether the blog post is published. If you want the post to be or remain published following the request, you must set the field explicitly to true, even if the blog post was already published prior to the request.
       * @default false
       * @example true
       */
      is_published?: boolean;
      published_date?: components["schemas"]["publishedDate"];
      /**
       * @description Published date in `ISO 8601` format.
       * @example 5/18/2023 1:26:42 PM
       */
      published_date_iso8601?: string;
      /**
       * @description Description text for this blog post’s `<meta/>` element.
       * @example Welcome Post
       */
      meta_description?: string | null;
      /**
       * @description Keywords for this blog post’s `<meta/>` element.
       * @example BigCommerce, welcome, ecommerce
       */
      meta_keywords?: string | null;
      /**
       * @description Name of the blog post’s author.
       * @example BigCommerce
       */
      author?: string | null;
      /** @description Local path to a thumbnail uploaded to `/product_images/` using [WebDAV](https://support.bigcommerce.com/s/article/File-Access-WebDAV). */
      thumbnail_path?: string | null;
    };
    publishedDate: {
      /** @example 1 */
      timezone_type?: number;
      /**
       * Format: date-time
       * @example 2022-08-10 14:39:15.000000
       */
      date?: string;
      /** @example +00:00 */
      timezone?: string;
    };
    /** @description Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
    authentication: {
      force_reset?: string;
      password?: string;
      password_confirmation?: string;
    };
    /** page_Base */
    page_Base: {
      /**
       * @description channel ID
       * @example 11
       */
      channel_id?: number;
      /**
       * @description Page name, as displayed on the storefront.
       * @example Contact Form
       */
      name: string;
      /** @description Text specified for this page’s `<title>` element. If empty, the value of the name property is used. */
      meta_title?: string;
      /**
       * @description HTML or variable that populates this page’s `<body>` element, in default/desktop view. Required in POST if page type is `raw`.
       * @example <p>We're happy to answer questions or help you with returns.<br />Please fill out the form below if you need assistance.</p>
       */
      body: string;
      /**
       * @description If true, this page appears in the storefront’s navigation menu.
       * @example true
       */
      is_visible?: boolean;
      /**
       * @description ID of any parent Web page.
       * @example 5
       */
      parent_id?: number;
      /**
       * @description Order in which this page should display on the storefront. (Lower integers specify earlier display.)
       * @example 3
       */
      sort_order?: number;
      /** @description Comma-separated list of SEO-relevant keywords to include in the page’s `<meta/>` element. */
      meta_keywords?: string;
      /**
       * @description `page`: free-text page
       * `link`: link to another web address
       * `rss_feed`: syndicated content from an RSS feed
       * `contact_form`: When the store’s contact form is used
       *
       * @enum {string}
       */
      type: "page" | "rss_feed" | "contact_form" | "raw" | "link";
      /** @description Description contained within this page’s `<meta/>` element. */
      meta_description?: string;
      /**
       * @description If true, this page is the storefront’s home page.
       * @example false
       */
      is_homepage?: boolean;
      /**
       * @description If true, this page is for customers only.
       * @example false
       */
      is_customers_only?: boolean;
      /** @description Comma-separated list of keywords that shoppers can use to locate this page when searching the store. */
      search_keywords?: string;
      /**
       * @description If true, this page has a mobile version. (For Blueprint themes only)
       * @example false
       */
      has_mobile_version?: boolean;
      /**
       * @description HTML to use for this page’s body when viewed in the mobile template (deprecated - Blueprint themes only).
       * @example 0
       */
      mobile_body?: string;
      /**
       * @description Where the page’s type is a contact form: object whose members are the fields enabled (in the control panel) for storefront display. Possible members are:`fullname`: full name of the customer submitting the form; `phone`: customer’s phone number, as submitted on the form; `companyname`: customer’s submitted company name; `orderno`: customer’s submitted order number; `rma`: customer’s submitted RMA (Return Merchandise Authorization) number.
       * @example fullname,companyname,phone,orderno,rma
       */
      contact_fields?: string;
      /**
       * @description Where the page’s type is a contact form, the email address that receives messages sent using the form.
       * @example janedoes@example.com
       */
      email?: string;
      /**
       * @description Relative URL on the storefront for this page.
       * @example /contact-us/
       */
      url?: string;
      /**
       * @description Layout template for this page. This field is writable only for stores with a Blueprint theme applied.
       * @example page.html
       */
      layout_file?: string;
      /** @description If page type is `rss_feed` then this field is visible. Required in POST required for `rss page` type. */
      feed?: string;
      /** @description If page type is `link` this field is returned. Required in  POST to create a `link` page. */
      link?: string;
      /**
       * @example text/html
       * @enum {string}
       */
      content_type?: "application/json" | "text/javascript" | "text/html";
    };
    /** page_Base_Res */
    page_Base_Res: {
      /**
       * @description channel ID
       * @example 11
       */
      channel_id?: number;
      /**
       * @description Page name, as displayed on the storefront.
       * @example Contact Form
       */
      name?: string;
      /** @description Text specified for this page's `<title>` element. If empty, the value of the name property is used. */
      meta_title?: string;
      /**
       * @description Where the page’s type is a contact form, the email address that receives messages sent using the form.
       * @example janedoe@example.com
       */
      email?: string;
      /**
       * @description HTML or variable that populates this page’s `<body>` element, in default/desktop view. Required in POST if page type is `raw`.
       * @example <p>We're happy to answer questions or help you with returns.<br />Please fill out the form below if you need assistance.</p>
       */
      body?: string;
      /**
       * @description If true, this page appears in the storefront navigation menu.
       * @example true
       */
      is_visible?: boolean;
      /**
       * @description ID of any parent Web page.
       * @example 5
       */
      parent_id?: number;
      /**
       * @description Order in which this page should display on the storefront. (Lower integers specify earlier display.)
       * @example 3
       */
      sort_order?: number;
      /** @description Comma-separated list of SEO-relevant keywords to include in the page's `<meta/>` element. */
      meta_keywords?: string;
      /**
       * @description `page`: free-text page
       * `link`: link to another web address
       * `rss_feed`: syndicated content from an RSS feed
       * `contact_form`: When the store’s contact form is used
       *
       * @enum {string}
       */
      type?: "page" | "rss_feed" | "contact_form" | "raw" | "link";
      /**
       * @description Where the page’s type is a contact form - object whose members are the fields enabled (in the control panel) for storefront display. Possible members are:`fullname` - full name of the customer submitting the form; `phone` - customer’s phone number, as submitted on the form; `companyname`- customer’s submitted company name; `orderno`- customer’s submitted order number; `rma` - customer’s submitted RMA (Return Merchandise Authorization) number.
       * @example fullname,companyname,phone,orderno,rma
       */
      contact_fields?: string;
      /**
       * @description Description contained within this page’s `<meta/>` element. HTML to use for this page’s body when viewed in the mobile template.
       * @example 0
       */
      meta_description?: string;
      /**
       * @description If true, this page is the storefront’s home page.
       * @example false
       */
      is_homepage?: boolean;
      /**
       * @description Layout template for this page. This field is writable only for stores with a Blueprint theme applied.
       * @example page.html
       */
      layout_file?: string;
      /**
       * @description If true, this page is for customers only.
       * @example false
       */
      is_customers_only?: boolean;
      /** @description Comma-separated list of keywords that shoppers can use to locate this page when searching the store. */
      search_keywords?: string;
      /**
       * @description If true, this page has a mobile version. (For Blueprint themes only)
       * @example false
       */
      has_mobile_version?: boolean;
      /**
       * @description HTML to use for this page’s body when viewed in the mobile template (deprecated - Blueprint only).
       * @example 0
       */
      mobile_body?: string;
      /**
       * @example text/html
       * @enum {string}
       */
      content_type?: "application/json" | "text/javascript" | "text/html";
      /**
       * @description Relative URL on the storefront for this page.
       * @example /contact-us/
       */
      url?: string;
      /** @description If page type is `rss_feed`, then this field is visible. */
      feed?: string;
      /** @description If page type is `link`, this field is returned. */
      link?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Blog Tags
   * @description Returns a list of *Blog Tags*.
   */
  getBlogTags: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["blogTags"][];
        };
      };
    };
  };
  /**
   * Get All Blog Posts
   * @description Returns all *Blog Posts*. Default sorting is by published_date, beginning with the most recent post.
   */
  getBlogPosts: {
    parameters: {
      query?: {
        /** @description Filter param. */
        is_published?: boolean;
        /** @description Filter param. Value must be URL encoded. */
        url?: string;
        /** @description Filter param. */
        tag?: string;
        /** @description Filter param. */
        published_date?: string;
        /** @description Filter param. */
        page?: number;
        /** @description Filter param. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["blogPost_Full"][];
        };
      };
    };
  };
  /**
   * Create a Blog Post
   * @description Creates a *Blog Post*.
   *
   * **Required Fields**
   * *   `title`
   * *   `body`
   *
   * **Notes**
   *
   * * When including `published_date` in a request, supply it as a flat date string (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a>. The following example request includes a `published_date` in RFC 2822 format.
   * * Blog posts default to draft status. To publish blog posts to the storefront, set the `is_published` property to `true`.
   * * If a custom URL is not provided, the post’s URL will be generated based on the value of `title`.
   */
  createBlogPosts: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["blogPost_Base_Post"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["blogPost_Base_Res"];
        };
      };
      /** @description Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * Delete Blog Posts
   * @description Deletes a page of `Blog Posts`.
   */
  deleteBlogPosts: {
    parameters: {
      query?: {
        /** @description Filter param. */
        page?: number;
        /** @description Filter param. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get a Blog Post
   * @description Returns a single *Blog Post*.
   */
  getBlogPost: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description ID of the blog post. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["blogPost_Full"];
        };
      };
    };
  };
  /**
   * Update a Blog Post
   * @description Updates a *Blog Post*.
   *
   * **Notes**
   *
   * * To include `published_date` in a request, provide a flat date string (not an object) in valid <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a>. The following example request includes a `published_date` in RFC 2822 format.
   *
   * * Blog posts default to draft status. To publish blog posts to the storefront, set the `is_published` property to `true`.
   */
  updateBlogPost: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        /** @description ID of the blog post. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["blogPost_Base_Post"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["blogPost_Base_Res"];
        };
      };
      /** @description Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * Delete a Blog Post
   * @description Deletes a *Blog Post*.
   */
  deleteBlogPost: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description ID of the blog post. */
        id: number;
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get A Count of All Blog Posts
   * @description Returns a count of all *Blog Posts*.
   */
  getBlogPostsCount: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["count_Response"];
        };
      };
    };
  };
  /**
   * Get All Pages (Deprecated)
   * @deprecated
   * @description Returns a list of *Pages*. Default sorting is by auto-generated ID from oldest to newest.
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To get one or more pages, use Pages V3ʼs [Get pages](/docs/rest-content/pages#get-pages) endpoint. To get a single page, use Pages V3ʼs [Get a page](/docs/rest-content/pages#get-a-page) endpoint.
   */
  getPages: {
    parameters: {
      query?: {
        /** @description Filter param. */
        page?: number;
        /** @description Filter param. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["page_Full"][];
        };
      };
    };
  };
  /**
   * Create a Page (Deprecated)
   * @deprecated
   * @description Creates a *Page*. The request payload limit is 1MB.
   *
   * **Required Fields**
   * *   `type`
   * *   `name`
   * *   `link` (for a page of `type: link`)
   * *   `feed` (for a page of `type: rss_feed`)
   * *   `body` (for a page of `type: raw`)
   *
   * **Read Only Fields**
   * *   `id`
   *
   * ## Content Type
   *
   * The default value for `content_type` is `text/html`; however, if `page_type` is set to `raw`, `content_type` can be changed to `text/javascript` or `application/json`. Updating this field lets you place a JavaScript or a JSON file in the root directory.
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To create one or more pages, use Pages V3ʼs [Create pages](/docs/rest-content/pages#create-pages) endpoint.
   */
  createPage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "channel_id": 1,
         *   "name": "Contact Form",
         *   "meta_title": "string",
         *   "body": "<p>We're happy to answer questions or help you with returns.<br />Please fill out the form below if you need assistance.</p>",
         *   "is_visible": true,
         *   "parent_id": 5,
         *   "sort_order": 3,
         *   "meta_keywords": "string",
         *   "type": "page",
         *   "contact_fields": "fullname,companyname,phone,orderno,rma",
         *   "meta_description": "string",
         *   "is_homepage": false,
         *   "is_customers_only": false,
         *   "search_keywords": "string",
         *   "has_mobile_version": false,
         *   "mobile_body": "0",
         *   "url": "/contact-us/"
         * }
         */
        "application/json": components["schemas"]["page_Base"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["page_Full"];
        };
      };
      /** @description Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * Get A Page (Deprecated)
   * @deprecated
   * @description Returns a *Page*.
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To get a single page, use Pages V3ʼs [Get a page](/docs/rest-content/pages#get-a-page) endpoint.
   */
  getPage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description ID of the page. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["page_Full"];
        };
      };
    };
  };
  /**
   * Update a Page (Deprecated)
   * @deprecated
   * @description Updates a *Page*. The request payload limit is 1MB.
   *
   * **Read Only Fields**
   * * id
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To update multiple pages, use Pages V3ʼs [Update pages](/docs/rest-content/pages#update-pages) endpoint. To update a single page, use Pages V3ʼs [Update a page](/docs/rest-content/pages#update-a-page) endpoint.
   */
  updatePage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        /** @description ID of the page. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["page_Full"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["page_Full"];
        };
      };
      /** @description Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
      207: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /**
   * Delete a Page (Deprecated)
   * @deprecated
   * @description Deletes a *Page*.
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To delete multiple pages, use Pages V3ʼs [Delete pages](/docs/rest-content/pages#delete-pages) endpoint. To delete a single page, use Pages V3ʼs [Delete a page](/docs/rest-content/pages#delete-a-page) endpoint.
   */
  deletePage: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description ID of the page. */
        id: number;
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get All Redirects
   * @deprecated
   * @description Returns a list all *Redirect URLs*.
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To get redirect URLs, use Redirects V3ʼs [Get redirects](/docs/rest-management/redirects#get-redirects) endpoint.
   */
  getRedirects: {
    parameters: {
      query?: {
        /** @description Filter param. */
        page?: number;
        /** @description Filter param. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["redirect"][];
          "Response Schema": unknown;
        };
      };
    };
  };
  /**
   * Create a Redirect
   * @description Creates a *Redirect URL*.
   *
   * **Required Fields**
   * *   path
   * *   forward
   *
   * **Read Only**
   * *   url
   *
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To upsert new redirect data, use Redirects V3ʼs [Upsert redirects](/docs/rest-management/redirects#upsert-redirects) endpoint.
   */
  createRedirect: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["redirect"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["redirect"];
        };
      };
    };
  };
  /**
   * Delete All Redirects
   * @deprecated
   * @description By default, it deletes all *Redirect URLs* in a store.
   *
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To delete redirect URLs, use Redirects V3ʼs [Delete redirects](/docs/rest-management/redirects#delete-redirects) endpoint.
   */
  deleteRedirects: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get a Redirect
   * @deprecated
   * @description Returns a single *Redirect URL*.
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To get a redirect URL, use Redirects V3ʼs [Get redirects](/docs/rest-management/redirects#get-redirects) endpoint.
   */
  getRedirect: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description ID of the redirect URL. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["redirect"];
        };
      };
    };
  };
  /**
   * Update a Redirect
   * @description Updates a *Redirect URL*.
   *
   * **Required Fields**
   * *   path
   * *   forward
   *
   * **Read Only Fields**
   * *   url
   *
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To update redirect data, use Redirects V3ʼs [Upsert redirects](/docs/rest-management/redirects#upsert-redirects) endpoint.
   */
  updateRedirect: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        /** @description ID of the redirect URL. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Numeric ID of the redirect.
           * @example 1
           */
          id?: number;
          /**
           * @description The path from which to redirect.
           * @example /smith-journal-13/
           */
          path: string;
          forward: {
            /**
             * @description The type of redirect. If it is a manual redirect then type will always be manual. Dynamic redirects will have the type of the page. Such as product or category.
             *
             * @example product
             */
            type?: string;
            /**
             * @description Reference of the redirect. Dynamic redirects will have the category or product number. Manual redirects will have the url that is being directed to.
             * @example 111
             */
            ref?: string;
          };
          /**
           * @description URL of the redirect. READ-ONLY.
           * @example http://store-store_hash.mybigcommerce.com/towels/bath-towels/hand-towels/
           */
          url?: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["redirect"];
        };
      };
    };
  };
  /**
   * Delete a Redirect
   * @description Deletes a *Redirect URL*.
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To delete a redirect URL, use Redirects V3ʼs [Delete redirects](/docs/rest-management/redirects#delete-redirects) endpoint.
   */
  deleteRedirect: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description ID of the redirect URL. */
        id: number;
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get a Count of Redirects
   * @deprecated
   * @description Gets a count of *Redirect URLs* in a store.
   *
   * > #### Warning
   * > **Deprecated**
   * > * This API operation is deprecated. Avoid using this API operation if possible. It will be removed in a future version.
   * > * To get a count of redirects, use the `meta` object data returned with the Redirects V3ʼs [Get redirects](/docs/rest-management/redirects#get-redirects) endpoint.
   */
  getRedirectsCount: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["count_Response"];
        };
      };
    };
  };
}
