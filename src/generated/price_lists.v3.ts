// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/pricelists": {
    /**
     * Get All Price Lists
     * @description Returns a list of *Price Lists*. Optional parameters can be passed in.
     */
    get: operations["getPriceLists"];
    /**
     * Create a Price List
     * @description Creates a *Price List*.
     *
     * **Required Fields**
     * * name
     */
    post: operations["createPriceList"];
    /**
     * Delete All Price Lists
     * @description Deletes a *Price List*. All associated price records are also removed. Optional parameters can be passed in.
     */
    delete: operations["deletePriceLists"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/pricelists/{price_list_id}": {
    /**
     * Get a Price List
     * @description  Returns a single *Price List*.
     */
    get: operations["getPriceList"];
    /**
     * Update a Price List
     * @description Updates a *Price List*.
     */
    put: operations["updatePriceList"];
    /**
     * Delete a Price List
     * @description Deletes a *Price List*. All associated price records are also removed.
     * **Limits**
     * * Limit of 1 concurrent request.
     */
    delete: operations["deletePriceList"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/pricelists/records": {
    /**
     * Create Batch of Price Lists Records
     * @description Creates a batch of `Price Lists Records`; may include price list records from more than one price list.  Concurrency limit of 1.
     */
    put: operations["upsertPriceListsRecords"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/pricelists/{price_list_id}/records": {
    /**
     * Get All Price List Records
     * @description Returns a list of *Price List Records* associated with a *Price List*.
     *
     * **Notes**
     * * Supports up to 10 simultaneous GET requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error and your additional requests will fail.
     * * Store Pricelist Records data to reduce the number of calls and maximize performance.
     */
    get: operations["getPriceListRecords"];
    /**
     * Upsert Price List Records
     * @description Creates or updates *Price List Records*.
     *
     * **Required Fields**
     * * currency
     *
     * **Notes**
     * * Batch requests support up to 1,000 items per request.
     * * Up to 2 concurrent batch upsert requests are supported with this API. Running more than the allowed concurrent requests in parallel on the **same store** will cause a `429` error, and your additional requests will fail. You are encouraged to run requests sequentially with as many records per request as possible to maximize performance.
     * * When updating a product with variants, or multiple SKUs, don't include records for the parent product SKU.
     */
    put: operations["upsertPriceListRecords"];
    /**
     * Delete a Price List Record
     * @description Deletes a *Price List Record*. Deleting the records does not delete the Price List. Optional parameters can be passed in.
     */
    delete: operations["deletePriceListRecords"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/pricelists/{price_list_id}/records/{variant_id}": {
    /**
     * Get Price Records by Variant
     * @description Returns *Price List Records* using the variant ID. Will also contain currency records.
     *
     * **Notes**
     * * Supports up to 40 simultaneous GET requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error, and your additional requests will fail.
     * * Store Pricelist Records data to reduce the number of calls and maximize performance.
     */
    get: operations["getPriceListRecordsByVariantId"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/pricelists/{price_list_id}/records/{variant_id}/{currency_code}": {
    /**
     * Get a Price Record by Currency Code
     * @description Returns a *Price List Record* using the currency code. You can use optional parameters.
     * **Notes**
     * * Supports up to 50 simultaneous GET requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error, and your additional requests will fail.
     */
    get: operations["getPriceListRecord"];
    /**
     * Set Price List Record by Currency Code
     * @description Creates or updates a *Price List Record* using the currency code.
     * **Notes**
     * * Supports up to 40 simultaneous PUT requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error, and your additional requests will fail.
     */
    put: operations["setPriceListRecord"];
    /**
     * Delete a Price Record by Currency Code
     * @description Deletes a *Price List Record* using the currency code.
     * **Note:**
     * * Supports up to 25 simultaneous DELETE requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error, and your additional requests will fail.
     */
    delete: operations["deletePriceListRecord"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/pricelists/assignments": {
    /**
     * Get Price List Assignments
     * @description Fetches an array of `Price List Assignments` matching a particular Customer Group and Price List and Channel.
     */
    get: operations["getListOfPriceListAssignments"];
    /**
     * Create Price List Assignments
     * @description Creates a batch of `Price List Assignments`.
     * **Note:** The batch limit for `Price List Assignments` is 25.
     */
    post: operations["createPriceListAssignments"];
    /**
     * Delete Price List Assignments
     * @description Deletes one or more `Price List Assignments` objects from BigCommerce using a query parameter. You must use at least one query parameter.
     */
    delete: operations["deletePriceListAssignments"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/pricelists/{price_list_id}/assignments": {
    /**
     * Upsert Price List Assignment
     * @description Upsert a single `Price List Assignment` for a `Price List`.
     * **Note:**
     * * Supports up to 25 simultaneous PUT requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error and your additional requests will fail.
     */
    put: operations["upsertPriceListAssignment"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description `Price List Assignments` object used in a batch create request. */
    AssignmentsForRequest: {
      /**
       * Format: int32
       * @description Price list ID for assignment.
       * @example 1
       */
      price_list_id: number;
      /**
       * Format: int32
       * @description Customer group ID for assignment.
       * @example 2
       */
      customer_group_id?: number;
      /**
       * Format: int32
       * @description Channel ID for assignment
       * @example 1
       */
      channel_id?: number;
    };
    AssignmentForPutRequest: {
      /**
       * Format: int32
       * @description Customer group ID for assignment.
       * @example 2
       */
      customer_group_id: number;
      /**
       * Format: int32
       * @description Channel ID for assignment
       * @example 1
       */
      channel_id: number;
    };
    AssignmentForPutResponse: {
      data?: {
        /**
         * Format: int32
         * @description Unique identifier for this price list assignment.
         * @example 1
         */
        id?: number;
        /**
         * Format: int32
         * @description Price list ID for assignment.
         * @example 1
         */
        price_list_id?: number;
        /**
         * Format: int32
         * @description Customer group ID for assignment.
         * @example 2
         */
        customer_group_id?: number;
        /**
         * Format: int32
         * @description Channel ID for assignment.
         * @example 2
         */
        channel_id?: number;
      };
      meta?: components["schemas"]["Meta"];
    };
    PriceRecordBatchItem: {
      /**
       * @description The price list ID the price record is associated with.
       * @example 1
       */
      price_list_id?: number;
      /**
       * @description The price list with which the price record is associated. Either `variant_id` or `sku` is required.
       * @example 5
       */
      variant_id?: number;
      /**
       * @description The SKU for the variant with which this price record is associated. Either `sku` or `variant_id` is required.
       * @example SKU-001
       */
      sku?: string;
      /**
       * Format: ISO:4217
       * @description The 3-letter country code with which this price record is associated.
       * @example usd
       */
      currency?: string;
    } & components["schemas"]["PriceRecordBase"];
    /** @description Common Price Record properties. */
    PriceRecordBase: {
      /**
       * Format: double
       * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
       * @example 0
       */
      price?: number;
      /**
       * Format: double
       * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
       * @example 0
       */
      sale_price?: number;
      /**
       * Format: double
       * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
       * @example 0
       */
      retail_price?: number;
      /**
       * Format: double
       * @description The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the `map_ price` will be treated as not being set on this variant.
       * @example 0
       */
      map_price?: number;
      bulk_pricing_tiers?: components["schemas"]["BulkPricingTier"][];
    };
    BulkPricingTier: {
      /**
       * @description The cart's minimum quantity of associated variants needed to qualify for this tier's pricing.
       * @example 1
       */
      quantity_min?: number;
      /**
       * @description The cart's maximum allowed quantity of associated variants to qualify for this tier's pricing.
       * @example 10
       */
      quantity_max?: number;
      /**
       * @description The type of adjustment that is made.
       * Acceptable values:
       * * price – the adjustment amount per product
       * * percent – the adjustment as a percentage of the original price
       * * fixed – the adjusted absolute price of the product
       * @example fixed
       * @enum {string}
       */
      type?: "fixed" | "price" | "percent";
      /**
       * Format: double
       * @description The price adjustment amount. This value and the type will decide the price per variant for the pricing tier.
       * @example 0
       */
      amount?: number;
    };
    /** @description Empty object for Success case for Batch API. */
    SuccessBatchResponse: {
      /** @example {} */
      data?: {
        [key: string]: unknown;
      };
      /** @example {} */
      meta?: {
        [key: string]: unknown;
      };
    };
    /** @description Error during `Price Record` batch PUT. Includes data sent in the request and errors. */
    PriceRecordBatchErrorResponse: {
      data?: components["schemas"]["PriceRecordIdentifiers"];
      field_errors?: components["schemas"]["DetailedErrors"];
    };
    /** @description The `Price Record` object used in batch create or update. */
    PriceRecordIdentifiers: {
      /** @description The Price List with which this price record is associated. */
      price_list_id?: number;
      /** @description The variant with which this price record is associated. Either `variant_id` or `sku` is required. */
      variant_id?: number;
      /** @description The variant with which this price record is associated. Either `sku` or `variant_id` is required. */
      sku?: string;
      /**
       * Format: ISO-4217
       * @description The 3-letter currency code with which this price set is associated.
       */
      currency?: string;
    };
    DetailedErrors: {
      [key: string]: string;
    };
    PriceListAssignmentsBatchErrorResponse: {
      status?: number;
      title?: string;
      type?: string;
      /** Detailed Errors */
      errors?: {
        [key: string]: unknown;
      };
      meta?: {
        saved_records?: number;
      };
    };
    AssignmentForGetResponse: {
      /**
       * Format: int32
       * @description Unique identifier for this price list assignment.
       * @example 1
       */
      id?: number;
      /**
       * Format: int32
       * @description Pricelist ID for assignment.
       * @example 1
       */
      price_list_id?: number;
      /**
       * Format: int32
       * @description Customer group ID for assignment.
       * @example 2
       */
      customer_group_id?: number;
      /**
       * Format: int32
       * @description Channel ID for assignment.
       * @example 2
       */
      channel_id?: number;
    };
    /** @description Array of the price list assignments matching the filter. The response is paginated. */
    AssignmentsForGetResponse: {
      data?: components["schemas"]["AssignmentForGetResponse"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /**
     * Collection Meta
     * @description 'Contains data about paginating the response via cursors. If no pagination details are specified or if you only provide a limit, then both properties will be present. When a 'before' or 'after' cursor is provided, only the 'cursor_pagination' property will be present. When a 'page' parameter is provided, only the offset based 'pagination' property will be present.'
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data related to the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
      };
      /** Cursor Pagination */
      cursor_pagination?: {
        /**
         * Format: int32
         * @description Total number of items in the collection response.
         */
        count?: number;
        /**
         * Format: int32
         * @description The number of items that can be returned per page, determined by the limit parameter—whether explicitly set, defaulted, or capped at the maximum limit.
         */
        per_page?: number;
        /** @description A string representing the starting point of the current page in the collection. */
        start_cursor?: string;
        /** @description A string representing the ending point of the current page in the collection. */
        end_cursor?: string;
        /**
         * links
         * @description Pagination links for the previous and next parts of the whole collection.
         */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /** @description Link to the current page returned in the response. */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    Meta: {
      [key: string]: unknown;
    };
    /** Error Response */
    ErrorResponse: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
      instance?: string;
    } & {
      /** Detailed Errors */
      errors?: {
        [key: string]: unknown;
      };
    };
    /** @description Batch of price list assignments. */
    CreateBatchPriceListAssignmentsRequest: components["schemas"]["AssignmentsForRequest"][];
  };
  responses: never;
  parameters: {
    /** @description Filter results by a comma-separated list of channel IDs. */
    ChannelIdInParam?: number[];
    /** @description The ID of the `Price List` requested. */
    PriceListIdParam: number;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description The ID of the `Price List Assignment`. */
    FilterAssignmentIdParam?: number;
    /** @description The ID of the `Price List`. */
    FilterPriceListIdParam?: number;
    /** @description The ID of the `Customer Group`. */
    FilterCustomerGroupIdParam?: number;
    /** @description The ID of the `Channel`. */
    FilterChannelIdParam?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Price Lists
   * @description Returns a list of *Price Lists*. Optional parameters can be passed in.
   */
  getPriceLists: {
    parameters: {
      query?: {
        /** @description Filter items by name. */
        name?: string;
        /** @description Filter items by date_created. */
        date_created?: string;
        /** @description Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15` */
        date_modified?: string;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. If you provide only a limit, the API returns both paginations while applying that limit. */
        limit?: number;
        /** @description A cursor that can be used for backwards pagination. Will fetch results before the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'after' query parameter. */
        before?: string;
        /** @description A cursor that can be used for forwards pagination. Will fetch results after the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'before' query parameter. */
        after?: string;
        "id:in"?: number[];
        "name:like"?: string;
        "date_created:max"?: string;
        "date_created:min"?: string;
        "date_modified:max"?: string;
        "date_modified:min"?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: ({
                /**
                 * @description The unique numeric ID of the `Price List`; this number increments sequentially.
                 *
                 * @example 3
                 */
                id?: number;
                /**
                 * Format: date-time
                 * @description The date on which the `Price List` was created.
                 *
                 * @example 2018-04-05T16:05:12Z
                 */
                date_created?: string;
                /**
                 * Format: date-time
                 * @description The date on which the `Price List` was created.
                 *
                 * @example 2018-04-05T16:05:12Z
                 */
                date_modified?: string;
              } & {
                /**
                 * @description The unique name of the Price List. Required in a POST request.
                 * @example Wholesale
                 */
                name: string;
                /**
                 * @description Boolean value that specifies whether this `Price List` and its prices are active or not. Defaults to `true`.
                 *
                 * @example true
                 */
                active?: boolean;
              })[];
            /**
             * Collection Meta
             * @description 'Contains data about paginating the response via cursors. If no pagination details are specified or if you only provide a limit, then both properties will be present. When a 'before' or 'after' cursor is provided, only the 'cursor_pagination' property will be present. When a 'page' parameter is provided, only the offset based 'pagination' property will be present.'
             */
            meta?: {
              /**
               * Pagination
               * @description Data related to the response, including pagination and collection totals.
               */
              pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                total_pages?: number;
              };
              /** Cursor Pagination */
              cursor_pagination?: {
                /**
                 * Format: int32
                 * @description Total number of items in the collection response.
                 */
                count?: number;
                /**
                 * Format: int32
                 * @description The number of items that can be returned per page, determined by the limit parameter—whether explicitly set, defaulted, or capped at the maximum limit.
                 */
                per_page?: number;
                /** @description A string representing the starting point of the current page in the collection. */
                start_cursor?: string;
                /** @description A string representing the ending point of the current page in the collection. */
                end_cursor?: string;
                /**
                 * links
                 * @description Pagination links for the previous and next parts of the whole collection.
                 */
                links?: {
                  /** @description Link to the previous page returned in the response. */
                  previous?: string;
                  /** @description Link to the current page returned in the response. */
                  current?: string;
                  /** @description Link to the next page returned in the response. */
                  next?: string;
                };
              };
            };
          };
        };
      };
    };
  };
  /**
   * Create a Price List
   * @description Creates a *Price List*.
   *
   * **Required Fields**
   * * name
   */
  createPriceList: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique name of the Price List. Required in a POST request.
           * @example Wholesale
           */
          name: string;
          /**
           * @description Boolean value that specifies whether this `Price List` and its prices are active or not. Defaults to `true`.
           *
           * @example true
           */
          active?: boolean;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Price List */
            data?: {
              /**
               * @description The unique numeric ID of the `Price List`; this number increments sequentially.
               *
               * @example 3
               */
              id?: number;
              /**
               * Format: date-time
               * @description The date on which the `Price List` was created.
               *
               * @example 2022-04-05T16:05:12Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description The date on which the `Price List` was created.
               *
               * @example 2022-04-05T16:05:12Z
               */
              date_modified?: string;
            } & {
              /**
               * @description The unique name of the Price List. Required in a POST request.
               * @example Wholesale
               */
              name: string;
              /**
               * @description Boolean value that specifies whether this `Price List` and its prices are active or not. Defaults to `true`.
               *
               * @example true
               */
              active?: boolean;
            };
            meta?: components["schemas"]["Meta"];
          };
        };
      };
      /** @description `Price List` conflicts with another Price List. This is the result of duplicate unique values, such as `name`. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description `Price List` is not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete All Price Lists
   * @description Deletes a *Price List*. All associated price records are also removed. Optional parameters can be passed in.
   */
  deletePriceLists: {
    parameters: {
      query?: {
        /** @description Filter by ID. Accepts multiple comma-separated values. */
        "id:in"?: number[];
        /** @description Filter items by name. */
        name?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description `204 No Content`. The action has been performed and no further information will be supplied. `null` is returned. */
      204: {
        content: {
          "application/json": {
            [key: string]: unknown;
          } | null;
        };
      };
    };
  };
  /**
   * Get a Price List
   * @description  Returns a single *Price List*.
   */
  getPriceList: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Price List
             * @description Specifies the Common Price List properties.
             */
            data?: {
              /**
               * @description The unique numeric ID of the `Price List`; this number increments sequentially.
               *
               * @example 3
               */
              id?: number;
              /**
               * Format: date-time
               * @description The date on which the `Price List` was created.
               *
               * @example 2022-04-05T16:05:12Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description The date on which the `Price List` was created.
               *
               * @example 2022-04-05T16:05:12Z
               */
              date_modified?: string;
              /**
               * @description The unique name of the Price List. Required in a POST request.
               * @example Wholesale
               */
              name: string;
              /**
               * @description Boolean value that specifies whether this `Price List` and its prices are active or not. Defaults to `true`.
               *
               * @example true
               */
              active?: boolean;
            };
            meta?: components["schemas"]["Meta"];
          };
        };
      };
    };
  };
  /**
   * Update a Price List
   * @description Updates a *Price List*.
   */
  updatePriceList: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique name of the Price List. Required in a POST request.
           * @example Wholesale
           */
          name: string;
          /**
           * @description Whether or not this `Price List` and its prices are active. Defaults to `true`.
           *
           * @example true
           */
          active?: boolean;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** Price List */
            data?: {
              /**
               * @description The unique numeric ID of the `Price List`; this number increments sequentially.
               *
               * @example 3
               */
              id?: number;
              /**
               * Format: date-time
               * @description The date on which the `Price List` was created.
               *
               * @example 2022-04-05T16:05:12Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description The date on which the `Price List` was created.
               *
               * @example 2022-04-05T16:05:12Z
               */
              date_modified?: string;
            } & {
              /**
               * @description The unique name of the Price List. Required in /POST.
               * @example Wholesale
               */
              name: string;
              /**
               * @description Whether or not this `Price List` and its prices are active.  Defaults to `true`.
               *
               * @example true
               */
              active?: boolean;
            };
            meta?: components["schemas"]["Meta"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description `Price List` was in conflict with another Price List. This is the result of duplicate unique values, such as `name`. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description `Price List` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Delete a Price List
   * @description Deletes a *Price List*. All associated price records are also removed.
   * **Limits**
   * * Limit of 1 concurrent request.
   */
  deletePriceList: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
      };
    };
    responses: {
      /** @description Action has been enacted and no further information is to be supplied. `null` is returned. */
      204: {
        content: never;
      };
    };
  };
  /**
   * Create Batch of Price Lists Records
   * @description Creates a batch of `Price Lists Records`; may include price list records from more than one price list.  Concurrency limit of 1.
   */
  upsertPriceListsRecords: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PriceRecordBatchItem"][];
      };
    };
    responses: {
      /** @description Success response for batch PUT of `Price Records`. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessBatchResponse"];
        };
      };
      /** @description Error response for batch PUT of `Price Records`.  May include errors during partial update in non-strict mode. */
      422: {
        content: {
          "application/json": components["schemas"]["PriceRecordBatchErrorResponse"];
        };
      };
    };
  };
  /**
   * Get All Price List Records
   * @description Returns a list of *Price List Records* associated with a *Price List*.
   *
   * **Notes**
   * * Supports up to 10 simultaneous GET requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error and your additional requests will fail.
   * * Store Pricelist Records data to reduce the number of calls and maximize performance.
   */
  getPriceListRecords: {
    parameters: {
      query?: {
        /** @description A comma-separated list of IDs for one or more variants for which prices were requested. */
        "variant_id:in"?: number[];
        /** @description A comma-separated list of IDs for one or more products for which prices were requested. */
        "product_id:in"?: number[];
        /** @description Filter items by currency. */
        currency?: string;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. If you provide only a limit, the API returns both paginations while applying that limit. */
        limit?: number;
        /** @description A cursor that can be used for backwards pagination. Will fetch results before the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'after' query parameter. */
        before?: string;
        /** @description A cursor that can be used for forwards pagination. Will fetch results after the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'before' query parameter. */
        after?: string;
        /** @description Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`. Other values will be ignored. */
        include?: ("bulk_pricing_tiers" | "sku")[];
        /** @description Filter items by price. */
        price?: number;
        /** @description Filter items by sale_price. */
        sale_price?: number;
        /** @description Filter items by retail_price. */
        retail_price?: number;
        /** @description Filter items by map_price. */
        map_price?: number;
        /** @description Filter items by calculated_price. */
        calculated_price?: number;
        /** @description Filter items by date_created. */
        date_created?: string;
        /** @description Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2022-06-15` */
        date_modified?: string;
        /** @description Filter items by SKU. */
        sku?: string;
        "sku:in"?: string[];
        "currency:in"?: string[];
        "price:max"?: number;
        "price:min"?: number;
        "sale_price:max"?: number;
        "sale_price:min"?: number;
        "retail_price:max"?: number;
        "retail_price:min"?: number;
        "map_price:max"?: number;
        "map_price:min"?: number;
        "calculated_price:max"?: number;
        "calculated_price:min"?: number;
        "date_created:max"?: string;
        "date_created:min"?: string;
        "date_modified:max"?: string;
        "date_modified:min"?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: ({
                /**
                 * Format: double
                 * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. Read only.
                 *
                 * @example 24.64
                 */
                calculated_price?: number;
                /**
                 * Format: date-time
                 * @description The date on which the Price entry was created.
                 *
                 * @example 2018-08-23T19:59:23Z
                 */
                date_created?: string;
                /**
                 * Format: date-time
                 * @description The date on which the Price entry was created.
                 *
                 * @example 2018-08-23T19:59:23Z
                 */
                date_modified?: string;
                /**
                 * @description The ID of the `Product` this `Price Record`ʼs `variant_id` is associated with. Read only.
                 *
                 * @example 158
                 */
                product_id?: number;
              } & {
                /**
                 * @description The Price List with which this price set is associated.
                 *
                 * @example 2
                 */
                price_list_id?: number;
                /**
                 * @description The variant with which this price set is associated. Either `variant_id` or `sku` is required.
                 *
                 * @example 325
                 */
                variant_id?: number;
                /** @description The variant with which this price set is associated. Either `sku` or `variant_id` is required. */
                sku?: string;
                /**
                 * Format: ISO-4217
                 * @description The 3-letter currency code with which this price set is associated.
                 *
                 * @example usd
                 */
                currency?: string;
              } & ({
                /**
                 * Format: double
                 * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
                 *
                 * @example 3.99
                 */
                price?: number;
                /**
                 * Format: double
                 * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
                 */
                sale_price?: number;
                /**
                 * Format: double
                 * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product. If empty, the retail price will be treated as not being set on this variant.
                 */
                retail_price?: number;
                /**
                 * Format: double
                 * @description The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
                 */
                map_price?: number;
                bulk_pricing_tiers?: ({
                    /**
                     * @description The minimum quantity of associated variant in the cart needed to qualify for this tier's pricing.
                     *
                     * @example 1
                     */
                    quantity_min?: number;
                    /**
                     * @description The maximum allowed quantity of associated variant in the cart to qualify for this tier's pricing. `null` indicates that there is no maximum allowed quantity for this tier.
                     *
                     * @example 10
                     */
                    quantity_max?: number | null;
                    /**
                     * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
                     *
                     * @example price
                     * @enum {string}
                     */
                    type?: "fixed" | "price" | "percent";
                    /**
                     * Format: double
                     * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
                     *
                     * @example 3
                     */
                    amount?: number;
                  })[];
                /**
                 * @description The SKU code associated with this `Price Record` if requested and it exists.
                 *
                 * @example SMB-123
                 */
                sku?: string;
              }))[];
            /**
             * Collection Meta
             * @description 'Contains data about paginating the response via cursors. If no pagination details are specified or if you only provide a limit, then both properties will be present. When a 'before' or 'after' cursor is provided, only the 'cursor_pagination' property will be present. When a 'page' parameter is provided, only the offset based 'pagination' property will be present.'
             */
            meta?: {
              /**
               * Pagination
               * @description Data about the response, including pagination and collection totals.
               */
              pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                total_pages?: number;
              };
              /** Cursor Pagination */
              cursor_pagination?: {
                /**
                 * Format: int32
                 * @description Total number of items in the collection response.
                 */
                count?: number;
                /**
                 * Format: int32
                 * @description The number of items that can be returned per page, determined by the limit parameter—whether explicitly set, defaulted, or capped at the maximum limit.
                 */
                per_page?: number;
                /** @description A string representing the starting point of the current page in the collection. */
                start_cursor?: string;
                /** @description A string representing the ending point of the current page in the collection. */
                end_cursor?: string;
                /**
                 * links
                 * @description Pagination links for the previous and next parts of the whole collection.
                 */
                links?: {
                  /** @description Link to the previous page returned in the response. */
                  previous?: string;
                  /** @description Link to the current page returned in the response. */
                  current?: string;
                  /** @description Link to the next page returned in the response. */
                  next?: string;
                };
              };
            };
          };
        };
      };
      /** @description Allowed number of requests exceeded. */
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
          "examples": unknown;
        };
      };
    };
  };
  /**
   * Upsert Price List Records
   * @description Creates or updates *Price List Records*.
   *
   * **Required Fields**
   * * currency
   *
   * **Notes**
   * * Batch requests support up to 1,000 items per request.
   * * Up to 2 concurrent batch upsert requests are supported with this API. Running more than the allowed concurrent requests in parallel on the **same store** will cause a `429` error, and your additional requests will fail. You are encouraged to run requests sequentially with as many records per request as possible to maximize performance.
   * * When updating a product with variants, or multiple SKUs, don't include records for the parent product SKU.
   */
  upsertPriceListRecords: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": ({
            /**
             * @description The variant ID with which this price set is associated. Either `variant_id` or `sku` is required.
             *
             * @example 331
             */
            variant_id?: number;
            /**
             * @description The SKU for the variant with which this price set is associated. Either `sku` or `variant_id` is required.
             *
             * @example SMB-123
             */
            sku?: string;
            /**
             * Format: ISO-4217
             * @description The 3-letter currency code with which this price set is associated.
             *
             * @example usd
             */
            currency?: string;
          } & ({
            /**
             * Format: double
             * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
             *
             * @example 3.99
             */
            price?: number;
            /**
             * Format: double
             * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
             *
             * @example 3.49
             */
            sale_price?: number;
            /**
             * Format: double
             * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product. If empty, the retail price will be treated as not being set on this variant.
             *
             * @example 4.99
             */
            retail_price?: number;
            /**
             * Format: double
             * @description The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
             *
             * @example 2.5
             */
            map_price?: number;
            bulk_pricing_tiers?: ({
                /**
                 * @description The minimum quantity of associated variant in the cart needed to qualify for the pricing of this tier.
                 *
                 * @example 1
                 */
                quantity_min?: number;
                /**
                 * @description The maximum allowed quantity of associated variant in the cart to qualify for the pricing of this tier.
                 *
                 * @example 10
                 */
                quantity_max?: number;
                /**
                 * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
                 *
                 * @example price
                 * @enum {string}
                 */
                type?: "fixed" | "price" | "percent";
                /**
                 * Format: double
                 * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
                 *
                 * @example 3
                 */
                amount?: number;
              })[];
            /**
             * @description The SKU code associated with this `Price Record` if requested and it exists.
             *
             * @example SMB-123
             */
            sku?: string;
          }))[];
      };
    };
    responses: {
      /** @description Success response for batch PUT requests of Price Records. */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
            meta?: Record<string, never>;
          };
        };
      };
      /** @description Error response for batch PUT of `Price Records`. May include errors during partial update in non-strict mode. */
      422: {
        content: {
          "application/json": {
            batch_errors?: {
                /**
                 * Price Record Identifiers
                 * @description Price Record object used in batch create or update.
                 */
                data?: {
                  /**
                   * @description The Price List with which this price set is associated.
                   *
                   * @example 2
                   */
                  price_list_id?: number;
                  /**
                   * @description The variant ID with which this price set is associated. Either `variant_id` or `sku` is required.
                   *
                   * @example 325
                   */
                  variant_id?: number;
                  /** @description The variant with which this price set is associated. Either `sku` or `variant_id` is required. */
                  sku?: string;
                  /**
                   * Format: ISO-4217
                   * @description The 3-letter currency code with which this price set is associated.
                   *
                   * @example usd
                   */
                  currency?: string;
                };
                /** Detailed Errors */
                field_errors?: {
                  [key: string]: unknown;
                };
              }[];
          };
        };
      };
      /** @description Allowed number of requests exceeded. */
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
          "examples": unknown;
        };
      };
    };
  };
  /**
   * Delete a Price List Record
   * @description Deletes a *Price List Record*. Deleting the records does not delete the Price List. Optional parameters can be passed in.
   */
  deletePriceListRecords: {
    parameters: {
      query?: {
        /** @description The 3-letter currency code with which this set of prices is associated. */
        currency?: string;
        /** @description A comma-separated list of IDs for one or more variants for which prices exist. */
        "variant_id:in"?: number[];
        /** @description A comma-separated list of SKUs for one or more variants for which prices exist. */
        "sku:in"?: string[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
      };
    };
    responses: {
      204: {
        content: {
          "application/json": {
            /** @description 204 HTTP status code. */
            status?: number;
            /** @description The error title describing the situation. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
    };
  };
  /**
   * Get Price Records by Variant
   * @description Returns *Price List Records* using the variant ID. Will also contain currency records.
   *
   * **Notes**
   * * Supports up to 40 simultaneous GET requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error, and your additional requests will fail.
   * * Store Pricelist Records data to reduce the number of calls and maximize performance.
   */
  getPriceListRecordsByVariantId: {
    parameters: {
      query?: {
        /** @description Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`. Other values will be ignored. */
        include?: ("bulk_pricing_tiers" | "sku")[];
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. If you provide only a limit, the API returns both paginations while applying that limit. */
        limit?: number;
        /** @description A cursor that can be used for backwards pagination. Will fetch results before the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'after' query parameter. */
        before?: string;
        /** @description A cursor that can be used for forwards pagination. Will fetch results after the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'before' query parameter. */
        after?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
        /** @description ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: ({
                /**
                 * Format: double
                 * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. Read only.
                 *
                 * @example 24.64
                 */
                calculated_price?: number;
                /**
                 * Format: date-time
                 * @description The date on which the Price entry was created.
                 *
                 * @example 2022-08-23T19:59:23Z
                 */
                date_created?: string;
                /**
                 * Format: date-time
                 * @description The date on which the Price entry was created.
                 *
                 * @example 2022-08-23T19:59:23Z
                 */
                date_modified?: string;
                /**
                 * @description The ID of the `Product` this `Price Record`ʼs `variant_id` is associated with. Read only.
                 *
                 * @example 158
                 */
                product_id?: number;
              } & {
                /**
                 * @description The Price List with which this price set is associated.
                 *
                 * @example 2
                 */
                price_list_id?: number;
                /**
                 * @description The variant ID with which this price set is associated. Either `variant_id` or `sku` is required.
                 *
                 * @example 325
                 */
                variant_id?: number;
                /** @description The variant ID with which this price set is associated. Either `sku` or `variant_id` is required. */
                sku?: string;
                /**
                 * @description The 3-letter currency code with which this price set is associated.
                 *
                 * @example usd
                 */
                currency?: string;
              } & ({
                /**
                 * Format: double
                 * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
                 *
                 * @example 3.99
                 */
                price?: number;
                /**
                 * Format: double
                 * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
                 *
                 * @example 5.99
                 */
                sale_price?: number;
                /**
                 * Format: double
                 * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product. If empty, the retail price will be treated as not being set on this variant.
                 *
                 * @example 6.99
                 */
                retail_price?: number;
                /**
                 * Format: double
                 * @description The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
                 *
                 * @example 5.99
                 */
                map_price?: number;
                bulk_pricing_tiers?: ({
                    /**
                     * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
                     *
                     * @example 1
                     */
                    quantity_min?: number;
                    /**
                     * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
                     *
                     * @example 10
                     */
                    quantity_max?: number;
                    /**
                     * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
                     *
                     * @example price
                     * @enum {string}
                     */
                    type?: "fixed" | "price" | "percent";
                    /**
                     * Format: double
                     * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
                     *
                     * @example 3
                     */
                    amount?: number;
                  })[];
                /**
                 * @description The SKU code associated with this `Price Record` if requested and it exists.
                 *
                 * @example SMB-123
                 */
                sku?: string;
              }))[];
            /**
             * Collection Meta
             * @description 'Contains data about paginating the response via cursors. If no pagination details are specified or if you only provide a limit, then both properties will be present. When a 'before' or 'after' cursor is provided, only the 'cursor_pagination' property will be present. When a 'page' parameter is provided, only the offset based 'pagination' property will be present.'
             */
            meta?: {
              /**
               * Pagination
               * @description Data related to the response, including pagination and collection totals.
               */
              pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                total_pages?: number;
              };
              /**
               * Cursor Pagination
               * @description Data about cursor pagination.
               */
              cursor_pagination?: {
                /**
                 * Format: int32
                 * @description Total number of items in the collection response.
                 */
                count?: number;
                /**
                 * Format: int32
                 * @description The number of items that can be returned per page, determined by the limit parameter—whether explicitly set, defaulted, or capped at the maximum limit.
                 */
                per_page?: number;
                /** @description A string representing the starting point of the current page in the collection. */
                start_cursor?: string;
                /** @description A string representing the ending point of the current page in the collection. */
                end_cursor?: string;
                /**
                 * links
                 * @description Pagination links for the previous and next parts of the whole collection.
                 */
                links?: {
                  /** @description Link to the previous page returned in the response. */
                  previous?: string;
                  /** @description Link to the current page returned in the response. */
                  current?: string;
                  /** @description Link to the next page returned in the response. */
                  next?: string;
                };
              };
            };
          };
        };
      };
      /** @description Allowed number of requests exceeded. */
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
          "examples": unknown;
        };
      };
    };
  };
  /**
   * Get a Price Record by Currency Code
   * @description Returns a *Price List Record* using the currency code. You can use optional parameters.
   * **Notes**
   * * Supports up to 50 simultaneous GET requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error, and your additional requests will fail.
   */
  getPriceListRecord: {
    parameters: {
      query?: {
        /** @description Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`. Other values will be ignored. */
        include?: ("bulk_pricing_tiers" | "sku")[];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
        /** @description ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** @description The currency code associated with the price record being acted upon. */
        currency_code: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Price Record
             * @description The Price Record object.
             */
            data?: {
              /**
               * Format: double
               * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. Read only.
               *
               * @example 24.64
               */
              calculated_price?: number;
              /**
               * Format: date-time
               * @description The date on which the Price entry was created.
               *
               * @example 2022-08-23T19:59:23Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description The date on which the Price entry was created.
               *
               * @example 2022-08-23T19:59:23Z
               */
              date_modified?: string;
              /**
               * @description The ID of the `Product` this `Price Record`ʼs `variant_id` is associated with. Read only.
               *
               * @example 158
               */
              product_id?: number;
            } & {
              /**
               * @description The Price List with which this price set is associated.
               *
               * @example 2
               */
              price_list_id?: number;
              /**
               * @description The variant with which this price set is associated. Either `variant_id` or `sku` is required.
               *
               * @example 325
               */
              variant_id?: number;
              /** @description The variant with which this price set is associated. Either `sku` or `variant_id` is required. */
              sku?: string;
              /**
               * Format: ISO-4217
               * @description The 3-letter currency code with which this price set is associated.
               *
               * @example usd
               */
              currency?: string;
            } & ({
              /**
               * Format: double
               * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
               *
               * @example 3.99
               */
              price?: number;
              /**
               * Format: double
               * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
               */
              sale_price?: number;
              /**
               * Format: double
               * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product. If empty, the retail price will be treated as not being set on this variant.
               */
              retail_price?: number;
              /**
               * Format: double
               * @description The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
               */
              map_price?: number;
              bulk_pricing_tiers?: ({
                  /**
                   * @description The minimum quantity of associated variant in the cart needed to qualify for the pricing of this tier.
                   *
                   * @example 1
                   */
                  quantity_min?: number;
                  /**
                   * @description The maximum allowed quantity of associated variant in the cart to qualify for the pricing of this tier.
                   *
                   * @example 10
                   */
                  quantity_max?: number;
                  /**
                   * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
                   *
                   * @example price
                   * @enum {string}
                   */
                  type?: "fixed" | "price" | "percent";
                  /**
                   * Format: double
                   * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
                   *
                   * @example 3
                   */
                  amount?: number;
                })[];
              /**
               * @description The SKU code associated with this `Price Record` if requested and it exists.
               *
               * @example SMB-123
               */
              sku?: string;
            });
            meta?: components["schemas"]["Meta"];
          };
        };
      };
      /** @description Allowed number of requests exceeded. */
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
          "examples": unknown;
        };
      };
    };
  };
  /**
   * Set Price List Record by Currency Code
   * @description Creates or updates a *Price List Record* using the currency code.
   * **Notes**
   * * Supports up to 40 simultaneous PUT requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error, and your additional requests will fail.
   */
  setPriceListRecord: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
        /** @description ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** @description The currency code associated with the price record being acted upon. */
        currency_code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: double
           * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
           *
           * @example 3.99
           */
          price?: number;
          /**
           * Format: double
           * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
           */
          sale_price?: number;
          /**
           * Format: double
           * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
           */
          retail_price?: number;
          /**
           * Format: double
           * @description The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
           */
          map_price?: number;
          bulk_pricing_tiers?: ({
              /**
               * @description The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
               *
               * @example 1
               */
              quantity_min?: number;
              /**
               * @description The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
               *
               * @example 10
               */
              quantity_max?: number;
              /**
               * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
               *
               * @example price
               * @enum {string}
               */
              type?: "fixed" | "price" | "percent";
              /**
               * Format: double
               * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
               *
               * @example 3
               */
              amount?: number;
            })[];
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Price Record
             * @description The Price Record object.
             */
            data?: {
              /**
               * Format: double
               * @description The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. Read only.
               *
               * @example 24.64
               */
              calculated_price?: number;
              /**
               * Format: date-time
               * @description The date on which the Price entry was created.
               *
               * @example 2018-08-23T19:59:23Z
               */
              date_created?: string;
              /**
               * Format: date-time
               * @description The date on which the Price entry was created.
               *
               * @example 2018-08-23T19:59:23Z
               */
              date_modified?: string;
              /**
               * @description The ID of the `Product` this `Price Record`ʼs `variant_id` is associated with. Read only.
               *
               * @example 158
               */
              product_id?: number;
            } & {
              /**
               * @description The Price List with which this price set is associated.
               *
               * @example 2
               */
              price_list_id?: number;
              /**
               * @description The variant with which this price set is associated. Either `variant_id` or `sku` is required.
               *
               * @example 325
               */
              variant_id?: number;
              /**
               * Format: ISO-4217
               * @description The 3-letter currency code with which this price set is associated.
               *
               * @example usd
               */
              currency?: string;
            } & ({
              /**
               * Format: double
               * @description The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
               *
               * @example 3.99
               */
              price?: number;
              /**
               * Format: double
               * @description The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
               */
              sale_price?: number;
              /**
               * Format: double
               * @description The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
               */
              retail_price?: number;
              /**
               * Format: double
               * @description The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
               */
              map_price?: number;
              bulk_pricing_tiers?: ({
                  /**
                   * @description The minimum quantity of associated variant in the cart needed to qualify for the pricing of this tier.
                   *
                   * @example 1
                   */
                  quantity_min?: number;
                  /**
                   * @description The maximum allowed quantity of associated variant in the cart to qualify for the pricing of this tier.
                   *
                   * @example 10
                   */
                  quantity_max?: number;
                  /**
                   * @description The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
                   *
                   * @example price
                   * @enum {string}
                   */
                  type?: "fixed" | "price" | "percent";
                  /**
                   * Format: double
                   * @description The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
                   *
                   * @example 3
                   */
                  amount?: number;
                })[];
            });
            meta?: components["schemas"]["Meta"];
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description `Price Record` was in conflict with another price record. This is the result of duplicate unique values. */
      409: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description `Price Record` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": {
            /** Detailed Errors */
            errors?: {
              [key: string]: unknown;
            };
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
      /** @description Allowed number of requests exceeded. */
      429: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
          "examples": unknown;
        };
      };
    };
  };
  /**
   * Delete a Price Record by Currency Code
   * @description Deletes a *Price List Record* using the currency code.
   * **Note:**
   * * Supports up to 25 simultaneous DELETE requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error, and your additional requests will fail.
   */
  deletePriceListRecord: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description The ID of the `Price List` requested. */
        price_list_id: number;
        /** @description ID of the variant on a product, or on an associated Price List Record. */
        variant_id: number;
        /** @description The currency code associated with the price record being acted upon. */
        currency_code: string;
      };
    };
    responses: {
      204: {
        content: {
        };
      };
    };
  };
  /**
   * Get Price List Assignments
   * @description Fetches an array of `Price List Assignments` matching a particular Customer Group and Price List and Channel.
   */
  getListOfPriceListAssignments: {
    parameters: {
      query?: {
        /** @description The ID of the `Price List Assignment`. */
        id?: number;
        /** @description The ID of the `Price List`. */
        price_list_id?: number;
        /** @description The ID of the `Customer Group`. */
        customer_group_id?: number;
        /** @description The ID of the `Channel`. */
        channel_id?: number;
        /** @description Filter items by a comma-separated list of IDs. */
        "id:in"?: number[];
        /** @description Filter items by a comma-separated list of customer group IDs. */
        "customer_group_id:in"?: number[];
        /** @description Filter items by a comma-separated list of price list IDs. */
        "price_list_id:in"?: number[];
        /** @description Filter items by a comma-separated list of channel IDs. */
        "channel_id:in"?: number[];
        /** @description Specifies the page number in a limited (paginated) list of products. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. If you provide only a limit, the API returns both paginations while applying that limit. */
        limit?: number;
        /** @description A cursor that can be used for backwards pagination. Will fetch results before the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'after' query parameter. */
        before?: string;
        /** @description A cursor that can be used for forwards pagination. Will fetch results after the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'before' query parameter. */
        after?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description An array of price list assignments and metadata. */
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentsForGetResponse"];
        };
      };
    };
  };
  /**
   * Create Price List Assignments
   * @description Creates a batch of `Price List Assignments`.
   * **Note:** The batch limit for `Price List Assignments` is 25.
   */
  createPriceListAssignments: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBatchPriceListAssignmentsRequest"];
      };
    };
    responses: {
      /** @description No content */
      200: {
        content: never;
      };
      /** @description Error response. Includes the errors for each reference ID. */
      422: {
        content: {
          "application/json": components["schemas"]["PriceListAssignmentsBatchErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Price List Assignments
   * @description Deletes one or more `Price List Assignments` objects from BigCommerce using a query parameter. You must use at least one query parameter.
   */
  deletePriceListAssignments: {
    parameters: {
      query?: {
        id?: components["parameters"]["FilterAssignmentIdParam"];
        price_list_id?: components["parameters"]["FilterPriceListIdParam"];
        customer_group_id?: components["parameters"]["FilterCustomerGroupIdParam"];
        channel_id?: components["parameters"]["FilterChannelIdParam"];
        "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description No Content. */
      204: {
        content: never;
      };
    };
  };
  /**
   * Upsert Price List Assignment
   * @description Upsert a single `Price List Assignment` for a `Price List`.
   * **Note:**
   * * Supports up to 25 simultaneous PUT requests. Running more than the allowed number of requests concurrently on the same store will result in a `429` status error and your additional requests will fail.
   */
  upsertPriceListAssignment: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        price_list_id: components["parameters"]["PriceListIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignmentForPutRequest"];
      };
    };
    responses: {
      /** @description A price list assignment. */
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentForPutResponse"];
        };
      };
      /** @description A matching customer group or channel wasnʼt found, so no assignment is created or returned. */
      404: {
        content: never;
      };
    };
  };
}
