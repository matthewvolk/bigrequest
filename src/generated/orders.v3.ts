// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/orders/{order_id}/payment_actions/capture": {
    /**
     * Capture order payment
     * @description Capture the payment for an order. When there are no payment method validation issues, the capture process is successful, the `payment_status` updates to `capture pending`, and the payment request is scheduled. The payment request itself occurs asynchronously.
     * Requires at least one of the following scopes:
     * * `store_v2_orders`
     * * `store_v2_transactions`
     */
    post: operations["captureOrderPayment"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
  };
  "/orders/{order_id}/payment_actions/void": {
    /**
     * Void
     * @description Void the payment for an order. When there are no payment method validation issues, the void process is successful, the `payment_status` updates to `void pending`, and the void payment request is scheduled. The payment request itself occurs asynchronously.
     *
     * Requires at least one of the following scopes:
     * * `store_v2_orders`
     * * `store_v2_transactions`
     */
    post: operations["voidOrderPayment"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
  };
  "/orders/{order_id}/transactions": {
    /**
     * Get Transactions
     * @description Returns an **order ºs** transactions.
     *
     * **Usage Notes**
     * * Depending on the payment method, different information will be available (not all payment gateways return full card or fraud detail).
     *
     *
     * Requires at least one of the following scopes:
     * * `store_v2_transactions_read_only`
     * * `store_v2_transactions`
     */
    get: operations["getOrderTransactions"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
  };
  "/orders/{order_id}/payment_actions/refund_quotes": {
    /**
     * Create a Refund Quote
     * @description Calculate the tax amount, total refund amount and get available payment options for an order refund by providing items and costs or quantities to refund.
     *
     * Requires at least one of the following scopes:
     * * `store_v2_orders`
     * * `store_v2_transactions`
     *
     * **Notes:**
     * * Create a refund quote before performing a refund request to best avoid a `422` error. Check the refund quote's response body for the `refund_methods` array. The `amount` given in the array must match the `amount` used in the refund request body.
     * * Order refunds should be processed sequentially. Processing multiple concurrent refunds on the same order is not yet supported.
     */
    post: operations["createOrderRefundQuotes"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
  };
  "/orders/{order_id}/payment_actions/refunds": {
    /**
     * Get Refunds for Order
     * @description Returns a list of refunds ordered by refund ID in ascending order for the given order.
     *
     * Requires at least one of the following scopes:
     * * `store_v2_transactions_read_only`
     * * `store_v2_transactions`
     * * `store_v2_orders_read_only`
     * * `store_v2_orders`
     */
    get: operations["getOrderRefunds"];
    /**
     * Create a Refund
     * @description Creates a refund. When there are no payment method validation issues, the refund process is successful and the refund payment request is scheduled. The payment request itself occurs asynchronously.
     *
     * Requires at least one of the following scopes:
     * * `store_v2_orders`
     * * `store_v2_transactions`
     *
     * **Note:**
     * Order refunds should be processed sequentially. Processing multiple concurrent refunds on the same order are not yet supported.
     */
    post: operations["createOrderRefund"];
    parameters: {
      query?: {
        /** @description Filters by refund payment using the BigCommerce `transaction_id`. */
        transaction_id?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
  };
  "/orders/payment_actions/refunds/{refund_id}": {
    /**
     * Get a Refund
     * @description Returns a refund by refund ID.
     */
    get: operations["getOrderRefund"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description Refund ID. */
        refund_id: number;
      };
    };
  };
  "/orders/payment_actions/refunds": {
    /**
     * Get All Refunds
     * @description Returns a list of refunds ordered by refund ID in ascending order.
     *
     * Requires at least one of the following scopes:
     * * `store_v2_transactions_read_only`
     * * `store_v2_transactions`
     * * `store_v2_orders_read_only`
     * * `store_v2_orders`
     */
    get: operations["getOrdersRefunds"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/orders/{order_id}/metafields": {
    /**
     * Get Order Metafields
     * @description Gets a `Metafield` object list, by `order_id`.
     *
     * The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.
     */
    get: operations["getOrderMetafields"];
    /**
     * Create Metafields
     * @description Creates an order `Metafield`.
     *
     * The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.
     */
    post: operations["createOrderMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
  };
  "/orders/{order_id}/metafields/{metafield_id}": {
    /**
     * Get a Metafield
     * @description Gets a `Metafield`, by `order_id`.
     */
    get: operations["getOrderMetafield"];
    /**
     * Update a Metafield
     * @description Updates a `Metafield` object.
     *
     * The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.
     */
    put: operations["updateOrderMetafield"];
    /**
     * Delete a Metafield
     * @description Deletes a `Metafield`.
     */
    delete: operations["deleteOrderMetafield"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
        /** @description The ID of the `Metafield`. */
        metafield_id: number;
      };
    };
  };
  "/orders/settings": {
    /**
     * Get Global Order Settings
     * @description Returns global order settings.
     */
    get: operations["getGlobalOrderSettings"];
    /**
     * Update Global Order Settings
     * @description Updates global order settings.
     */
    put: operations["updateGlobalOrderSettings"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
  "/orders/settings/channels/{channel_id}": {
    /**
     * Get Channel Order Settings
     * @description Returns order settings for a specific channel.
     */
    get: operations["getChannelOrderSettings"];
    /**
     * Update Channel Order Settings
     * @description Updates order settings for a specific channel.
     *
     *  **Note:** You must override both notifications `email_addresses` or neither, i.e. either both notification `email_addresses` are an array of valid email addresses, or both `email_addresses` must be null. You may not have one set to an array of addresses and the other set to `null`.
     */
    put: operations["updateChannelOrderSettings"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description Channel ID */
        channel_id: string;
      };
    };
  };
  "/orders/metafields": {
    /**
     * Get All Order Metafields
     * @description Get all order metafields.
     */
    get: operations["getOrdersMetafields"];
    /**
     * Update multiple Metafields
     * @description Update multiple metafields.
     */
    put: operations["updateOrdersMetafields"];
    /**
     * Create multiple Metafields
     * @description Create multiple metafields.
     */
    post: operations["createOrdersMetafields"];
    /**
     * Delete Multiple Metafields
     * @description Delete all order metafields.
     */
    delete: operations["deleteOrdersMetafields"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    GetReturnsSettings: {
      reasons?: components["schemas"]["Reason"][];
      preferred_outcomes?: components["schemas"]["PreferredOutcome"][];
    };
    Reason: {
      /** Format: int64 */
      id?: number;
      /** @description A description of the reason. */
      label?: string;
      /** @description Indicates whether or not the reason has been archived. */
      is_archived?: boolean;
    };
    PreferredOutcome: {
      /** Format: int64 */
      id?: number;
      /** @description A description of the outcome. */
      label?: string;
      /** @description Indicates whether or not the outcome has been archived. */
      is_archived?: boolean;
    };
    /** CreateReturnRequest */
    CreateReturnRequest: {
      /** @description A collection of items to be returned. */
      items: components["schemas"]["CreateReturnRequestItem"][];
      /** @description A comment provided to the merchant for review. */
      comment?: string;
    };
    CreateReturnRequestItem: {
      reference_id: components["schemas"]["ItemReferenceId"];
      quantity: number;
      /** Format: int64 */
      preferred_outcome_id: number;
      /** Format: int64 */
      reason_id: number;
    };
    CreateReturn: components["schemas"]["Return_Full"];
    /** @description A view of a return. */
    Return_Full: {
      items?: components["schemas"]["ReturnItem"][];
      /**
       * Format: decimal
       * @description The total price of the items being returned.
       */
      total?: string;
      /**
       * Format: iso-4217
       * @description The transactional currency of the return and the associated order.
       */
      currency?: string;
      customer?: {
        /** Format: int64 */
        id?: number;
        /** Format: email */
        email?: string;
      };
      /** @description A comment provided to the merchant for review. */
      comment?: string;
      status?: components["schemas"]["Status_Full"];
      /** Format: date-time */
      date_modified?: string;
    };
    /** @description A view of a returned item. */
    ReturnItem: {
      /**
       * Format: int64
       * @description The unique identifier of this returned item.
       */
      id?: number;
      reference_id?: components["schemas"]["ItemReferenceId"];
      /** @description The quantity of items for which a return was requested. */
      quantity?: number;
      /**
       * Format: decimal
       * @description The total price of the line item.
       */
      total?: string;
      preferred_outcome?: {
        /**
         * Format: int64
         * @description Unique identifier of the preferred outcome.
         */
        id?: number;
        /** @description A displayable label for the preferred outcome. */
        label?: string;
      };
      reason?: {
        /**
         * Format: int64
         * @description Unique identifier of the reason.
         */
        id?: number;
        /** @description A displayable label for the reason. */
        label?: string;
      };
      received_state?: {
        /** @description The quantity of items marked as received by the merchant. */
        received_quantity?: number;
        /** @description The quantity of items pending receipt by the merchant. */
        pending_quantity?: number;
      };
      review_state?: {
        /** @description The quantity of items approved for return by the merchant. */
        approved_quantity?: number;
        /** @description The quantity of items pending receipt by the merchant. */
        pending_quantity?: number;
        /** @description The quantity of items rejected by the merchant. */
        rejected_quantity?: number;
      };
    };
    /** StatusUpdate_Full */
    StatusUpdate_Full: {
      /**
       * Format: int64
       * @description The ID of the return for which the status should be updated.
       */
      return_id?: number;
      new_status?: components["schemas"]["Status_Full"];
    };
    /**
     * Status_Full
     * @description The status of the return.
     * @enum {string}
     */
    Status_Full: "CLOSED" | "OPEN" | "REMOVED";
    /** UpdateReturnStatusesRequest */
    UpdateReturnStatusesRequest: components["schemas"]["StatusUpdate_Full"][];
    UpdateReturnStatuses: {
        /**
         * Format: int64
         * @description The ID of the return for which the status was updated.
         */
        id?: number;
        status?: components["schemas"]["Status_Full"];
      }[];
    Problem: {
      /** @description Status code of the problem. */
      status?: number;
      /** @description A short description of the problem. */
      title?: string;
      /**
       * Format: url
       * @description A resource describing the problem.
       */
      type?: string;
    };
    BatchOperationMeta: {
      /** @description The total number of operations in the batch. */
      total?: number;
      /** @description The number of failed operations in the batch. */
      success?: number;
      /** @description The number of failed operations in the batch. */
      failed?: number;
    };
    /**
     * Pagination
     * @description Data about the response, including pagination and collection totals.
     */
    Pagination: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 36
       */
      total?: number;
      /**
       * @description Total number of items in the collection response.
       *
       * @example 36
       */
      count?: number;
      /**
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       *
       * @example 50
       */
      per_page?: number;
      /**
       * @description The page you are currently on within the collection.
       *
       * @example 1
       */
      current_page?: number;
      /**
       * @description The total number of pages in the collection.
       *
       * @example 1
       */
      total_pages?: number;
      /** @description Pagination links for the previous and next parts of the whole collection. */
      links?: {
        /** @description Link to the previous page returned in the response. */
        previous?: string;
        /**
         * @description Link to the current page returned in the response.
         *
         * @example ?page=1&limit=50
         */
        current?: string;
        /** @description Link to the next page returned in the response. */
        next?: string;
      };
    };
    /** ReceivedItems_Put */
    ReceivedItems_Put: {
        /**
         * Format: int64
         * @description The item ID for updating the received state.
         */
        item_id: number;
        /** @description The quantity of items to be marked as received. */
        received_quantity: number;
        /** @description The quantity of items to be marked as pending. */
        pending_quantity: number;
      }[];
    /** ReceivedItems_Base */
    ReceivedItems_Base: {
        /**
         * Format: int64
         * @description The ID of the item for which received item status was updated.
         */
        item_id?: number;
        /**
         * Format: int64
         * @description The quantity of items marked as received.
         */
        received_quantity?: number;
        /**
         * Format: int64
         * @description The quantity of items marked as pending.
         */
        pending_quantity?: number;
      }[];
    /** ReviewedItems_Put */
    ReviewedItems_Put: {
        /**
         * Format: int64
         * @description The item ID for updating the reviewed state.
         */
        item_id: number;
        /** @description The quantity of items to be marked as authorized. */
        authorized_quantity: number;
        /** @description The quantity of items to be marked as rejected. */
        rejected_quantity: number;
        /** @description The quantity of items to be marked as pending. */
        pending_quantity: number;
      }[];
    /** ReviewedItems_Base */
    ReviewedItems_Base: {
        /**
         * Format: int64
         * @description The ID of the item for which reviewed status was updated.
         */
        item_id?: number;
        /**
         * Format: int64
         * @description The quantity of items marked as authorized.
         */
        authorized_quantity?: number;
        /**
         * Format: int64
         * @description The quantity of items marked as rejected.
         */
        rejected_quantity?: number;
        /**
         * Format: int64
         * @description The quantity of items marked as pending.
         */
        pending_quantity?: number;
      }[];
    GetReturnableItems: {
        reference_id?: components["schemas"]["ItemReferenceId"];
        /** @description The name of the order product. */
        name?: string;
        /** @description The maximum quantity of this item that can presently be requested for return. */
        returnable_quantity?: number;
        /**
         * Format: decimal
         * @description The total price of this line item.
         */
        total?: string;
        /** @description A collection of options configured for the order product. */
        options?: {
            /** @description A displayable name for the option. */
            display_name?: string;
            /** @description A displayable value for the option. */
            display_value?: string;
          }[];
      }[];
    ItemReferenceId: {
      /**
       * @description The reference type.
       * @enum {string}
       */
      type: "ORDER_PRODUCT";
      /** @description The value identifying the returned item. */
      value: string;
    };
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
    };
    /** Meta */
    Meta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      meta?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
    };
    /** ErrorResponse */
    ErrorResponse: components["schemas"]["error_Base"] & {
      /** DetailedErrors */
      errors?: {
        [key: string]: unknown;
      };
    };
    /** DetailedErrors */
    DetailedErrors: {
      [key: string]: unknown;
    };
    /** Transaction_Post */
    Transaction_Post: {
      /**
       * @description Store event that created the transaction.
       *
       * @enum {string}
       */
      event: "purchase" | "authorization" | "capture" | "refund" | "void" | "pending" | "settled";
      /**
       * @description The payment method: `credit_card` - a credit card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline.
       *
       * @enum {string}
       */
      method: "credit_card" | "electronic_wallet" | "gift_certificate" | "store_credit" | "apple_pay_card" | "apple_pay_token" | "bigpay_token" | "token" | "custom" | "offsite" | "offline" | "nonce";
      /**
       * Format: float
       * @description Amount of money in the transaction.
       */
      amount: number;
      /**
       * Format: ISO-4217
       * @description Currency used for the transaction.
       */
      currency: string;
      /**
       * @description The payment gateway, where applicable.
       *
       * @enum {string}
       */
      gateway: "2checkout" | "adyen" | "amazon" | "authorizenet" | "bankdeposit" | "braintree" | "cheque" | "cod" | "custom" | "firstdatagge4" | "giftcertificate" | "hps" | "instore" | "klarna" | "migs" | "moneyorder" | "nmi" | "paypalexpress" | "paypalpaymentsprous" | "paypalpaymentsprouk" | "plugnpay" | "qbmsv2" | "securenet" | "square" | "storecredit" | "stripe" | "testgateway" | "usaepay";
      /** @description The transaction ID returned by the payment gateway for this transaction item. */
      gateway_transaction_id?: string;
      /**
       * Format: date-time
       * @description The date/time of the transaction.
       */
      date_created?: string;
      /** @description True if the transaction performed was a test, or if the gateway is in test mode. */
      test?: boolean;
      /**
       * @description Status of the transaction.
       *
       * @enum {string}
       */
      status?: "ok" | "error";
      /** @description Result of gateway fraud review, if any. Default is `false`. */
      fraud_review?: boolean;
      /** @description Identifier for an existing transaction upon which this transaction acts. */
      reference_transaction_id?: number;
      offline?: components["schemas"]["Offline"];
      custom?: components["schemas"]["Custom"];
    };
    /**
     * Not Found
     * @description Error payload for the BigCommerce API.
     */
    NotFound: {
      /** @description 404 HTTP status code. */
      status?: number;
      /** @description The resource at that URL is not found. */
      title?: string;
      type?: string;
      /** @description Empty for 200 responses. */
      errors?: unknown[];
    };
    Transaction: ({
      /**
       * @description Store event that created the transaction.
       *
       * @enum {string}
       */
      event: "purchase" | "authorization" | "capture" | "refund" | "void" | "pending" | "settled";
      /**
       * @description The payment method: `credit_card` - a credit card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site; `offline` - payment method that takes place offline.
       *
       * @enum {string}
       */
      method: "credit_card" | "electronic_wallet" | "gift_certificate" | "store_credit" | "apple_pay_card" | "bigpay_token" | "apple_pay_token" | "token" | "custom" | "offsite" | "offline" | "nonce";
      /**
       * Format: float
       * @description Amount of money in the transaction.
       */
      amount: number;
      /**
       * Format: ISO-4217
       * @description Currency used for the transaction.
       */
      currency: string;
      /**
       * @description The payment gateway, where applicable.
       *
       * @enum {string}
       */
      gateway: "2checkout" | "adyen" | "amazon" | "authorizenet" | "bankdeposit" | "braintree" | "cheque" | "cod" | "custom" | "firstdatagge4" | "giftcertificate" | "hps" | "instore" | "klarna" | "migs" | "moneyorder" | "nmi" | "paypalexpress" | "paypalpaymentsprous" | "paypalpaymentsprouk" | "plugnpay" | "qbmsv2" | "securenet" | "square" | "storecredit" | "stripe" | "testgateway" | "usaepay";
      /** @description The transaction ID returned by the payment gateway for this transaction item. */
      gateway_transaction_id?: string;
      /** @description True if the transaction performed was a test, or if the gateway is in test mode. */
      test?: boolean;
      /**
       * @description Status of the transaction.
       *
       * @enum {string}
       */
      status?: "ok" | "error";
      /** @description Result of gateway fraud review, if any. Default is `false`. */
      fraud_review?: boolean;
      /** @description Identifier for an existing transaction upon which this transaction acts. */
      reference_transaction_id?: number;
      /**
       * Offline
       * @description Offline payment (e.g., check or purchase order).
       */
      offline?: {
        /** @description Display name for the offline payment. */
        display_name?: string;
      } | null;
      /**
       * Custom
       * @description Custom payment from manual order.
       */
      custom?: {
        /** @description Text entered for the payment method in the control panel. */
        payment_method?: string;
      } | null;
      /** @description The payment method ID used for this transaction. */
      payment_method_id?: string;
    }) & ({
      /** @description Unique identifier for the transaction. */
      id?: number;
      /** @description Identifier for the BigCommerce Order with which this transaction is associated. */
      order_id?: string;
      /**
       * Format: date-time
       * @description The date/time of the transaction in ISO-8601 format.
       */
      date_created?: string;
      /** @description This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment. */
      payment_instrument_token?: string | null;
      /**
       * AVS Results
       * @description Address Verification Service (AVS) result from the payment gateway.
       */
      avs_result?: {
        /** @description AVS code. */
        code?: string;
        /** @description AVS message. */
        message?: string;
        /** @description AVS Code for street matching result. */
        street_match?: string;
        /** @description AVS Code for postal matching result. */
        postal_match?: string;
      };
      /**
       * CVV Result
       * @description Card Verification Value result from the payment gateway.
       */
      cvv_result?: {
        /** @description CVV code. */
        code?: string;
        /** @description CVV message. */
        message?: string;
      };
      credit_card?: components["schemas"]["CreditCard"];
      /**
       * Gift Certificate
       * @description A gift-certificate model.
       */
      gift_certificate?: ({
        /**
         * @description The gift-certificate code.
         *
         * @example MB345
         */
        code?: string;
        /**
         * Format: float
         * @description The balance on a gift certificate when it was purchased.
         *
         * @example 100
         */
        original_balance?: number;
        /**
         * Format: float
         * @description The balance on a gift certificate at the time of this purchase.
         *
         * @example 100
         */
        starting_balance?: number;
        /**
         * Format: float
         * @description The remaining balance on a gift certificate.
         *
         * @example 35.42
         */
        remaining_balance?: number;
        /**
         * @description The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.
         *
         * @enum {string}
         */
        status?: "active" | "pending" | "disabled" | "expired";
      }) | null;
      /** @description A store credit model. */
      store_credit?: {
        /**
         * Format: float
         * @description Remaining balance of shopper ºs store credit.
         *
         * @example 35.42
         */
        remaining_balance?: number;
      } | null;
      /**
       * Custom Payment Provider Field
       * @description Fields for custom payment providers.
       */
      custom_provider_field_result?: ({
        /** @description The receipt number associated with the transaction. */
        receipt_number?: string | null;
        /** @description Authorization code for the transaction. */
        authorization_code?: string | null;
        /** @description The fraud response associated with the transaction. */
        fraud_response?: string | null;
        /**
         * Format: float
         * @description The amount received for the transaction, divided by 100 to convert to the correct currency format.
         */
        amount_received?: number | null;
      }) | null;
    });
    /**
     * Credit Card
     * @description A credit card model.
     */
    CreditCard: {
      /**
       * @description **Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr
       * @enum {string}
       */
      card_type?: "alelo" | "alia" | "american_express" | "cabal" | "carnet" | "dankort" | "diners_club" | "discover" | "elo" | "forbrugsforeningen" | "jcb" | "maestro" | "master" | "naranja" | "sodexo" | "unionpay" | "visa" | "vr";
      /** @description The IIN of a credit card number. */
      card_iin?: string;
      /** @description The last 4 digits of a credit card number. */
      card_last4?: string;
      /** @description The expiry month of a credit card. */
      card_expiry_month?: number;
      /** @description The expiry year of a credit card. */
      card_expiry_year?: number;
    };
    /** @description A store credit model. */
    StoreCredit: {
      /**
       * Format: float
       * @description Remaining balance of shopper ºs store credit.
       *
       * @example 35.42
       */
      remaining_balance?: number;
    };
    /**
     * Custom
     * @description Custom payment from manual order.
     */
    Custom: {
      /** @description Text entered for the payment method in the control panel. */
      payment_method?: string;
    };
    /**
     * Offline
     * @description Offline payment (e.g., check or purchase order).
     */
    Offline: {
      /** @description Display name for the offline payment. */
      display_name?: string;
    };
    /**
     * Gift Certificate
     * @description A gift-certificate model.
     */
    GiftCertificate: {
      /**
       * @description The gift-certificate code.
       *
       * @example MB345
       */
      code?: string;
      /**
       * Format: float
       * @description The balance on a gift certificate when it was purchased.
       *
       * @example 100
       */
      original_balance?: number;
      /**
       * Format: float
       * @description The balance on a gift certificate at the time of this purchase.
       *
       * @example 100
       */
      starting_balance?: number;
      /**
       * Format: float
       * @description The remaining balance on a gift certificate.
       *
       * @example 35.42
       */
      remaining_balance?: number;
      /**
       * @description The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.
       *
       * @enum {string}
       */
      status?: "active" | "pending" | "disabled" | "expired";
    };
    /**
     * AVS Results
     * @description Address Verification Service (AVS) result from the payment gateway.
     */
    AVSResult: {
      /** @description AVS code. */
      code?: string;
      /** @description AVS message. */
      message?: string;
      /** @description AVS Code for street matching result. */
      street_match?: string;
      /** @description AVS Code for postal matching result. */
      postal_match?: string;
    };
    /**
     * CVV Result
     * @description Card Verification Value result from the payment gateway.
     */
    CVVResult: {
      /** @description CVV code. */
      code?: string;
      /** @description CVV message. */
      message?: string;
    };
    /**
     * No Content
     * @description No-content response for the BigCommerce API.
     */
    NoContent: {
      /** @description 204 HTTP status code. */
      status?: number;
      /** @description The error title describing the situation. */
      title?: string;
      type?: string;
      instance?: string;
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    metaEmpty_Full: {
      [key: string]: unknown;
    };
    /** pagination_Full */
    pagination_Full: {
      /**
       * Format: int32
       * @description Total number of items in the result set.
       */
      total?: number;
      /**
       * Format: int32
       * @description Total number of items in the collection response.
       */
      count?: number;
      /**
       * Format: int32
       * @description The amount of items returned in the collection per page, controlled by the limit parameter.
       */
      per_page?: number;
      /**
       * Format: int32
       * @description The page you are currently on within the collection.
       */
      current_page?: number;
      /**
       * Format: int32
       * @description The total number of pages in the collection.
       */
      total_pages?: number;
      links?: components["schemas"]["links_Full"];
    };
    /** metaCollection_Full */
    metaCollection_Full: {
      pagination?: components["schemas"]["pagination_Full"];
    };
    /** links_Full */
    links_Full: {
      /** @description Link to the previous page returned in the response. */
      previous?: string;
      /**
       * @description Link to the current page returned in the response.
       *
       * @example ?page=1&limit=50
       */
      current?: string;
      /** @description Link to the next page returned in the response. */
      next?: string;
    };
    /**
     * error_Base
     * @description Error payload for the BigCommerce API.
     */
    error_Base: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    };
    /** errorDetailed_Full */
    errorDetailed_Full: {
      /** DetailedErrors */
      errors?: {
        [key: string]: unknown;
      };
    };
    /**
     * Refund Quotes Request - BATCH
     * @description Request body for batch refund quotes.
     */
    PostRefundQuotesRequest: components["schemas"]["RefundQuote_Post"][];
    /**
     * RefundQuote_Post
     * @description Request body for refund quotes.
     */
    RefundQuote_Post: {
      items: components["schemas"]["ItemsRefund"][];
    };
    /** RefundQuote_Full */
    RefundQuote_Full: {
      /** @description ID of the order to be refunded. */
      order_id?: number;
      total_refund_amount?: components["schemas"]["Amount"];
      /** @example 1.95 */
      total_refund_tax_amount?: number;
      /** @example 1.99 */
      order_level_refund_amount?: number;
      /** @description Indicates rounding value to bring `refund_total` to an amount refundable with payment providers (in this case to 2 decimal places). */
      rounding?: number;
      adjustment?: components["schemas"]["AdjustmentAmount"];
      /** @description Indicate if `total_refund_amount` includes tax amount. */
      tax_inclusive?: boolean;
      /**
       * @description An array of available refund methods.
       *
       * Note that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.
       *
       * For example, if the order was placed by a combination of store credit and bank deposit the refund methods would be:
       *
       * ```json
       * {
       *   "refund_methods": [
       *     [
       *       {
       *         "provider_id": "storecredit",
       *         "provider_description": "Store Credit",
       *         "amount": 119.35,
       *         "offline": false,
       *         "offline_provider": false,
       *         "offline_reason": ""
       *       }
       *     ],
       *     [
       *       {
       *         "provider_id": "custom",
       *         "provider_description": "Custom",
       *         "amount": 119.35,
       *         "offline": true,
       *         "offline_provider": true,
       *         "offline_reason": "This is an offline payment provider."
       *       }
       *     ],
       *     [
       *       {
       *         "provider_id": "bankdeposit",
       *         "provider_description": "Bank Deposit",
       *         "amount": 80.35,
       *         "offline": true,
       *         "offline_provider": true,
       *         "offline_reason": "This is an offline payment provider."
       *       },
       *       {
       *         "provider_id": "storecredit",
       *         "provider_description": "Store Credit",
       *         "amount": 39,
       *         "offline": false,
       *         "offline_provider": false,
       *         "offline_reason": ""
       *       }
       *     ]
       *   ]
       * }
       * ```
       *
       * In this case there are three refund methods available to the merchant:
       * 1. Refund up to the entire order amount to store credit.
       * 2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC ("custom").
       * 3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit with a manual refund, which will be recorded as being refunded against the bank deposit.
       */
      refund_methods?: components["schemas"]["RefundMethod"][];
    };
    /**
     * RefundRequest_Post
     * @description Request body for refund requests.
     */
    RefundRequest_Post: {
      items: components["schemas"]["ItemsRefund"][];
      payments: components["schemas"]["PaymentRequest"][];
      merchant_calculated_override?: components["schemas"]["MerchantOverride"];
    };
    RefundID_Get: {
      data?: {
        /** @description Refund ID for the returned refund. */
        id?: number;
        /** @description Order ID associated with the refund. */
        order_id?: number;
        /** @description Reference to the user ID who created the refund. This is automatically populated by BigCommerce. */
        user_id?: number;
        /**
         * Format: date-time
         * @description Timestamp of when the refund was created.
         */
        created?: string;
        /** @description Reason for refund. */
        reason?: string;
        /**
         * @description A non-negative 2 decimal place rounded value that represents the amount that can be refunded with the correct payment provider(s).
         *
         * @example 109.11
         */
        total_amount?: number;
        /** @description Total tax amount refunded back to the shopper. This can be a negative amount indicating we have collected tax by refunding less to the customer. */
        total_tax?: number;
        /** @description Whether refund amount and tax are provided explicitly by merchant override. */
        uses_merchant_override_values?: boolean;
        payments?: {
            /** @description Reference to refund payment ID. */
            id?: number;
            /**
             * @description Reference to payment provider.
             * example: storecredit
             */
            provider_id?: string;
            /**
             * @description A non-negative two decimal place rounded value represents the amount that can be charged/refunded with payment providers.
             *
             * @example 109.11
             */
            amount?: number;
            /** @description Indicates whether the payment was offline. */
            offline?: boolean;
            /** @description Indicates if this payment has been declined by the payment provider. */
            is_declined?: boolean;
            /** @description Message indicates why the payment was declined. */
            declined_message?: string;
          }[];
        items?: ({
            /**
             * @description Type of item that was refunded.
             *
             * @enum {string}
             */
            item_type?: "PRODUCT" | "GIFT_WRAPPING" | "SHIPPING" | "HANDLING" | "ORDER" | "FEE";
            /** @description `order_product.id` corresponding to the item_types of PRODUCT, GIFT_WRAPPING. `order_address.id` corresponding to the item_types of SHIPPING, HANDLING. `order.id` corresponding to the item_type of ORDER, FEE. */
            item_id?: number;
            /** @description Quantity of item refunded. Note: this will only be populated for item_type PRODUCT. */
            quantity?: number;
            /**
             * @description A non-negative two decimal place rounded value that represents the amount that can be refunded with the payment provider(s).
             *
             * @example 109.11
             */
            requested_amount?: string | null;
            /** @description Reason for refunding an item. */
            reason?: string;
          })[];
      };
      meta?: components["schemas"]["metaEmpty_Full"];
    };
    /**
     * Refunds Request - BATCH
     * @description Request body for batch refunds.
     */
    PostRefundsRequest: components["schemas"]["RefundRequest_Post"][];
    /**
     * FailedQuoteError
     * @description Failed quote response.
     */
    FailedQuoteError: {
      order_id?: number;
      /**
       * @description HTTP status code.
       * @example 422
       */
      status?: number;
      /** @description Details why the request failed. */
      error?: string;
    };
    /** ItemsRefund */
    ItemsRefund: components["schemas"]["AmountBoundItem"] | components["schemas"]["QuantityBoundItem"] | components["schemas"]["TaxExemptItem"] | components["schemas"]["FeeItem"];
    /** Payment Request */
    PaymentRequest: {
      /**
       * @description Reference to payment provider.
       * @example checkout_paypalexpress
       */
      provider_id?: string;
      /**
       * @description Amount refunded with this provider.
       * @example 9.99
       */
      amount?: number;
      /**
       * @description Whether the payment was marked as offline or performed through an online payment service.
       * @example true
       */
      offline?: boolean;
    };
    /** Refund Method */
    RefundMethod: components["schemas"]["PaymentOption"][];
    /**
     * Quantity Bound Item
     * @description Quantity Bound Item
     *
     * Type of refund item that capture refunding of items in the order that are of type quantity.
     * * `PRODUCT`
     * * `GIFT_WRAPPING`
     */
    QuantityBoundItem: {
      /**
       * @description Type of refund.
       * @example PRODUCT
       * @enum {string}
       */
      item_type: "PRODUCT" | "GIFT_WRAPPING";
      /**
       * @description Order Product ID.
       * @example 1
       */
      item_id: number;
      /** @description Array of product refund deductions */
      adjustments?: components["schemas"]["RefundItemAdjustment"][];
      /** @example 3 */
      quantity: number;
      /**
       * @description Reason for refund.
       * @example Wrong size.
       */
      reason?: string;
    };
    /**
     * Refund Item Adjustment
     * @description Use to reduce the amount refunded for an item.
     */
    RefundItemAdjustment: {
      /**
       * Refund Item Adjustment Amount
       * Format: float
       * @description A negative 2 decimal place rounded value to deduct from the amount refunded.
       * @example -10.2
       */
      amount?: number;
      /**
       * @description Description of reason for the adjustment.
       * @example Service fee
       */
      description?: string;
    };
    /**
     * Fee
     * @description Use this field to refund a custom fee at the order level.
     */
    FeeItem: {
      /**
       * @description The type of refund.
       * @example FEE
       * @enum {string}
       */
      item_type?: "FEE";
      /**
       * @description Numeric ID of the fee in the order.
       * @example 1
       */
      item_id?: number;
      amount?: components["schemas"]["Amount"];
      /**
       * @description Reason for the refund.
       * @example Customer requested refund
       */
      reason?: string;
    };
    /**
     * Tax Exempt (Order Level)
     * @description Use this to refund a custom value at the order level. When `item_type` is set to `ORDER`, tax is not re-calculated.
     */
    TaxExemptItem: {
      /**
       * @description The type of refund. When `item_type` is set to `ORDER`, tax is not re-calculated.
       * @example ORDER
       * @enum {string}
       */
      item_type?: "ORDER";
      /**
       * @description Numeric ID of the product in the order.
       * @example 1
       */
      item_id?: number;
      amount?: components["schemas"]["Amount"];
      /** @description Reason for the refund. */
      reason?: string;
    };
    /**
     * Amount Bound Item
     * @description Amount Bound Item
     *
     * Type of refund item that capture refunding of items in the order that are of type amount.
     * * `ORDER`
     * * `SHIPPING`
     * * `HANDLING`
     * * `TAX`
     * * `FEE`
     */
    AmountBoundItem: {
      /**
       * @description Type of refund.
       * @example SHIPPING
       * @enum {string}
       */
      item_type: "ORDER" | "SHIPPING" | "HANDLING" | "TAX" | "FEE";
      /**
       * @description Order address ID.
       * @example 1
       */
      item_id: number;
      amount: components["schemas"]["Amount"];
      /**
       * @description Explanation of refund.
       * @example Customer requested refund
       */
      reason?: string;
    };
    /**
     * Merchant Calculated Override
     * @description Merchant explicitly provided override based on their own calculation.
     *
     * This override gives merchants the flexibility to
     * - bypass any tax correction due to tax rate/providers changes between when a customer places an order and a merchant initiates a refund
     * - use explicit values calculated by external systems (e.g., merchants' own Extended Producer Responsibility or Order Management System)
     *
     * Note: when using the override, BC internal tax based refund calculation is skipped and therefore order/taxes records are not updated.
     */
    MerchantOverride: {
      total_amount: components["schemas"]["Amount"];
      /** @description Total tax amount refunded back to the shopper. Use 0 value if there is no tax liability change for the refund or tax does not need to be recorded on the refund and would be handled externally. */
      total_tax: number;
    };
    /** Refund */
    Refund: {
      /** @description Refund resource ID. */
      id?: number;
      /** @description Reference to order ID. */
      order_id?: number;
      /** @description Reference to the user ºs ID who create this refund. This is automatically populated by BigCommerce. */
      user_id?: number;
      /**
       * Format: date-time
       * @description Timestamp of when this refund was created.
       */
      created?: string;
      /** @description Reason for refund. */
      reason?: string;
      total_amount?: components["schemas"]["Amount"];
      /** @description Total tax amount refunded back to the shopper. Note: `order_level_amount` does not affect tax liability. This can be a negative amount indicating we have collected tax by refunding less to the customer. */
      total_tax?: number;
      /** @description Whether refund amount and tax are provided explicitly by merchant override. */
      uses_merchant_override_values?: boolean;
      /** @description Array of items refunded. */
      items?: components["schemas"]["RefundItem"][];
      /** @description An array of refund payments made to payment providers. */
      payments?: components["schemas"]["RefundPayment"][];
    };
    /** Refund Item */
    RefundItem: {
      /**
       * @description Type of item that was refunded.
       * @enum {string}
       */
      item_type?: "PRODUCT" | "GIFT_WRAPPING" | "SHIPPING" | "HANDLING" | "ORDER" | "FEE";
      /** @description order_product.id corresponding to the item_types of PRODUCT, GIFT_WRAPPING. order_address.id corresponding to the item_types of SHIPPING, HANDLING. order.id corresponding to the item_type of ORDER. */
      item_id?: number;
      /** @description Reason for refunding an item. */
      reason?: string;
      /** @description Quantity of item refunded. Note: this will only be populated for item_type PRODUCT */
      quantity?: number;
      /** @description Adjustments to apply to the refunded amount for an item. Only supported for item_type PRODUCT */
      adjustments?: components["schemas"]["RefundItemAdjustment"][];
      requested_amount?: components["schemas"]["Amount"];
    };
    /** Refund Payment */
    RefundPayment: {
      /** @description Reference to refund payment ID. */
      id?: number;
      /**
       * @description Reference to payment provider.
       * @example storecredit
       */
      provider_id?: string;
      amount?: components["schemas"]["Amount"];
      /** @description Indicate whether payment was offline. */
      offline?: boolean;
      /** @description Indicate if this payment has been declined by payment provider. */
      is_declined?: boolean;
      /** @description Message indicate why payment was declined. */
      declined_message?: string;
      /**
       * @description The BigCommerce `transaction_id`.
       * @example 1234
       */
      transaction_id?: string;
    };
    /**
     * Payment Option
     * @example {
     *   "provider_id": "checkout_paypalexpress",
     *   "provider_description": "Paypal Express",
     *   "amount": 9.99,
     *   "offline": true,
     *   "offline_provider": true,
     *   "offline_reason": "Multiple online refunds are not available."
     * }
     */
    PaymentOption: {
      /**
       * @description Name of the payment method.
       * @example checkout_paypalexpress
       */
      provider_id?: string;
      /**
       * @description Description for payment provider.
       * @example Paypal Express
       */
      provider_description?: string;
      /**
       * @description Amount to be refunded with this payment provider.
       * @example 9.99
       */
      amount?: number;
      /**
       * @description Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.
       * @example true
       */
      offline?: boolean;
      /**
       * @description Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.
       * @example true
       */
      offline_provider?: boolean;
      /**
       * @description Reason the payment option is offline only, if applicable.
       * @example Multiple online refunds are not available
       */
      offline_reason?: string;
    };
    /**
     * Amount
     * Format: float
     * @description A non-negative 2 decimal place rounded value that represents the amount that can be charged/refunded with payment providers. When creating refunds and refund quotes, this field becomes irrelevant when you select PRODUCT or GIFT_WRAPPING for `item_type`.
     * @example 1.99
     */
    Amount: number;
    /**
     * Adjustment Amount
     * Format: float
     * @description A negative or positive 2 decimal place rounded value that represents the difference between the refund amount requested in the refund quote and the actual amount that is refundable on the order. This value is negative when the refund amount requested in the refund quote is more than the total refundable amount. This value is positive when the total refundable amount has increased, e.g. as a result of rounding.
     * @example -10.2
     */
    AdjustmentAmount: number;
    /**
     * MetaRefund
     * @description Describes refund failures, success and totals.
     */
    MetaRefund: {
      failure?: number;
      success?: number;
      total?: number;
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse: {
      data?: components["schemas"]["Metafield"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["BatchOperationMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetafieldResponse: {
      data?: components["schemas"]["Metafield"];
      meta?: components["schemas"]["metaEmpty_Full"];
    };
    /** @description Common Metafield properties. */
    MetafieldBase: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description |
       * |:-|:-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example order
       */
      description?: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example order
       * @enum {string}
       */
      resource_type?: "order" | "brand" | "product" | "variant" | "category";
      /**
       * @description The unique identifier for the resource with which the metafield is associated.
       *
       * @example 0
       */
      resource_id?: number;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Post: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * |Value|Description |
       * |:-|:-|
       * |`app_only`|Private to the app that owns the field|
       * |`read`|Visible to other API consumers|
       * |`write`|Open for reading and writing by other API consumers|
       * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
       * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** @description Allows app partners to write custom data to various resources in the API. */
    Metafield: components["schemas"]["MetafieldBase"] & {
      /** @description The unique identifier for the metafields. */
      id?: number;
      /**
       * Format: date-time
       * @description Date and time of the metafield ºs creation.
       *
       * @example 2022-06-16T18:39:00+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       *
       * @example 2022-06-16T18:39:00+00:00
       */
      date_modified?: string;
      /**
       * @description Client ID for the metafield ºs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    };
    /** @description The model for a PUT to update metafield. */
    MetafieldPut: components["schemas"]["MetafieldBase_Post"];
    /**
     * GlobalOrderSettings
     * @example {
     *   "$ref": "components[\"examples\"][\"EnableMultipleOrderNotifications\"][\"value\"]"
     * }
     */
    GlobalOrderSettings: {
      /** @description Global notification settings. */
      notifications?: {
        /** @description Global order notification settings. */
        order_placed?: {
          /** @description Email addresses order notifications will be sent to. Empty array disables order notifications. Not nullable. */
          email_addresses?: string[];
        };
        /** @description Global order invoice forward settings. */
        forward_invoice?: {
          /** @description Email addresses order invoices will be forwarded to. Empty array disables forwarding order invoices. Not nullable. */
          email_addresses?: string[];
        };
      };
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_DELETE: {
      /**
       * @example [
       *   123
       * ]
       */
      data?: number[];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionDeleteResponseSuccess: {
      /**
       * @example [
       *   123,
       *   124,
       *   125
       * ]
       */
      data?: number[];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionPartialSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 1
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 2
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 3
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 0
       */
      failed?: number;
    };
    /**
     * @description Total number of items in the result set.
     *
     * @example 3
     */
    Total: number;
    /**
     * @description Total number of items that were successfully deleted.
     *
     * @example 1
     */
    Success: number;
    /**
     * @description Total number of items that failed to be deleted.
     *
     * @example 2
     */
    Failed: number;
    /** @description Error response payload for the BigCommerce API. */
    Error: {
      /**
       * @description The HTTP status code for the error.
       *
       * @example 422
       */
      status?: number;
      /**
       * @description The error title.
       *
       * @example Bulk operation has failed
       */
      title?: string;
      /**
       * @description The error type.
       *
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      errors?: components["schemas"]["ErrorDetail"];
    };
    /**
     * @description Error detail response payload for the BigCommerce API.
     *
     * @example {
     *   "1": "Unauthorized to delete",
     *   "2": "Metafield does not exist"
     * }
     */
    ErrorDetail: {
      [key: string]: unknown;
    };
    /** @description The model for a POST to create metafield. */
    MetafieldPost_Batch: components["schemas"]["MetafieldBase_Post"] & {
      /**
       * @description The ID for the resource with which the metafield is associated.
       *
       * @example 42
       */
      resource_id: number;
    };
    /** @description The model for a PUT to create metafield. */
    MetafieldPut_Batch: components["schemas"]["MetafieldBase_Post"] & {
      /**
       * @description The ID of metafield to update.
       *
       * @example 42
       */
      id: number;
      /**
       * @description The ID for the resource with which the metafield is associated.
       *
       * @example 42
       */
      resource_id?: number;
    };
    /** ChannelOrderSettings */
    ChannelOrderSettings: {
      /** @description Channel notification settings. */
      notifications?: {
        /** @description Channel order notification settings. */
        order_placed?: {
          /** @description Email addresses channel order notifications will be sent to. If null will fall back to global value. Empty array disables order notifications for channel. */
          email_addresses?: string[] | null;
        };
        /** @description Channel order invoice forward settings. */
        forward_invoice?: {
          /** @description Email addresses channel order invoices will be forwarded to. If null will fall back to global value. Empty array disables forwarding order invoices for channel. */
          email_addresses?: string[] | null;
        };
      };
    };
    ErrorResponse400: {
      schema?: components["schemas"]["betaErrorResponse"];
    };
    ErrorResponse404: {
      schema?: components["schemas"]["betaErrorResponse"];
    };
    ErrorResponse422: {
      schema?: components["schemas"]["betaErrorResponse"];
    };
    betaErrorResponse: components["schemas"]["BaseError"] & {
      errors?: {
        [key: string]: unknown;
      };
    };
    /** @description Error payload for the BigCommerce API. */
    BaseError: {
      /** @description The HTTP status code. */
      status?: number;
      /** @description The error title describing the particular error. */
      title?: string;
      type?: string;
    };
  };
  responses: {
    Return_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["Return_Full"];
          meta?: {
            pagination?: components["schemas"]["Pagination"];
          };
        };
      };
    };
    ReturnStatus_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["UpdateReturnStatuses"];
          errors?: components["schemas"]["Problem"][];
          meta?: components["schemas"]["BatchOperationMeta"];
        };
      };
    };
    OrderReturnableItems_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["GetReturnableItems"];
        };
      };
    };
    CreateReturn_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["CreateReturn"];
        };
      };
    };
    ReceivedItems_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["ReceivedItems_Base"];
          errors?: components["schemas"]["Problem"][];
          meta?: components["schemas"]["BatchOperationMeta"];
        };
      };
    };
    ReviewedItems_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["ReviewedItems_Base"];
          errors?: components["schemas"]["Problem"][];
          meta?: components["schemas"]["BatchOperationMeta"];
        };
      };
    };
    StoreReturnSettings_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["GetReturnsSettings"];
        };
      };
    };
    /** @description If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail. */
    "502_GatewayError": {
      content: {
        "application/json": components["schemas"]["error_Base"];
      };
    };
    /** @description If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; however, if you cannot successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down, and you will need to complete the request again when it is back up (in several hours, usually). */
    "504_GatewayTimeout": {
      content: {
        "application/json": components["schemas"]["errorDetailed_Full"];
      };
    };
    "403_Unauthorized": {
      content: {
        "application/json": components["schemas"]["error_Base"];
      };
    };
    /**
     * @description Malformed request syntax. Typically need to fix the JSON.
     * Body to resend successfully.
     */
    "400_BadRequest": {
      content: {
        "application/json": components["schemas"]["error_Base"];
      };
    };
    /** @description The resource was not found. */
    "404_NotFound": {
      content: {
        "application/json": components["schemas"]["error_Base"];
      };
    };
    /** @description This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object. */
    "422_UnprocessableEntity": {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description If this occurs, you should retry the request. If you cannot successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down, and you will need to make the request again when it is back up (in several hours, usually). */
    "503_ServiceUnavailable": {
      content: {
        "application/json": components["schemas"]["error_Base"];
      };
    };
    paymentActionsCapture_Resp: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    paymentActionsVoid_Resp: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    /** @description Request acknowledged. */
    "201_Acknowledged": {
      content: {
        "application/json": Record<string, never>;
      };
    };
    /** @description Resource Created. */
    "201_Created": {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    RefundCollection_Resp: {
      content: {
        "application/json": {
          /** @description Collection of Refunds */
          data?: components["schemas"]["Refund"][];
          meta?: components["schemas"]["metaEmpty_Full"];
        };
      };
    };
    refundsBATCH_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["Refund"][];
          errors?: components["schemas"]["FailedQuoteError"][];
          meta?: components["schemas"]["MetaRefund"];
        };
      };
    };
    RefundQuote_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["RefundQuote_Full"];
          meta?: components["schemas"]["metaEmpty_Full"];
        };
      };
    };
    Refund_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["Refund"];
          meta?: components["schemas"]["metaEmpty_Full"];
        };
      };
    };
    /** @description Response payload for the BigCommerce Order Transactions API. */
    TransactionCollection_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["Transaction"][];
          meta?: components["schemas"]["metaCollection_Full"];
        };
      };
    };
    /** @description Response payload for the BigCommerce Order Transactions API single transaction. */
    Transaction_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["Transaction_Post"] & {
            /** @description Unique identifier for the transaction. */
            id?: number;
            /** @description Identifier for the BigCommerce Order with which this transaction is associated. */
            order_id?: string;
            /**
             * Format: date-time
             * @description The datetime of the transaction.
             */
            date_created?: string;
            /** @description This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment. */
            payment_instrument_token?: string;
            avs_result?: components["schemas"]["AVSResult"];
            cvv_result?: components["schemas"]["CVVResult"];
            credit_card?: components["schemas"]["CreditCard"];
            gift_certificate?: components["schemas"]["GiftCertificate"];
            store_credit?: components["schemas"]["StoreCredit"];
          };
          meta?: components["schemas"]["metaEmpty_Full"];
        };
      };
    };
    RefundQuotesBATCH_Resp: {
      content: {
        "application/json": {
          data?: components["schemas"]["RefundQuote_Full"][];
          errors?: components["schemas"]["FailedQuoteError"][];
          meta?: components["schemas"]["Meta"];
        };
      };
    };
    RefundID_Response: {
      content: {
        "application/json": components["schemas"]["RefundID_Get"];
      };
    };
  };
  parameters: {
    /** @description The ID of the `Order` to which the transactions belong. */
    OrderIdParam: number;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam?: number;
    /** @description Filter items by minimum datevcreated. For example, `date_created:min=2019-09-04T00:00:00` or `date_created:min=2019-09-04`. Returns metafields created after this date. */
    date_created_min?: string;
    /** @description Filter items by maximum date created. For example, `date_created:max=2019-09-04T00:00:00` or `date_created:max=2019-09-04`. Returns metafields created before this date. */
    date_created_max?: string;
    /** @description Filter items by date created. For example, `date_created=2019-09-04T00:00:00`. Returns metafields created on this date. */
    date_created?: string;
    /** @description Filter items by minimum date modified. For example, `date_modified:min=2019-09-04T00:00:00` or `date_modified:min=2019-09-04`. Returns metafields modified after this date. */
    date_modified_min?: string;
    /** @description Filter items by maximum date modified. For example, `date_modified:max=2019-09-04T00:00:00` or `date_modified:max=2019-09-04`. Returns metafields modified before this date. */
    date_modified_max?: string;
    /** @description Filter items by date modified. For example, `date_modified=2019-09-04T00:00:00`. Returns metafields modified on this date. */
    date_modified?: string;
    /** @description The ID of the `Metafield`. */
    MetafieldIdParam: number;
    /** @description Filter based on a metafield ºs key. */
    MetafieldKeyParam?: string;
    /** @description Filter using a comma-separated list of metafield keys. Could be used with vanilla `key` query parameter. */
    MetafieldKeyInParam?: string[];
    /** @description Filter based on a metafield ºs key. */
    MetafieldNamespaceParam?: string;
    /** @description Filter using a comma-separated list of metafield namespaces. Can be used with vanilla `namespace` query parameter. */
    MetafieldNamespaceInParam?: string[];
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam?: "asc" | "desc";
    /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
    IncludeFieldsParamMetafields?: ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Capture order payment
   * @description Capture the payment for an order. When there are no payment method validation issues, the capture process is successful, the `payment_status` updates to `capture pending`, and the payment request is scheduled. The payment request itself occurs asynchronously.
   * Requires at least one of the following scopes:
   * * `store_v2_orders`
   * * `store_v2_transactions`
   */
  captureOrderPayment: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
    responses: {
      201: components["responses"]["201_Created"];
      400: components["responses"]["400_BadRequest"];
      404: components["responses"]["404_NotFound"];
      422: components["responses"]["422_UnprocessableEntity"];
      502: components["responses"]["502_GatewayError"];
      503: components["responses"]["503_ServiceUnavailable"];
      504: components["responses"]["504_GatewayTimeout"];
    };
  };
  /**
   * Void
   * @description Void the payment for an order. When there are no payment method validation issues, the void process is successful, the `payment_status` updates to `void pending`, and the void payment request is scheduled. The payment request itself occurs asynchronously.
   *
   * Requires at least one of the following scopes:
   * * `store_v2_orders`
   * * `store_v2_transactions`
   */
  voidOrderPayment: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
    responses: {
      201: components["responses"]["201_Created"];
      400: components["responses"]["400_BadRequest"];
      404: components["responses"]["404_NotFound"];
      422: components["responses"]["422_UnprocessableEntity"];
      502: components["responses"]["502_GatewayError"];
      503: components["responses"]["503_ServiceUnavailable"];
      504: components["responses"]["504_GatewayTimeout"];
    };
  };
  /**
   * Get Transactions
   * @description Returns an **order ºs** transactions.
   *
   * **Usage Notes**
   * * Depending on the payment method, different information will be available (not all payment gateways return full card or fraud detail).
   *
   *
   * Requires at least one of the following scopes:
   * * `store_v2_transactions_read_only`
   * * `store_v2_transactions`
   */
  getOrderTransactions: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
    responses: {
      200: components["responses"]["TransactionCollection_Resp"];
      /** @description No content found to fulfill request. */
      204: {
        content: {
          "application/json": {
            /** @description 204 HTTP status code. */
            status?: number;
            /** @description The error title describing the situation. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": {
            /** @description 404 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
          };
        };
      };
      /** @description Service Unavailable. */
      503: {
        content: {
          "application/json": {
            /** @description 503 HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
          };
        };
      };
    };
  };
  /**
   * Create a Refund Quote
   * @description Calculate the tax amount, total refund amount and get available payment options for an order refund by providing items and costs or quantities to refund.
   *
   * Requires at least one of the following scopes:
   * * `store_v2_orders`
   * * `store_v2_transactions`
   *
   * **Notes:**
   * * Create a refund quote before performing a refund request to best avoid a `422` error. Check the refund quote's response body for the `refund_methods` array. The `amount` given in the array must match the `amount` used in the refund request body.
   * * Order refunds should be processed sequentially. Processing multiple concurrent refunds on the same order is not yet supported.
   */
  createOrderRefundQuotes: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefundQuote_Post"];
        "application/xml": components["schemas"]["RefundQuote_Post"];
        "multipart/form-data": components["schemas"]["RefundQuote_Post"];
      };
    };
    responses: {
      201: components["responses"]["RefundQuote_Resp"];
      422: components["responses"]["422_UnprocessableEntity"];
    };
  };
  /**
   * Get Refunds for Order
   * @description Returns a list of refunds ordered by refund ID in ascending order for the given order.
   *
   * Requires at least one of the following scopes:
   * * `store_v2_transactions_read_only`
   * * `store_v2_transactions`
   * * `store_v2_orders_read_only`
   * * `store_v2_orders`
   */
  getOrderRefunds: {
    parameters: {
      query?: {
        /** @description Filters by refund payment using the BigCommerce `transaction_id`. */
        transaction_id?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
    responses: {
      200: components["responses"]["RefundCollection_Resp"];
    };
  };
  /**
   * Create a Refund
   * @description Creates a refund. When there are no payment method validation issues, the refund process is successful and the refund payment request is scheduled. The payment request itself occurs asynchronously.
   *
   * Requires at least one of the following scopes:
   * * `store_v2_orders`
   * * `store_v2_transactions`
   *
   * **Note:**
   * Order refunds should be processed sequentially. Processing multiple concurrent refunds on the same order are not yet supported.
   */
  createOrderRefund: {
    parameters: {
      query?: {
        /** @description Filters by refund payment using the BigCommerce `transaction_id`. */
        transaction_id?: string;
      };
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefundRequest_Post"];
      };
    };
    responses: {
      201: components["responses"]["Refund_Resp"];
      /** @description Unable to process a guest refund with store credit. */
      422: {
        content: {
          "application/json": {
            data?: components["schemas"]["ErrorResponse"][];
          };
        };
      };
      /** @description Service Unavailable */
      503: {
        content: {
          "application/json": {
            data?: components["schemas"]["FailedQuoteError"][];
            meta?: components["schemas"]["Meta"];
          };
        };
      };
    };
  };
  /**
   * Get a Refund
   * @description Returns a refund by refund ID.
   */
  getOrderRefund: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description Refund ID. */
        refund_id: number;
      };
    };
    responses: {
      200: components["responses"]["RefundID_Response"];
    };
  };
  /**
   * Get All Refunds
   * @description Returns a list of refunds ordered by refund ID in ascending order.
   *
   * Requires at least one of the following scopes:
   * * `store_v2_transactions_read_only`
   * * `store_v2_transactions`
   * * `store_v2_orders_read_only`
   * * `store_v2_orders`
   */
  getOrdersRefunds: {
    parameters: {
      query?: {
        /** @description Pass a comma-separated list of order IDs to filter the included orders. Accepts multiple values. */
        "order_id:in"?: number[];
        /** @description Pass a comma-separated list of refund IDs to filter the included refunds. Accepts multiple values. */
        "id:in"?: number[];
        /**
         * @description Filter results so they are later than or equal to provided date.
         *
         *
         * Must be in url-encoded RFC 3339 format.
         * e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.
         * Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00`
         */
        "created:min"?: string;
        /**
         * @description Filter results so they are earlier than or equal to provided date.
         *
         * Must be in url-encoded RFC 3339 format.
         * e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.
         * Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00`
         */
        "created:max"?: string;
        /** @description Filters by refund payment using the BigCommerce `transaction_id`. */
        transaction_id?: string;
        /** @description Specifies the page number in a limited (paginated) list of items. */
        page?: number;
        /** @description Controls the number of items per page in a limited (paginated) list of items. */
        limit?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: components["responses"]["RefundCollection_Resp"];
    };
  };
  /**
   * Get Order Metafields
   * @description Gets a `Metafield` object list, by `order_id`.
   *
   * The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.
   */
  getOrderMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        direction?: components["parameters"]["DirectionParam"];
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
    responses: {
      /** @description An array of metafields and metadata. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
    };
  };
  /**
   * Create Metafields
   * @description Creates an order `Metafield`.
   *
   * The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.
   */
  createOrderMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
      };
    };
    /** @description A `Metafield` object. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "permission_set": "app_only",
         *   "namespace": "Sales Department",
         *   "key": "Staff Name",
         *   "value": "Sam",
         *   "description": "Name of staff member"
         * }
         */
        "application/json": components["schemas"]["MetafieldBase_Post"];
      };
    };
    responses: {
      /** @description A `Metafield` object. */
      200: {
        content: {
          "application/json": components["schemas"]["MetafieldResponse"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description The metafield conflicts with another metafield. This can result from duplicate unique key combinations of the app ºs client ID, namespace, key, resource type, and resource ID. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description The `Metafield` is not valid. This is the result of missing required fields or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a Metafield
   * @description Gets a `Metafield`, by `order_id`.
   */
  getOrderMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
        /** @description The ID of the `Metafield`. */
        metafield_id: number;
      };
    };
    responses: {
      /** @description A `Metafield` object. */
      200: {
        content: {
          "application/json": components["schemas"]["MetafieldResponse"];
        };
      };
      /** @description A metafield was not found with this query. */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /**
   * Update a Metafield
   * @description Updates a `Metafield` object.
   *
   * The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.
   */
  updateOrderMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
        /** @description The ID of the `Metafield`. */
        metafield_id: number;
      };
    };
    /** @description A `Metafield` object. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MetafieldPut"];
      };
    };
    responses: {
      /** @description A metafield and metadata. */
      200: {
        content: {
          "application/json": components["schemas"]["MetafieldResponse"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description A metafield was not found with this query. */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /**
   * Delete a Metafield
   * @description Deletes a `Metafield`.
   */
  deleteOrderMetafield: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        order_id: components["parameters"]["OrderIdParam"];
        /** @description The ID of the `Metafield`. */
        metafield_id: number;
      };
    };
    responses: {
      /** @description An empty response. */
      204: {
        content: never;
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /**
   * Get Global Order Settings
   * @description Returns global order settings.
   */
  getGlobalOrderSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GlobalOrderSettings"] & {
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad request. Authentication Required. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse400"];
        };
      };
    };
  };
  /**
   * Update Global Order Settings
   * @description Updates global order settings.
   */
  updateGlobalOrderSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["GlobalOrderSettings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GlobalOrderSettings"] & {
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad request. Authentication Required. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse400"];
        };
      };
      /** @description Order settings data is not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse422"];
        };
      };
    };
  };
  /**
   * Get Channel Order Settings
   * @description Returns order settings for a specific channel.
   */
  getChannelOrderSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
      path: {
        /** @description Channel ID */
        channel_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChannelOrderSettings"] & {
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad request. Authentication Required. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse400"];
        };
      };
    };
  };
  /**
   * Update Channel Order Settings
   * @description Updates order settings for a specific channel.
   *
   *  **Note:** You must override both notifications `email_addresses` or neither, i.e. either both notification `email_addresses` are an array of valid email addresses, or both `email_addresses` must be null. You may not have one set to an array of addresses and the other set to `null`.
   */
  updateChannelOrderSettings: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
      path: {
        /** @description Channel ID */
        channel_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ChannelOrderSettings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChannelOrderSettings"] & {
            meta?: components["schemas"]["metaEmpty_Full"];
          };
        };
      };
      /** @description Bad request. Authentication Required. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse400"];
        };
      };
      /** @description Order settings data is not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse422"];
        };
      };
    };
  };
  /**
   * Get All Order Metafields
   * @description Get all order metafields.
   */
  getOrdersMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        "key:in"?: components["parameters"]["MetafieldKeyInParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
        direction?: components["parameters"]["DirectionParam"];
        include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
        date_created?: components["parameters"]["date_created"];
        date_modified?: components["parameters"]["date_modified"];
        "date_created:min"?: components["parameters"]["date_created_min"];
        "date_created:max"?: components["parameters"]["date_created_max"];
        "date_modified:min"?: components["parameters"]["date_modified_min"];
        "date_modified:max"?: components["parameters"]["date_modified_max"];
      };
    };
    responses: {
      /** @description List of `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
    };
  };
  /**
   * Update multiple Metafields
   * @description Update multiple metafields.
   */
  updateOrdersMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            id: number;
          })[];
      };
    };
    responses: {
      /** @description List of updated `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Create multiple Metafields
   * @description Create multiple metafields.
   */
  createOrdersMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID for the order with which the metafield is associated.
             *
             * @example 42
             */
            resource_id: number;
          })[];
      };
    };
    responses: {
      /** @description List of created `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Delete Multiple Metafields
   * @description Delete all order metafields.
   */
  deleteOrdersMetafields: {
    /** @description List of metafield IDs. */
    requestBody?: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Response object for metafields deletion with success. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields deletion with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
        };
      };
    };
  };
}
