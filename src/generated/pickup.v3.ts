// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/orders/pickups": {
    /**
     * Get Pickups
     * @description Retrieves a list of pickups.
     *
     * ## Examples
     *
     * You can filter the list to return pickup objects specific to a list of requested pickup or order IDs.
     * This is achieved by appending the query string `?order_id:in=100,103,202` or `pickup_id:in=1,4` to the
     * resource `/orders/pickups`.
     *
     * ```http
     * GET /orders/pickups?order_id:in=100,300,500
     * ```
     * or
     * ```http
     * GET /orders/pickups?pickup_id:in=7,13,17
     * ```
     */
    get: operations["get-pickup"];
    /**
     * Update Pickups
     * @description Update pickups by providing `pickup_id`, `collected_at`, and `ready_at` in the input.
     */
    put: operations["put-pickup"];
    /**
     * Create Pickups
     * @description Creates one or many pickups.
     *
     * This is a batch operation that can create up to 100 pickup objects in one request.
     *
     * ## Limits
     * * Limit of creating 100 pickup objects per `POST` request.
     */
    post: operations["post-pickup"];
    /**
     * Delete Pickups
     * @description Delete pickups by providing a list of `pickup_id`s.
     *
     * ## Examples
     * You can use the list of `pickup_ids` to delete the pickup items. This is achieved by appending the query string **?id:in=1,2,3** to the resource **\/pickup**.
     *
     * ```http
     * DELETE /pickup?id:in=1,2,3
     * ```
     */
    delete: operations["delete-pickup"];
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BasePickup: {
      /**
       * @description ID of pickup method.
       * @example 2
       */
      pickup_method_id?: number;
      /**
       * @description ID of order.
       * @example 103
       */
      order_id?: number;
    };
    Pickup: {
      /**
       * @description The ID of pickup.
       * @example 1
       */
      id?: number;
    } & components["schemas"]["BasePickup"] & {
      /**
       * Format: date-time
       * @description Datetime when pickup was ready for collection.
       * @example 2022-08-15T09:30:44Z
       */
      ready_at?: string;
      /**
       * Format: date-time
       * @description Datetime when pickup was created.
       * @example 2022-08-12T04:15:19.150539Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Datetime when pickup was updated.
       * @example 2022-08-12T04:15:19.150539Z
       */
      updated_at?: string;
      pickup_items?: components["schemas"]["PickupItem"][];
    };
    BasePickupItem: {
      /**
       * @description The ID of the product.
       * @example 4
       */
      order_product_id?: number;
      /**
       * @description The quantity of an item.
       * @example 5
       */
      quantity?: number;
    };
    PickupItem: {
      /**
       * @description The ID of pickup.
       * @example 3
       */
      id?: number;
    } & components["schemas"]["BasePickupItem"] & ({
      /**
       * @description The status of the pickup.
       * @example COLLECTED
       * @enum {string}
       */
      status?: "AWAITING_COLLECTION" | "COLLECTED";
      /**
       * Format: date-time
       * @description Date and time when the pickup was collected.
       * @example 2022-08-12T04:15:19.150539Z
       */
      collected_at?: string | null;
    });
    PostRequestPickup: components["schemas"]["BasePickup"] & {
      /**
       * @description Can be provided as two inputs.
       * Unix: Represents the time in seconds that has elapsed since Unix epoch (00:00:00 UTC on 1 January 1970)
       * ISO-8601: Represents the time in ISO format.
       *
       * @example '1660555844' or '2022-06-11T00:00:20Z'
       */
      ready_at: string;
      /**
       * @description Can be provided as two inputs.
       * Unix: Represents the time in seconds that has elapsed since Unix epoch (00:00:00 UTC on 1 January 1970).
       * ISO-8601: Represents the time in ISO format.
       * If this value is not supplied, the pickup item collected_at property will be null.
       *
       * @example '1660831392' or '2022-06-18T00:00:30Z'
       */
      collected_at?: string;
      pickup_items: components["schemas"]["PostRequestPickupItem"][];
    };
    PostRequestPickupItem: {
      /**
       * @description The ID of the product.
       * @example 4
       */
      order_product_id: number;
      /**
       * @description The quantity of an item.
       * @example 5
       */
      quantity: number;
    };
    PutRequestPickup: {
      /**
       * @deprecated
       * @example 2
       */
      id: number;
      /**
       * @description The ID of pickup.
       * @example 2
       */
      pickup_id: number;
      /**
       * @description Can be provided as two inputs.
       * Unix: Represents the time in seconds that has elapsed since Unix epoch (00:00:00 UTC on 1 January 1970)
       * ISO-8601: Represents the time in ISO format.
       *
       * @example '1660555844' or '2022-06-11T00:00:20Z'
       */
      ready_at?: string;
      /**
       * @description Can be provided as two inputs.
       * Unix: Represents the time in seconds that has elapsed since Unix epoch (00:00:00 UTC on 1 January 1970).
       * ISO-8601: Represents the time in ISO format.
       * If this value is not supplied, the pickup item collected_at property will be null.
       *
       * @example '1660831392' or '2022-06-18T00:00:30Z'
       */
      collected_at?: string;
    };
    ErrorResponse: {
      /**
       * @description The HTTP status code generated by the origin server for this occurrence of the problem.
       * @example 422
       */
      status?: number;
      /**
       * @description Human readable error message.
       * @example JSON data is missing or invalid
       */
      title?: string;
      /** @description URL identifying the error type. Dereferencing the URL leads to documentation about the error type. */
      type?: string;
      /** @description Detailed summary describing the particular error. */
      errors?: {
        [key: string]: unknown;
      };
    };
  };
  responses: never;
  parameters: {
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept: string;
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
    ContentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Pickups
   * @description Retrieves a list of pickups.
   *
   * ## Examples
   *
   * You can filter the list to return pickup objects specific to a list of requested pickup or order IDs.
   * This is achieved by appending the query string `?order_id:in=100,103,202` or `pickup_id:in=1,4` to the
   * resource `/orders/pickups`.
   *
   * ```http
   * GET /orders/pickups?order_id:in=100,300,500
   * ```
   * or
   * ```http
   * GET /orders/pickups?pickup_id:in=7,13,17
   * ```
   */
  "get-pickup": {
    parameters: {
      query?: {
        /** @description Comma separated list of order IDs. */
        "order_id:in"?: number;
        /** @description Comma separated list of pickup IDs. */
        "pickup_id:in"?: number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description The request has been processed and a list of pickups has been returned successfully. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Pickup"][];
          };
        };
      };
    };
  };
  /**
   * Update Pickups
   * @description Update pickups by providing `pickup_id`, `collected_at`, and `ready_at` in the input.
   */
  "put-pickup": {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PutRequestPickup"][];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Pickup"][];
            meta?: {
              [key: string]: unknown;
            };
          };
        };
      };
      /** @description Incorrect entity. Locations were not valid. This results from missing required fields, invalid data, or partial error. See the response for more details. */
      422: {
        content: {
          "application/problem+json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Pickups
   * @description Creates one or many pickups.
   *
   * This is a batch operation that can create up to 100 pickup objects in one request.
   *
   * ## Limits
   * * Limit of creating 100 pickup objects per `POST` request.
   */
  "post-pickup": {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Type": components["parameters"]["ContentType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostRequestPickup"][];
      };
    };
    responses: {
      /** @description The request has been successfully processed. */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Pickup"][];
            meta?: {
              [key: string]: unknown;
            };
          };
        };
      };
      /** @description Incorrect entity. Locations were not valid. This results from missing required fields, invalid data, or partial error. See the response for more details. */
      422: {
        content: {
          "application/problem+json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Pickups
   * @description Delete pickups by providing a list of `pickup_id`s.
   *
   * ## Examples
   * You can use the list of `pickup_ids` to delete the pickup items. This is achieved by appending the query string **?id:in=1,2,3** to the resource **\/pickup**.
   *
   * ```http
   * DELETE /pickup?id:in=1,2,3
   * ```
   */
  "delete-pickup": {
    parameters: {
      query: {
        /** @description Comma separated list of pickup IDs. */
        "id:in": number;
      };
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
}
