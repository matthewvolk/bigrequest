// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/store": {
    /**
     * Get Store Information
     * @description Returns metadata about the global settings for a store. Some of these values are independently configurable on a per-storefront or per-channel basis. For channel overrides, see [Store Settings](/docs/rest-management/settings).
     */
    get: operations["getStoreInformation"];
  };
  "/store/metafields": {
    /**
     * Get All Store Metafields
     * @description Gets all store `metafields`.
     */
    get: operations["getStoreMetafields"];
    /**
     * Update multiple metafields
     * @description Update multiple metafields.
     */
    put: operations["updateStoreMetafields"];
    /**
     * Create multiple Metafields
     * @description Create multiple `metafields`.
     */
    post: operations["createStoresMetafields"];
    /**
     * Delete multiple metafields
     * @description Delete all store metafields.
     */
    delete: operations["deleteStoreMetafields"];
  };
  "/store/metafields/{metafieldId}": {
    /**
     * Get a Store Metafield
     * @description Gets a store `metafield`.
     */
    get: operations["getStoreMetafield"];
    /**
     * Update a Store Metafield
     * @description Update a store `Metafield`.
     */
    put: operations["updateStoreMetafield"];
    /**
     * Delete a Metafield
     * @description Deletes a store `Metafield`.
     */
    delete: operations["deleteStoreMetafield"];
    parameters: {
      header?: {
        Accept?: components["parameters"]["Accept"];
      };
      path: {
        metafieldId: components["parameters"]["MetafieldIdParam"];
      };
    };
  };
  "/time": {
    /**
     * Get System Timestamp
     * @description Returns the system timestamp at the time of the request. The time resource is useful for validating API authentication details and testing client connections.
     */
    get: operations["getSystemTimestamp"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Not Found
     * @description Error payload for the BigCommerce API.
     */
    NotFound: {
      /**
       * @description 404 HTTP status code.
       *
       * @example 404
       */
      status?: number;
      /**
       * @description The error title describing the particular error.
       * @example The resource at that URL is not found.
       */
      title?: string;
      /** @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes */
      type?: string;
    };
    ErrorResponse: {
      status?: number;
      title?: string;
      type?: string;
      instance?: string;
      errors?: Record<string, never>;
    };
    /** @description Response payload for the BigCommerce API. */
    MetafieldResponse: {
      data?: components["schemas"]["Metafield"];
      meta?: components["schemas"]["metaCollection_open"];
    };
    /** @description Allows app partners to write custom data to various resources in the API. */
    Metafield: components["schemas"]["MetafieldBase"] & {
      /** @description The unique identifier for the metafield. */
      id?: string;
      /**
       * Format: date-time
       * @description Date and time of the metafieldʼs creation.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_created?: string;
      /**
       * Format: date-time
       * @description Date and time when the metafield was last updated.
       * @example 2022-06-16T18:39:00+00:00
       */
      date_modified?: string;
      /**
       * @description Client ID for the metafieldʼs creator.
       * @example asdfasdfasdfasdfasdfasdfasdf
       */
      owner_client_id?: string;
    };
    /** @description Common Metafield properties. */
    MetafieldBase: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace?: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key?: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value?: string;
      /**
       * @description Description for the metafields.
       *
       * @example order
       */
      description?: string;
      /**
       * @description The type of resource with which the metafield is associated.
       *
       * @example store
       * @enum {string}
       */
      resource_type?: "brand" | "product" | "variant" | "category" | "cart" | "store";
      /**
       * @description The unique identifier for the resource with which the metafield is associated.
       *
       * @example 0
       */
      resource_id?: string;
    };
    /** @description Common Metafield properties. */
    MetafieldBase_Post_Put: {
      /**
       * @description Determines the visibility and writeability of the field by other API consumers.
       *
       * | Value | Description |
       * | :--- | :--- |
       * | `app_only` | Private to the app that owns the field. |
       * | `read` | Visible to other API consumers. |
       * | `write` | Open for reading and writing by other API consumers. |
       * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
       * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
       *
       * @enum {string}
       */
      permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
      /**
       * @description Namespace for the metafield, for organizational purposes.
       *
       * @example Sales Department
       */
      namespace: string;
      /**
       * @description The name of the field, for example: `location_id`, `color`.
       *
       * @example Staff Name
       */
      key: string;
      /**
       * @description The value of the field, for example: `1`, `blue`.
       *
       * @example Ronaldo
       */
      value: string;
      /**
       * @description Description for the metafields.
       *
       * @example Name of Staff Member
       */
      description?: string;
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse: {
      data?: components["schemas"]["Metafield"];
      meta?: components["schemas"]["metaCollection_open"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_Batch: {
      data?: components["schemas"]["Metafield"][];
      meta?: components["schemas"]["CollectionMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponse_Batch_POST_PUT: {
      data?: components["schemas"]["Metafield"][];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionDeleteResponseSuccess: {
      /**
       * @example [
       *   123,
       *   124,
       *   125
       * ]
       */
      data?: number[];
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      errors?: unknown[];
      meta?: components["schemas"]["WriteCollectionSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
      /**
       * @description Empty for 200 responses.
       * @example []
       */
      data?: components["schemas"]["Metafield"][];
      errors?: components["schemas"]["Error"];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Response payload for the BigCommerce API. */
    MetaFieldCollectionResponsePartialSuccess_DELETE: {
      /**
       * @example [
       *   123
       * ]
       */
      data?: number[];
      errors?: components["schemas"]["Error"][];
      meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
    };
    /** @description Error response payload for the BigCommerce API. */
    Error: {
      /**
       * @description The HTTP status code for the error.
       *
       * @example 422
       */
      status?: number;
      /**
       * @description The error title.
       *
       * @example Bulk operation has failed
       */
      title?: string;
      /**
       * @description The error type.
       *
       * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
       */
      type?: string;
      errors?: components["schemas"]["ErrorDetail"];
    };
    /**
     * @description Error detail response payload for the BigCommerce API.
     *
     * @example {
     *   "0": "Entity already exists",
     *   "1": "Unauthorized to delete",
     *   "2": "Metafield does not exist"
     * }
     */
    ErrorDetail: {
      [key: string]: unknown;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 3
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 0
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Additional data about the response.
     */
    WriteCollectionPartialSuccessMeta: {
      /**
       * @description Total number of items in the result set.
       *
       * @example 3
       */
      total?: number;
      /**
       * @description Total number of items that were successfully deleted.
       *
       * @example 1
       */
      success?: number;
      /**
       * @description Total number of items that failed to be deleted.
       *
       * @example 2
       */
      failed?: number;
    };
    /**
     * Collection Meta
     * @description Data about the response, including pagination and collection totals.
     */
    CollectionMeta: {
      /**
       * Pagination
       * @description Data about the response, including pagination and collection totals.
       */
      pagination?: {
        /**
         * @description Total number of items in the result set.
         *
         * @example 36
         */
        total?: number;
        /**
         * @description Total number of items in the collection response.
         *
         * @example 36
         */
        count?: number;
        /**
         * @description The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         * @example 50
         */
        per_page?: number;
        /**
         * @description The page you are currently on within the collection.
         *
         * @example 1
         */
        current_page?: number;
        /**
         * @description The total number of pages in the collection.
         *
         * @example 1
         */
        total_pages?: number;
        /** @description Pagination links for the previous and next parts of the whole collection. */
        links?: {
          /** @description Link to the previous page returned in the response. */
          previous?: string;
          /**
           * @description Link to the current page returned in the response.
           *
           * @example ?page=1&limit=50
           */
          current?: string;
          /** @description Link to the next page returned in the response. */
          next?: string;
        };
      };
      [key: string]: unknown;
    };
    /**
     * Response meta
     * @description Response metadata.
     */
    metaCollection_open: Record<string, never>;
    /** Store Information */
    StoreInformation: {
      /**
       * @description The store hash, a unique store identifier.
       * @example store_hash
       */
      id?: string;
      /**
       * Format: uuid
       * @description The UUID of the account to which the store belongs.
       */
      account_uuid?: string;
      /**
       * @description Primary domain name.
       * @example your-store-url.com
       */
      domain?: string;
      /**
       * @description Store’s current HTTPS URL.
       * @example https://your-store-url.com
       */
      secure_url?: string;
      /**
       * @description The secure hostname of the control panel.
       * @example https://store-abc123.mybigcommerce.com
       */
      control_panel_base_url?: string;
      /**
       * @description The status of the store.
       * @example live
       */
      status?: string;
      /**
       * @description Store’s name.
       * @example BigCommerce
       */
      name?: string;
      /**
       * @description Primary contact’s first name (as defined during the store sign-up process).
       * @example Jane
       */
      first_name?: string;
      /**
       * @description Primary contact’s last name (as defined during the store sign-up process).
       * @example Doe
       */
      last_name?: string;
      /**
       * @description Display address.
       * @example BigCommerce
       */
      address?: string;
      /**
       * @description Country where the store is located (as defined during the store sign-up process).
       * @example United States
       */
      country?: string;
      /**
       * @description Two-letter ISO 3166-1 country code
       * @example AU
       */
      country_code?: string;
      /**
       * @description The infrastructure region where the store is located. Use this to determine where to place supporting infrastructure for minimum latency to the store. Compare against GCP regions on https://cloud.google.com/compute/docs/regions-zones
       * @example us-central1
       */
      infrastructure_region?: string;
      /** @description Display phone number. */
      phone?: string;
      /**
       * @description Email address of the store administrator/owner.
       * @example janedoes@example.com
       */
      admin_email?: string;
      /**
       * @description Email address for orders and fulfillment.
       * @example orders@example.com
       */
      order_email?: string;
      /** @description The URL of the favicon image associated with the website. This should be a valid URL pointing to an `.ico` or other supported icon format file. */
      favicon_url?: string;
      timezone?: components["schemas"]["Timezone"];
      /**
       * @description Default language code.
       * @example en
       */
      language?: string;
      /**
       * @description Default currency code.
       * @example USD
       */
      currency?: string;
      /**
       * @description Default symbol for values in the currency.
       * @example $
       */
      currency_symbol?: string;
      /**
       * @description Default decimal separator for values in the currency.
       * @example .
       */
      decimal_separator?: string;
      /**
       * @description Default thousands separator for values in the currency.
       * @example ,
       */
      thousands_separator?: string;
      /**
       * @description Default decimal places for values in the currency.
       * @example 2
       */
      decimal_places?: number;
      /**
       * @description Default position of the currency symbol (left or right).
       * @example left
       */
      currency_symbol_location?: string;
      /**
       * @description Default weight units (metric or imperial).
       * @example Ounces
       */
      weight_units?: string;
      /**
       * @description Default dimension units (metric or imperial).
       * @example Inches
       */
      dimension_units?: string;
      /**
       * @description The number of decimal places.
       * @example 2
       */
      dimension_decimal_places?: number;
      /**
       * @description The symbol that separates the whole numbers from the decimal points.
       * @example .
       */
      dimension_decimal_token?: string;
      /** @description The symbol used to denote thousands. */
      dimension_thousands_token?: string;
      /**
       * @description Name of the BigCommerce plan to which this store is subscribed.
       * @example Standard
       */
      plan_name?: string;
      /**
       * @description Level of the BigCommerce plan to which this store is subscribed.
       * @example Standard
       */
      plan_level?: string;
      /**
       * @description Whether the payment plan associated with the store is still in the trial phase.
       * @example false
       */
      plan_is_trial?: boolean;
      /**
       * @description Industry, or vertical category, in which the business operates. (As selected from drop-down list during the store sign-up process.)
       * @example Technology
       */
      industry?: string;
      /** @description Either an object describing the logo image, or an empty array. */
      logo?: {
        /** @example https://cdn8.bigcommerce.com/s-{store_hash}/product_images/screen_shot_2018-05-15_at_12.22.26_pm__05547_1529512135.png */
        url?: string;
      } | unknown[];
      /**
       * @description A Boolean value that indicates whether or not prices are entered with tax.
       * @example false
       */
      is_price_entered_with_tax?: boolean;
      /** @description The numeric ID of the store. This is a different unique ID than the store hash. */
      store_id?: number;
      /**
       * @description The ID of the default channel. The ID of the first hosted storefront created on the store is `1`.
       * @default 1
       * @example 1
       */
      default_channel_id?: number;
      /**
       * @description The BigCommerce ID of the website associated with the default storefront.
       * @example 1000
       */
      default_site_id?: number;
      active_comparison_modules?: unknown[];
      /** @description Describes some aspects of the storeʼs tech stack and configuration settings that affect the features available for the store to use. */
      features?: {
        /**
         * @description Indicates whether a store is using a Stencil theme.
         * @default true
         * @example true
         */
        stencil_enabled?: boolean;
        /**
         * @description Indicates whether there is site-wide https.
         * @example false
         */
        sitewidehttps_enabled?: boolean;
        /** @description The ID of the Facebook by Meta catalog. If there is none, this endpoint returns an empty string. */
        facebook_catalog_id?: string;
        /**
         * @description What type of checkout is enabled on the store. Possible values returned are optimized, single (one page), single_customizable (one page for developers), klarna.
         * @example optimized
         * @enum {string}
         */
        checkout_type?: "optimized" | "single" | "single_customizable" | "klarna";
        /** @example false */
        wishlists_enabled?: boolean;
        /**
         * @description Describes whether you can use the [GraphQL Storefront API](/graphql-storefront/reference) on this store.
         * @default true
         * @example true
         */
        graphql_storefront_api_enabled?: boolean;
        /**
         * @description Indicates whether the store is tracking the values of the cookie and privacy consent settings that the shopper consented to and configured.
         * @example true
         */
        shopper_consent_tracking_enabled?: boolean;
        /**
         * @description Indicates whether the storeʼs plan provides the possibility of using more than one storefront or sales channel. Internally, this value indicates whether the store has the MSF feature flag enabled.
         * @default false
         * @example true
         */
        multi_storefront_enabled?: boolean;
        storefront_limits?: {
          /**
           * @description Describes the number of storefronts active on the store. If `multi_storefront_enabled` is `false`, this value is `1`.
           * @default 1
           * @example 3
           */
          active?: number;
          /**
           * @description Describes the total number of storefronts associated with the store, including both active and inactive storefronts. The default varies based on store plan.
           * @default 1
           * @example 15
           */
          total_including_inactive?: number;
        };
      };
    };
    /** Time Zone */
    Timezone: {
      /**
       * @description A string identifying the time zone, in the format `Continent/City`.
       * @example America/Chicago
       */
      name?: string;
      /**
       * @description A negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
       * @example -21600
       */
      raw_offset?: number;
      /**
       * @description A negative or positive number, identifying the offset from UTC/GMT, in seconds, during summer/daylight saving time.
       * @example -18000
       */
      dst_offset?: number;
      /**
       * @description A boolean indicating whether this time zone observes daylight saving time.
       * @example true
       */
      dst_correction?: boolean;
      date_format?: components["schemas"]["DateFormat"];
    };
    /** Date Format */
    DateFormat: {
      /**
       * @description A string that defines dates’ display format, in the pattern `M jS Y`.
       * @example M jS Y
       */
      display?: string;
      /**
       * @description A string that defines the CSV export format for orders, customers, and products, in the pattern `M jS Y`.
       * @example M jS Y
       */
      export?: string;
      /**
       * @description A string that defines dates’ extended-display format, in the pattern `M jS Y @ g:i A`.
       * @example M jS Y @ g:i A
       */
      extended_display?: string;
    };
    /**
     * timeStamp_Full
     * @description Store Time in Unix format.
     */
    timeStamp_Full: {
      /** Format: int64 */
      time?: number;
    };
  };
  responses: never;
  parameters: {
    ContentType?: string;
    /** @description Specifies the page number in a limited (paginated) list of products. */
    PageParam?: number;
    /** @description The ID of the `Metafield`. */
    MetafieldIdParam: number;
    /** @description Filter based on a metafieldʼs key. */
    MetafieldKeyParam?: string;
    /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
    MetafieldKeyInParam?: string[];
    /** @description Filter based on a metafieldʼs namespaces. */
    MetafieldNamespaceParam?: string;
    /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter */
    MetafieldNamespaceInParam?: string[];
    /** @description Controls the number of items per page in a limited (paginated) list of products. */
    LimitParam?: number;
    /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
    DirectionParam?: "asc" | "desc";
    /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
    Accept?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Store Information
   * @description Returns metadata about the global settings for a store. Some of these values are independently configurable on a per-storefront or per-channel basis. For channel overrides, see [Store Settings](/docs/rest-management/settings).
   */
  getStoreInformation: {
    parameters: {
      header?: {
        Accept?: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StoreInformation"];
        };
      };
    };
  };
  /**
   * Get All Store Metafields
   * @description Gets all store `metafields`.
   */
  getStoreMetafields: {
    parameters: {
      query?: {
        page?: components["parameters"]["PageParam"];
        limit?: components["parameters"]["LimitParam"];
        key?: components["parameters"]["MetafieldKeyParam"];
        "key:in"?: components["parameters"]["MetafieldKeyInParam"];
        namespace?: components["parameters"]["MetafieldNamespaceParam"];
        "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
        direction?: components["parameters"]["DirectionParam"];
      };
    };
    responses: {
      /** @description List of `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch"];
        };
      };
    };
  };
  /**
   * Update multiple metafields
   * @description Update multiple metafields.
   */
  updateStoreMetafields: {
    requestBody?: {
      content: {
        "application/json": (components["schemas"]["MetafieldBase_Post_Put"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            id: number;
          })[];
      };
    };
    responses: {
      /** @description Response payload for the BigCommerce API. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch_POST_PUT"];
        };
      };
      /** @description Bad Request. Input is invalid. */
      400: {
        content: {
          "application/json": {
            status?: number;
            title?: string;
            type?: string;
            detail?: string;
          };
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Create multiple Metafields
   * @description Create multiple `metafields`.
   */
  createStoresMetafields: {
    /** @description A `metafield` object. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MetafieldBase_Post_Put"][];
      };
    };
    responses: {
      /** @description List of created `Metafield` objects. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch_POST_PUT"];
        };
      };
      /** @description Response object for metafields creation with partial success. */
      422: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
        };
      };
    };
  };
  /**
   * Delete multiple metafields
   * @description Delete all store metafields.
   */
  deleteStoreMetafields: {
    /** @description Metafields ID list. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   69,
         *   70
         * ]
         */
        "application/json": number[];
      };
    };
    responses: {
      /** @description Response object for metafields deletion with success. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
        };
      };
    };
  };
  /**
   * Get a Store Metafield
   * @description Gets a store `metafield`.
   */
  getStoreMetafield: {
    parameters: {
      header?: {
        Accept?: components["parameters"]["Accept"];
      };
      path: {
        metafieldId: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      /** @description A `Metafield` object. */
      200: {
        content: {
          "application/json": components["schemas"]["MetafieldResponse"];
        };
      };
      /** @description Not found (A metafield was not found with this query). */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /**
   * Update a Store Metafield
   * @description Update a store `Metafield`.
   */
  updateStoreMetafield: {
    parameters: {
      header?: {
        Accept?: components["parameters"]["Accept"];
        "Content-Type"?: components["parameters"]["ContentType"];
      };
      path: {
        metafieldId: components["parameters"]["MetafieldIdParam"];
      };
    };
    /** @description A `Metafield` object. */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MetafieldBase_Post_Put"];
      };
    };
    responses: {
      /** @description A metafield and metadata. */
      200: {
        content: {
          "application/json": components["schemas"]["MetaFieldCollectionResponse"];
        };
      };
      /** @description The resource was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /**
   * Delete a Metafield
   * @description Deletes a store `Metafield`.
   */
  deleteStoreMetafield: {
    parameters: {
      header?: {
        Accept?: components["parameters"]["Accept"];
      };
      path: {
        metafieldId: components["parameters"]["MetafieldIdParam"];
      };
    };
    responses: {
      /** @description An empty response. */
      204: {
        content: never;
      };
      /** @description Not found (A metafield was not found with this query). */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /**
   * Get System Timestamp
   * @description Returns the system timestamp at the time of the request. The time resource is useful for validating API authentication details and testing client connections.
   */
  getSystemTimestamp: {
    parameters: {
      header?: {
        Accept?: components["parameters"]["Accept"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["timeStamp_Full"];
        };
      };
    };
  };
}
